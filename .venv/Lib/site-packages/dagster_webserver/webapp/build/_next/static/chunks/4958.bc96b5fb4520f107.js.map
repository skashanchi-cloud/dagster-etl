{"version":3,"file":"static/chunks/4958.bc96b5fb4520f107.js","mappings":"qXAkBA,IAAMA,EAA4B,CAChCC,KAAM,UACNC,WAAY,CAACC,UAAW,EAAGC,OAAQ,CAAC,CAAC,CACvC,EAEMC,EAAU,CAACC,EAAwBC,KACvC,OAAQA,EAAOC,IAAI,EACjB,IAAK,QACH,OAAOR,CACT,KAAK,QACH,MAAO,mBAAIM,GAAAA,CAAWL,KAAM,YAC9B,KAAK,iBAAkB,CACrB,GAAM,YAACC,CAAU,CAAC,CAAGI,EACrB,MAAO,CACLL,KAAM,WACNC,WAAY,mBAAIA,GAAAA,CAAYC,UAAWD,EAAWC,SAAS,CAAG,GAChE,CACF,CACA,IAAK,eAAgB,CACnB,GAAM,YAACD,CAAU,CAAC,CAAGI,EACrB,MAAO,CACLL,KAAM,WACNC,WAAY,mBACPA,GAAAA,CACHC,UAAWD,EAAWC,SAAS,CAAG,EAClCC,OAAQ,mBAAIF,EAAWE,MAAM,GAAE,CAACG,EAAOE,IAAI,CAAC,CAAEF,EAAOG,KAAK,IAE9D,CACF,CACA,IAAK,WACH,MAAO,mBAAIJ,GAAAA,CAAWL,KAAM,aAChC,CACF,EAEaU,EAA6B,IAAMC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACP,EAASL,cAAc,0BCF3E,IAAMa,EAA8B,IACzC,GAAM,CAACC,gBAAc,SAAEC,CAAO,aAAEC,CAAW,CAAC,CAAGC,EACzCC,EAAQF,EAAYG,MAAM,CAE1B,CAACC,EAAOC,EAAS,CAAGV,IAG1BW,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACe,CAJ2BX,WAIf,CAA/BG,GACFO,EAAS,CAACb,KAAM,OAAO,EAE3B,EAAG,CAACM,EAAgBO,EAAS,EAE7B,GAAM,CAACE,EAAY,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAC/BC,EAAAA,EAAqBA,EAGjB,CAACC,EAAW,CAAGF,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAC9BG,EAAAA,EAAoBA,EAGhB,CAACC,EAAc,CAAGJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGjCK,EAAAA,EAAuBA,EAEnB,CAACC,EAAa,CAAGN,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAChCO,EAAAA,EAAsBA,EAGlBC,EAAQ,MAAOC,IACnB,GAAM,aAACC,CAAW,MAAEzB,CAAI,MAAED,CAAI,CAAC,CAAGyB,EAC5BE,EAAa,CACjBC,uBAAwBF,EAAYG,QAAQ,CAC5CC,eAAgBJ,EAAYzB,IAAI,EAGlC,OAAQD,GACN,IAAK,SAAU,CACb,GAAM,MAAC+B,CAAI,CAAC,CAAG,MAAMhB,EAAY,CAC/BiB,UAAW,CAACC,eAAgB,mBAAIN,GAAAA,CAAYO,WAAYjC,GAAK,CAC/D,GAEA,aAAQ8B,EAAAA,KAAAA,EAAAA,EAAMhB,MAANgB,KAAiB,CAACI,UAAU,EAClC,IAAK,SACHtB,EAAS,CAACb,KAAM,gBAAgB,GAChC,MACF,KAAK,sBACL,IAAK,oBACL,IAAK,cACHa,EAAS,CACPb,KAAM,eACNC,OACAC,MAAO6B,EAAKhB,WAAW,CAACqB,OAAO,EAErC,CAEA,KACF,CAEA,IAAK,WAAY,CACf,GAAM,CAACL,MAAI,CAAC,CAAG,MAAMX,EAAc,CACjCY,UAAW,CAACK,iBAAkB,mBAAIV,GAAAA,CAAYW,aAAcrC,GAAK,CACnE,GAEA,aAAQ8B,EAAAA,KAAAA,EAAAA,EAAMX,MAANW,OAAmB,CAACI,UAAU,EACpC,IAAK,sBACHtB,EAAS,CAACb,KAAM,gBAAgB,GAChC,MACF,KAAK,oBACL,IAAK,cACHa,EAAS,CACPb,KAAM,oBACNC,EACAC,MAAO6B,EAAKX,aAAa,CAACgB,OAAO,EAEvC,CAEA,KACF,CAEA,QACEG,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACvC,EACtB,CACF,EAEMwC,EAAO,MAAOf,IAClB,GAAM,MAACxB,CAAI,MAAED,CAAI,kBAAEyC,CAAgB,CAAC,CAAGhB,EACjCO,EAAY,CAACU,GAAID,EAAiBC,EAAE,EAE1C,OAAQ1C,GACN,IAAK,SAAU,CACb,GAAM,MAAC+B,CAAI,CAAC,CAAG,MAAMb,EAAW,WAACc,CAAS,GAC1C,aAAQD,EAAAA,KAAAA,EAAAA,EAAMb,MAANa,IAAgB,CAACI,UAAU,EACjC,IAAK,2BACHtB,EAAS,CAACb,KAAM,gBAAgB,GAChC,MACF,KAAK,oBACL,IAAK,cACHa,EAAS,CACPb,KAAM,oBACNC,EACAC,MAAO6B,EAAKb,UAAU,CAACkB,OAAO,EAEpC,CACA,KACF,CAEA,IAAK,WAAY,CACf,GAAM,MAACL,CAAI,CAAC,CAAG,MAAMT,EAAa,WAACU,CAAS,GAC5C,aAAQD,EAAAA,KAAAA,EAAAA,EAAMY,MAANZ,aAAyB,CAACI,UAAU,EAC1C,IAAK,sBACHtB,EAAS,CAACb,KAAM,gBAAgB,GAChC,MACF,KAAK,oBACL,IAAK,cACHa,EAAS,CACPb,KAAM,oBACNC,EACAC,MAAO6B,EAAKY,mBAAmB,CAACP,OAAO,EAE7C,CACA,KACF,CAEA,QACEG,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACvC,EACtB,CACF,EAEM4C,EAAS,UACb,GAAuB,YAAY,CAA/BtC,GAKJ,IAAK,IAAMmB,KADXZ,EAAS,CAACb,KAAM,OAAO,GACEQ,GACA,SAAS,CAA5BF,EACF,MAAMkB,EAAMC,GAEZ,MAAMe,EAAKf,GAIfZ,EAAS,CAACb,KAAM,UAAU,GAC5B,EAgJM6C,EAAiC,eAATpD,IAAI,CAElC,MACE,WAACqD,EAAAA,EAAMA,CAAAA,CACLC,OAAQzC,eACR0C,MAA0B,UAAnB1C,EAA6B,oBAAsB,mBAC1D2C,kBAAmBJ,EACnBK,qBAAsBL,EACtBtC,QAASA,YAET,UAAC4C,EAAAA,EAAUA,CAAAA,UACT,WAACC,EAAAA,CAAKA,CAAAA,CAACC,UAAU,SAASC,QAAS,aAChCC,CA1Je,KACtB,GAAuB,YAAY,CAA/BjD,EACF,OAAO,KAGT,OAAQM,EAAMnB,IAAI,EAChB,IAAK,UACH,GAAuB,QAAQ,CAA3Ba,EACF,MACE,UAACkD,MAAAA,UACE,GAEA,OADW,IAAV9C,EAAc,eAAiB,GAAS,OAANA,EAAM,gBACzC,gDAIP,MACE,UAAC8C,MAAAA,UACE,GAEA,OADW,IAAV9C,EAAc,eAAiB,GAAS,OAANA,EAAM,gBACzC,+CAGP,KAAK,WACL,IAAK,YACH,IAAM+C,EAAQ/C,EAAQ,EAAIE,EAAMlB,UAAU,CAACC,SAAS,CAAGe,EAAQ,EAC/D,MACE,WAAC0C,EAAAA,CAAKA,CAAAA,CAACC,UAAU,SAASC,QAAS,YACjC,UAACI,EAAAA,CAAWA,CAAAA,CAACC,OAAO,UAAUF,MAAOG,KAAKC,GAAG,CAAC,GAAKJ,GAAQK,QAASL,EAAQ,IAC5D,aAAf7C,EAAMnB,IAAI,CACT,UAACsE,EAAAA,CAAeA,CAAAA,CAAC3B,QAAQ,oEACvB,OAGV,SACE,OAAO,IACX,EACF,IAsHS4B,CA5EiB,KACxB,GAAuB,aAAnB1D,GAAgD,WAAW,CAA1BM,EAAMnB,IAAI,CAC7C,OAAO,KAGT,GAAmB,YAAY,CAA3BmB,EAAMnB,IAAI,CACZ,MACE,UAAC+D,MAAAA,UAAI,yFAMT,IAAM5D,EAASgB,EAAMlB,UAAU,CAACE,MAAM,CAChCqE,EAAaC,OAAOC,IAAI,CAACvE,GAAQe,MAAM,CACvCyD,EAAexD,EAAMlB,UAAU,CAACC,SAAS,CAAGsE,EAElD,MACE,WAACb,EAAAA,CAAKA,CAAAA,CAACC,UAAU,SAASC,QAAS,YAChCc,EACC,WAAChB,EAAAA,CAAKA,CAAAA,CAACC,UAAU,MAAMC,QAAS,EAAGe,WAAW,uBAC5C,UAACC,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,eAAesE,MAAOC,EAAAA,EAAkB,KACnD,UAAChB,MAAAA,UACqB,UAAnBlD,EACG,wBAEC,OADkB,IAAjB8D,EAAqB,eAAiB,GAAgB,OAAbA,EAAa,gBACvD,KACD,wBAEC,OADkB,IAAjBA,EAAqB,eAAiB,GAAgB,OAAbA,EAAa,gBACvD,UAGP,KACHH,EACC,WAACb,EAAAA,CAAKA,CAAAA,CAACC,UAAU,SAASC,QAAS,YACjC,WAACF,EAAAA,CAAKA,CAAAA,CAACC,UAAU,MAAMC,QAAS,EAAGe,WAAW,uBAC5C,UAACC,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,UAAUsE,MAAOC,EAAAA,EAAmB,KAC/C,UAAChB,MAAAA,UACqB,UAAnBlD,EACG,mBAEC,OADgB,IAAf2D,EAAmB,eAAiB,GAAc,OAAXA,EAAW,gBACnD,KACD,kBAEC,OADgB,IAAfA,EAAmB,eAAiB,GAAc,OAAXA,EAAW,gBACnD,UAGT,UAACQ,KAAAA,CAAGC,MAAO,CAACC,OAAQ,OAAO,WACxBT,OAAOC,IAAI,CAACvE,GAAQgF,GAAG,CAAC,GACvB,UAACC,KAAAA,UACC,WAACzB,EAAAA,CAAKA,CAAAA,CAACC,UAAU,MAAMC,QAAS,YAC9B,WAACwB,SAAAA,WAAQC,EAAe,OACvBnF,CAAM,CAACmF,EAAe,CAAG,UAACvB,MAAAA,UAAK5D,CAAM,CAACmF,EAAe,GAAU,SAH3DA,SASb,QAGV,SAkBI,UAACC,EAAAA,EAAYA,CAAAA,UAAEC,MAtHjB,GAAuB,YAAY,CAA/B3E,EACF,OAAO,KAGT,OAAQM,EAAMnB,IAAI,EAChB,IAAK,UAKH,MACE,iCACE,UAACyF,EAAAA,EAAMA,CAAAA,CAACC,QAAS5E,WAAS,WAC1B,UAAC2E,EAAAA,EAAMA,CAAAA,CAACvB,OAAO,UAAUwB,QAASvC,WANjB,CAOdwC,SAPL9E,EACI,SAA+D,OAA5C,MAAI,eAAiB,GAAS,OAANI,EAAM,iBACjD,QAA8D,OAA5C,IAAVA,EAAc,eAAiB,GAAS,OAANA,EAAM,qBAUxD,KAAK,WAKH,MACE,UAACwE,EAAAA,EAAMA,CAAAA,CAACvB,OAAO,UAAU0B,QAAQ,aAJd,CAKhBD,SALH9E,EACI,YAAkE,OAA5C,IAAVI,EAAc,eAAiB,GAAS,OAANA,EAAM,iBACpD,YAAkE,OAA5C,IAAVA,EAAc,eAAiB,GAAS,OAANA,EAAM,kBAO5D,KAAK,YACH,MACE,UAACwE,EAAAA,EAAMA,CAAAA,CAACvB,OAAO,UAAUwB,QAAS5E,WAAS,QAIjD,EACF,QAoFF,EAAE,eCnWK,IAAM+E,EAA0B,IACrC,IAAIC,GAAS,EACTC,GAAQ,EAEZ,IAAK,IAAM5E,KAAS6E,EAAmB,CACrC,GAAM,QAACC,CAAM,CAAC,CAAG9E,EAMjB,GALI8E,IAAWC,EAAAA,GAAiBA,CAACC,OAAO,CACtCJ,CADwC,EAChC,EACCE,IAAWC,EAAAA,GAAiBA,CAACE,OAAO,EAAE,CAC/CN,GAAS,GAEPC,GAASD,EACX,KAEJ,CAEA,MAAO,CAACA,eAAQC,CAAK,CACvB,EAAE,ECTuC/E,IACvC,GAAM,aAACD,CAAW,CAAC,CAAGC,EAChBC,EAAQF,EAAYG,MAAM,CAE1B,CAACL,EAAgBwF,EAAkB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAiB,YAE/D,QAACR,CAAM,OAAEC,CAAK,CAAC,CAAGQ,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACvBV,EAAwB9E,EAAYoE,GAAG,CAAC,OAAC,QAAlBU,UAAmB7C,CAAgB,CAAC,UAAKA,KACtE,CAACjC,EAAY,EAEhB,MACE,iCACE,UAACyF,EAAAA,EAAOA,CAAAA,CACNC,QACE,WAACC,EAAAA,EAAIA,CAAAA,WACH,UAACC,EAAAA,EAAQA,CAAAA,CACPC,KAAM,SAA+D,OAA5C,IAAV3F,EAAc,eAAiB,GAAS,OAANA,EAAM,iBACvD2E,SAAU,CAACE,EACXe,gBAAe,CAACf,EAChBgB,KAAK,YACLpB,QAAS,KACPW,EAAkB,QACpB,IAEF,UAACM,EAAAA,EAAQA,CAAAA,CACPC,KAAM,QAA8D,OAA5C,IAAV3F,EAAc,eAAiB,GAAS,OAANA,EAAM,iBACtD2E,SAAU,CAACG,EACXc,gBAAe,CAACd,EAChBe,KAAK,aACLpB,QAAS,KACPW,EAAkB,OACpB,OAINU,UAAU,sBAEV,UAACtB,EAAAA,EAAMA,CAAAA,CAACG,SAAU,CAAC3E,EAAOiD,OAAO,UAAU8C,UAAW,UAACnC,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,yBAAkB,cAIrF,UAACI,EAA2BA,CAC1BC,eAAgBA,EAChBE,OAF0BH,KAEbG,EACbD,QAAS,IAAMuF,EAAkB,gBAIzC,EAAE,mNChCK,IAAMY,EAAwB,OAAC,MAACC,CAAI,CAAQ,GAC3C,CAACC,EAAYC,EAAc,CAAGd,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAC,IAgE7C,MACE,iCACE,UAACE,EAAAA,EAAOA,CAAAA,CAACC,QAASA,MA/DpB,GAAI,CAACS,EACH,IADS,EAEP,UAACG,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,EAAGC,WAAY,EAAE,WACxC,UAACC,EAAAA,EAAOA,CAAAA,UAAC,mBAKf,IAAMX,EAAOY,CAAY,CAACR,EAAKjB,MAAM,CAAC,CAChC0B,EAAY,UAACC,EAAAA,CAASA,CAAAA,CAACD,UAAW,CAACE,KAAMX,EAAKS,SAAS,IAE7D,OAAQT,EAAKjB,MAAM,EACjB,KAAK6B,EAAAA,GAAqBA,CAACC,OAAO,CAChC,MACE,UAACC,GAAAA,CACClB,KAAMA,EACNvD,MAAM,qBACNoE,UAAWA,EACXlB,QACE,UAAC1C,MAAAA,UACEmD,EAAKzG,KAAK,CACT,UAACwH,EAAAA,CAAUA,CAAAA,CAACvC,QAAS,IAAM0B,GAAc,YAAO,eAEhD,mBAMZ,MAAKU,EAAAA,GAAqBA,CAACI,OAAO,CAAE,CAClC,IAAMC,EAAWjB,EAAKkB,MAAM,CAAClH,MAAM,CACnC,MACE,UAAC8G,GAAAA,CACClB,KAAMA,EACNvD,MAAM,wBACNoE,UAAWA,EACXlB,QACE,UAAC1C,MAAAA,UACe,IAAboE,EACG,kBACA,GAAoC,OAAjCE,EAAAA,EAAeA,CAACC,MAAM,CAACH,GAAU,sBAKlD,CACA,KAAKL,EAAAA,GAAqBA,CAACS,OAAO,CAChC,MAAO,UAACP,GAAAA,CAAalB,KAAMA,EAAMvD,MAAM,kBAAkBoE,UAAWA,GACtE,MAAKG,EAAAA,GAAqBA,CAACU,OAAO,CAClC,YAMyBtB,EALvB,MACE,UAACc,GAAAA,CACClB,KAAMA,EACNvD,MAAM,sBACNoE,UAAWA,EACXlB,QAAS,UAACgB,EAAAA,EAAOA,CAAAA,UAAEP,OAAAA,EAAAA,EAAKuB,UAAAA,EAALvB,EAAmB,UAAnBA,cAG3B,EACF,IAIiCH,UAAU,MAAM2B,gBAAgB,iBAC3D,UAACC,EAAAA,CAAWA,CAAAA,UACTzB,EAAOQ,CAAY,CAACR,EAAKjB,MAAM,CAAC,CAAG,UAACpB,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,UAAUsE,MAAOC,EAAAA,EAAiB,SAGpFmC,OAAAA,EAAAA,KAAAA,EAAAA,EAAMzG,KAAAA,CAANyG,CACC,WAAC7D,EAAAA,EAAMA,CAAAA,CAACC,OAAQ6D,EAAY5D,MAAM,QAAQ0B,MAAO,CAAC2D,MAAO,MAAM,YAC7D,UAAClF,EAAAA,EAAUA,CAAAA,UACT,UAACmF,EAAAA,EAAeA,CAAAA,CAACpI,MAAOyG,EAAKzG,KAAK,KAEpC,UAAC8E,EAAAA,EAAYA,CAAAA,CAACuD,SAAS,aACrB,UAACrD,EAAAA,EAAMA,CAAAA,CACLvB,OAAO,UACPwB,QAAS,KACP0B,EAAc,GAChB,WACD,cAKH,OAGV,EAAE,EAE6D,CAC7D,CAACU,EAAAA,GAAqBA,CAACC,OAAO,CAAC,CAAE,UAAClD,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,UAAUsE,MAAOC,EAAAA,EAAmB,KAChF,CAAC+C,EAAAA,GAAqBA,CAACI,OAAO,CAAC,CAAE,UAACrD,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,OAAOsE,MAAOC,EAAAA,EAAkB,KAC5E,CAAC+C,EAAAA,GAAqBA,CAACS,OAAO,CAAC,CAAE,UAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAClD,CAAClB,EAAAA,GAAqBA,CAACU,OAAO,CAAC,CAAE,UAAC3D,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,SAASsE,MAAOC,EAAAA,EAAiB,IAC/E,EASMiD,GAAe,OAAC,MAAClB,CAAI,OAAEvD,CAAK,CAAEoE,WAAS,CAAElB,SAAO,CAAoB,GACxE,MACE,WAACY,EAAAA,CAAGA,CAAAA,CAACC,QAAS,GAAI2B,UAAWC,IAAAA,YAAmB,WAC9C,WAAC7B,EAAAA,CAAGA,CAAAA,CACF8B,OAAQ1C,EAAU,cAAW2C,EAC7B9B,QAASb,EAAU,CAAC4C,OAAQ,EAAE,OAAID,EAClClE,OAAQuB,EAAU,CAAC4C,OAAQ,CAAC,OAAID,EAChCE,KAAM,CACJ1F,UAAW,MACXgB,WAAY,SACZ2E,IAAK,EACLC,eAAgB,eAClB,YAEA,WAACnC,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAOgB,WAAY,SAAU2E,IAAK,CAAC,YACvDzC,EACD,UAAC/C,MAAAA,UAAKR,OAER,UAACQ,MAAAA,UAAK4D,OAEPlB,EAAU,UAAC1C,MAAAA,UAAK0C,IAAiB,OAGxC,kEC7JO,IAAMgD,GAAoB,QAKhBC,EAAf,IAAMC,EAAAA,MAASD,GAJWE,KAAKC,cAAc,CAACC,UAAUC,QAAQ,CAAE,UAChEC,EACAC,aAAc,aAChB,GAEGC,aAAa,CAAC,IAAIC,MAClBC,IAAI,CAAC,GAAwB,iBAAdC,EAAK9J,IAAI,CAAK,EAFjBmJ,KAAAA,EAAAA,EAEkC1F,IAFlC0F,CAEuC,CAEhDY,QAAaX,EAAAA,KAAAA,EAAAA,EAAQY,OAAO,CAAC,MAAO,IAC1C,GAAI,CAACD,EACH,OAAO,EAGT,CAJiB,EAIX,CAACE,EAAQ,GAAG,CAAEC,EAAU,GAAG,CAAC,CAAGH,EAAWI,KAAK,CAAC,KAChDC,EAAcC,SAASJ,EAAO,IAC9BK,EAAgB,SAAUJ,EAAS,IAAM,IAAOE,CAAAA,CAAc,EAAI,CAAC,GAAI,EAC7E,OAAOA,EAAcE,CACvB,EAAE,wCCJK,IAAMC,GAAU,IACrB,GAAM,KADYA,SACXC,CAAY,mBAAEC,CAAiB,CAAC,CAAGhK,EACpC,mBAACiK,CAAiB,uBAAEC,CAAqB,CAAC,CAAGC,GACjDJ,EACAC,GAGII,EACJ,UAACC,EAAAA,EAAaA,CAAAA,CACZC,KAAM,CACJ,CAACC,IAAK,aAAcvH,MAAO,UAACwH,EAAAA,EAAWA,CAAAA,UAAET,GAA2B,EACpE,CAACQ,IAAK,YAAavH,MAAO,UAACyH,OAAAA,UAAMR,GAAyB,EAC3D,GAIL,MACE,UAACS,GAAAA,UACC,UAACC,EAAAA,CAAOA,CAAAA,CAAClF,QAAS2E,EAAgBrE,UAAU,eAC1C,UAAC6E,GAAAA,CAAGA,CAAAA,CAAC9E,KAAK,oBAAYoE,OAI9B,EAAE,GAEgC,CAChCH,EACAC,KAEA,GAAM,CACJa,SAAU,CAACC,EAAe,CAC3B,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,GAAAA,EAAWA,EAE1B,GAAI,CAACjB,EACH,MAAO,CACLE,KAFe,aAEI,KACnBC,sBAAuB,IACzB,EAGF,IAAMe,EAAmBjB,GAAqB,MACxCkB,EAAmCC,CAAAA,EAAAA,GAAAA,CAAAA,CAAeA,CAACpB,EAAc,kBAACkB,CAAgB,GAClFG,EAAkC,cAAnBN,EAAiCO,CAAAA,EAAAA,GAAAA,EAAAA,CAAeA,GAAKP,EAEpEQ,EAAqB7C,GAAkB2C,GACvCG,EAA0B9C,GAAkBwC,GAQlD,GAT4CxC,GASrC,CACLwB,IAT+CxB,cAGb0C,CAAAA,EAAAA,GAAAA,CAAAA,CAAeA,CAACpB,EAAc,CAChEkB,iBAAkBG,EAClBI,SAJeF,EAAqBC,CAKtC,GAIErB,sBAAuBgB,CACzB,CACF,EAAE,GAEgBO,GAAAA,EAAMA,CAAC1I,GAAG,2PCrErB,IAAM2I,GAAe,CAACzG,EAA2B0G,KACtD,GAAI1G,IAAWC,EAAAA,GAAiBA,CAACE,GADVsG,IACiB,EAAIC,GAA4B,IAE7D1G,IAAWC,EAAAA,GAAiBA,CAACC,OAAO,EAA6B,GAAG,CAA5BwG,EADjD,OAAO,KAKT,IAAMxM,EAAS,EAAE,CAajB,OAZI8F,IAAWC,EAAAA,GAAiBA,CAACC,OAAO,EAA6B,GAAG,CAA5BwG,EAC1CxM,EAAOyM,IAAI,CACT,0HAEO3G,IAAWC,EAAAA,GAAiBA,CAACE,OAAO,EAAIuG,EAAuB,GAAG,EACpEC,IAAI,CAAC,kFAGVD,EAAuB,GACzBxM,EAAOyM,IAAI,CAAC,0CAIZ,UAACpG,EAAAA,EAAOA,CAAAA,CACNkC,gBAAgB,QAChBmE,iBAAiB,6BACjBC,SAAS,QACTrG,QACE,WAACY,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,SAAU2F,IAAK,CAAC,EAAGjC,QAAS,aACjD,UAACjC,SAAAA,UAAO,yCACR,UAACtB,MAAAA,UAAI,YACL,UAACiB,KAAAA,UACE7E,EAAOgF,GAAG,CAAC,CAAC1E,EAAOsM,IAClB,UAAC3H,KAAAA,UAAgB3E,GAARsM,kBAMjB,UAACnB,GAAAA,CAAGA,CAAAA,CAACoB,IAAI,IAACC,WAAW,IAAC/I,OAAO,kBAAS,WAK5C,EAAE,20BCCF,IAAMgJ,GAAmB,sCACnBC,GAAiC,QAAyB,OAAjBD,IAoQ/BT,CAAAA,EAAAA,GAAAA,EAAAA,CAAMA,CAACpF,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,uFAEC,OAAC,qBAAC+F,CAAmB,CAAC,UAC7CA,EAAsBD,GAAiCD,KAIpD,IAAMG,GAAwBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,KAkCpCC,GAAAA,EAAiBA,CACjBC,GAAAA,EAAiBA,CACjBC,GAAAA,CAAwBA,EAC1B,GChT0CC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CACpD,CAAC1M,EAAyB2M,SAmDtBC,EACAA,EA4FyCA,EA/I3C,GAAM,OAACb,CAAK,MAAEvM,CAAI,aAAEyB,CAAW,CAAE4L,SAAO,iBAAEC,CAAe,CAAC,CAAG9M,EAGvD+M,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAAC,KAE9BC,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAC1Bb,GACA,CACE9K,UAAW,CACT4L,MAHiBd,GAGP,CACRhL,eAAgBJ,EAAYzB,IAAI,CAChC2B,uBAAwBF,EAAYG,QAAQ,CAC5CS,aAAcrC,CAChB,CACF,EACA4N,KAAM,CAACL,EACPM,6BAA6B,CAC/B,GAGIC,EAAoCJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAGhDK,GAAAA,CAA+BA,CAAE,CACjChM,UAAW,CACTK,iBAAkB,CAChBP,eAAgBJ,EAAYzB,IAAI,CAChC2B,uBAAwBF,EAAYG,QAAQ,CAC5CS,aAAcrC,CAChB,CACF,EACA4N,KAAM,CAACL,CACT,GAEAS,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACP,EAAaQ,GAAAA,EAAeA,EACtDD,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACF,EAAmCG,GAAAA,EAAeA,EAE5E,GAAM,MAACnM,CAAI,CAAC,CAAG2L,EAETL,EAAerH,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAC3B,OAAIjE,EAAAA,KAAAA,EAAAA,EAAMoM,MAANpM,SAAqB,CAACI,UAAAA,IAAe,WAChC,CAD4C,IAI9CJ,EAAKoM,eAAe,CAC1B,CAACpM,EAAK,EAEH4E,EAAO0G,QAAAA,KAAAA,EAAAA,EAAce,QAAdf,KAA2B,CAACgB,KAAK,CAAC,EAAE,CAE3C,mBAAC3D,CAAiB,uBAAEC,CAAqB,CAAC,CAAGC,GACjDyC,OAAAA,QADmEzC,EACnEyC,KAAAA,EAAAA,EAAc7C,YAAAA,EAAd6C,EAA8B,KAC9BA,KADAA,EACAA,QAAAA,EAAAA,KAAAA,EAAAA,EAAc5C,cAAd4C,GAAc5C,EAAd4C,EAAmC,MAyDrC,IAzDEA,EA0DA,UAACiB,EAAAA,CAAQA,CAAAA,CACPlB,IAAKA,EACLZ,MAAOA,EACP+B,KAAMC,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAAC9M,EAAa,cAAmB,OAALzB,IAC1DqN,QAASA,EACTmB,SAAUlB,EACVmB,WAAY,OAAC,MAACH,CAAI,CAAW,GAAN9N,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAT8N,eAAoB,UAACI,EAAAA,EAAIA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAACC,GAAIL,GAAQ,KAAS9N,KAC7DoO,KACE,WAAC/H,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAO2F,IAAK,EAAG3E,WAAY,YAAY,YAC5D,UAACb,MAAAA,UACC,UAACc,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,eAEb,WAAC6G,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,SAAU2F,IAAK,CAAC,YACrC,WAAClC,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAO2F,IAAK,GAAI3E,WAAY,QAAQ,YACzD,UAACyC,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAO2F,IAAK,EAAG3E,WAAY,QAAQ,WAAIpE,IAC7DoN,OAAAA,EAAAA,KAAAA,EAAAA,EAAcyB,WAAAA,EACb,CADDzB,EACC,OAACjC,EAAAA,CAAOA,CAAAA,CACNlF,QAAS,UAAC1C,MAAAA,CAAIkB,MAAO,CAAC2D,MAAO,GAAG,WAAIgF,EAAayB,WAAW,GAC5DtI,UAAU,eAEV,UAAClC,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,OAAOsE,MAAOC,EAAAA,EAAgB,OAEzC,QAELkG,EACC,WAACqE,EAAAA,EAASA,CAAAA,WAAC,YACC,IACV,UAAC3D,EAAAA,CAAOA,CAAAA,CACN5E,UAAU,MACVN,QACE,UAAC4E,EAAAA,EAAaA,CAAAA,CACZC,KAAM,CACJ,CACEC,IAAK,aACLvH,MAAO,UAACuL,EAAAA,EAASA,CAAAA,UAAE3B,OAAAA,QAAAA,EAAAA,KAAAA,EAAAA,EAAc7C,YAAAA,EAAd6C,EAA8B,IACnD,EACA,CAACrC,GAFoBqC,CAEf,YAAa5J,MAAO,UAACyH,OAAAA,UAAMR,GAAyB,EAC3D,YAIL,UAACQ,OAAAA,UAAMP,SAIX,UAACsE,EAAAA,CAAQA,CAAAA,CAACC,OAAQ,GAAIC,QAAS,WAKvCC,MAAOA,CAzGG,SAYKC,EAXjB,GAAI3B,EAAY4B,OAAO,EAAI,CAAC5B,EAAY3L,IAAI,CAC1C,CAD4C,KACrC,UAACkN,EAAAA,CAAQA,CAAAA,CAACC,OAAQ,IAAKC,QAAS,KAGzC,IAAME,EAAahC,OAAAA,EAAAA,KAAAA,EAAAA,EAAce,aAAa,CAACmB,IAAAA,GAAQ,EAAE,CAEzD,MACE,UAACC,EAAAA,CAAkBA,CAAAA,CACjBC,SAAU,CACR,CACEzE,IAAK,aACL0E,QAASL,CAAAA,OAAAA,EAAAA,CAAU,CAAC,IAAXA,KAAAA,EAAAA,EAAeM,GAAfN,MAAeM,EACtB,UAAC1J,EAAAA,EAAOA,CAAAA,CAENsG,SAAS,MACTpE,gBAAgB,QAChBjC,QACE,UAAC1C,MAAAA,UACC,UAACoM,GAAAA,EAAgBA,CAAAA,CAACC,IAAKR,CAAU,CAAC,EAAE,CAAEpP,KAAMA,MAGhD6P,eAAgB,aAEhB,UAAC1H,EAAAA,CAAWA,CAAAA,UACV,WAACtB,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAOgB,WAAY,SAAU2E,IAAK,CAAC,YACxD,UAAC+G,GAAAA,EAAkBA,CAAAA,CAACrK,OAAQ2J,CAAU,CAAC,EAAE,CAAC3J,MAAM,GAChD,UAACsK,GAAAA,CAAWA,CAAAA,CAACC,cAAeZ,CAAU,CAAC,EAAE,CAACM,SAAS,CAAEO,aAAa,UAbjEb,CAAU,CAAC,EAAE,CAAC3M,EAAE,EAiBrB,IACN,EACA,CACEsI,IAAK,OACL0E,QAAS,UAAChJ,EAAqBA,CAACC,WAAMA,EAAAA,EAAQ,GAAfD,GACjC,EACA,CACEsE,IAHsCrE,SAItC+I,QACE,UAAC5I,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,SAAU4F,eAAgB,QAAQ,EAAGlC,QAAS,CAAC8H,KAAM,CAAC,WAC1ExB,EACC,UAAC8C,GAAAA,CAAcA,CAAAA,CAAYzO,YAAaA,EAAa0O,SAAU/C,GAA1CpN,GAErB,UAACoQ,EAAAA,CAAQA,CAAAA,CAAYhL,QAAQ,IAACiL,aAAa,IAAChD,SAAS,EAAOvF,OAAO,UAApD9H,IAIvB,EACD,EAGP,MAwDF,GACA,GAE2BsQ,WAAW,CAAG,i8BCjL3C,IAAM5D,GAAmB,kCAAHA,OAChBC,GAAiC,QAAyB,OAAjBD,IAqO/BT,CAAAA,EAAAA,GAAAA,EAAAA,CAAMA,CAACpF,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,GArOU8F,IAA2BD,gFAuOpC,OAAC,qBAACE,CAAmB,CAAC,UAC7CA,EAAsBD,GAAiCD,KAIpD,IAAM6D,GAGT,CACF,CAACC,EAAAA,GAAUA,CAACC,KAAK,CAAC,CAAE,CAClBzQ,KAAM,IATiE0M,WAUvEpG,KAAM,UACNuI,YAAa,4DACf,EACA,CAAC2B,EAAAA,GAAUA,CAACE,gBAAgB,CAAC,CAAE,CAC7B1Q,KAAM,8BACNsG,KAAM,uBACNuI,YACE,4FACJ,EACA,CAAC2B,EAAAA,GAAUA,CAACG,UAAU,CAAC,CAAE,CACvB3Q,KAAM,8BACNsG,KAAM,uBACNuI,YACE,4FACJ,EACA,CAAC2B,EAAAA,GAAUA,CAACI,gBAAgB,CAAC,CAAE,CAC7B5Q,KAAM,0BACNsG,KAAM,UACNuI,YACE,iHACJ,EACA,CAAC2B,EAAAA,GAAUA,CAACK,WAAW,CAAC,CAAE,CACxB7Q,KAAM,qBACNsG,KAAM,UACNuI,YACE,kGACJ,EACA,CAAC2B,EAAAA,GAAUA,CAACM,UAAU,CAAC,CAAE,CACvB9Q,KAAM,oBACNsG,KAAM,UACNuI,YAAa,wCACf,EACA,CAAC2B,EAAAA,GAAUA,CAACO,QAAQ,CAAC,CAAE,CACrB/Q,KAAM,kBACNsG,KAAM,UACNuI,YAAa,IACf,EACA,CAAC2B,EAAAA,GAAUA,CAACQ,OAAO,CAAC,CAAE,CACpBhR,KAAM,kBACNsG,KAAM,UACNuI,YAAa,IACf,CACF,EAEaoC,GAAsBnE,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,KAuClCC,GAAAA,EAAiBA,CACjBC,GAAAA,EAAiBA,CACjBkE,GAAAA,CAAsBA,EACxB,GCjUwChE,CAAAA,EAAAA,EAAAA,IDuRJJ,MCvRII,CAAUA,CAClD,CAAC1M,EAAc2M,KACb,GAAM,OAACZ,CAAK,MAAEvM,CAAI,aAAEyB,CAAW,SAAE4L,CAAO,iBAAEC,CAAe,CAAC,CAAG9M,EAGvD+M,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAAC,KAE9B2D,EAAoBzD,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAChCuD,GACA,CACElP,UAAW,CACT4L,IAHesD,KAGL,CACRpP,eAAgBJ,EAAYzB,IAAI,CAChC2B,uBAAwBF,EAAYG,QAAQ,CAC5CK,WAAYjC,CACd,CACF,EACA4N,KAAM,CAACL,CACT,GAGI6D,EAAkC1D,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAG9C2D,GAAAA,CAA6BA,CAAE,CAC/BtP,UAAW,CACTC,eAAgB,CACdH,eAAgBJ,EAAYzB,IAAI,CAChC2B,uBAAwBF,EAAYG,QAAQ,CAC5CK,WAAYjC,CACd,CACF,EACA4N,KAAM,CAACL,CACT,GAEAS,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACmD,EAAmBlD,GAAAA,EAAeA,EAC5DD,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACoD,EAAiCnD,GAAAA,EAAeA,EAE1E,GAAM,MAACnM,CAAI,CAAC,CAAGqP,EAETG,EAAavL,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACzB,OAAIjE,EAAAA,KAAAA,EAAAA,EAAMyP,MAANzP,OAAmB,CAACI,UAAAA,IAAe,SAC9B,CADwC,IAI1CJ,EAAKyP,aAAa,CACxB,CAACzP,EAAK,EAEH4E,QAAO4K,EAAAA,KAAAA,EAAAA,EAAYE,WAAW,CAAvBF,KAA6B,CAAC,EAAE,CAEvCG,QAAaH,EAAAA,KAAAA,EAAAA,EAAYG,UAAU,CACnCC,CADaJ,CACAG,EAAalB,EAAgB,CAACkB,EAAW,CAAG,KAwD/D,MACE,UAACpD,EAAAA,CAAQA,CAAAA,CACPlB,IAAKA,EACLZ,MAAOA,EACP+B,KAAMC,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAAC9M,EAAa,YAAiB,OAALzB,IACxDqN,QAASA,EACTmB,SAAUlB,EACVmB,WAAY,OAAC,MAACH,CAAI,CAAW,GAAN9N,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAT8N,eAAoB,UAACI,EAAAA,EAAIA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAACC,GAAIL,GAAQ,KAAS9N,KAC7DoO,KACE,WAAC/H,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAO2F,IAAK,EAAG3E,WAAY,YAAY,YAC5D,UAACb,MAAAA,UACC,UAACc,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,cAEb,WAAC6G,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,SAAU2F,IAAK,CAAC,YACrC,WAAClC,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAO2F,IAAK,GAAI3E,WAAY,QAAQ,YACxDpE,EACA0R,OAAAA,EAAAA,KAAAA,EAAAA,EAAY7C,WAAAA,CAAZ6C,CACC,UAACvG,EAAAA,CAAOA,CAAAA,CACNlF,QAAS,UAAC1C,MAAAA,CAAIkB,MAAO,CAAC2D,MAAO,GAAG,WAAIsJ,EAAW7C,WAAW,GAC1DtI,UAAU,eAEV,UAAClC,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,OAAOsE,MAAOC,EAAAA,EAAgB,OAEzC,QAEN,UAACuK,EAAAA,EAASA,CAAAA,UACPwC,OAAAA,EAAAA,KAAAA,EAAAA,EAAYG,UAAU,EAAtBH,EACkB,CAACA,EAAWG,UAAU,CAAC,CAExC,UAACzC,EAAAA,CAAQA,CAAAA,CAACC,OAAQ,GAAIC,QAAS,aAMzCC,MAAOA,CAzFG,SAYKC,EAXjB,GAAI+B,EAAkB9B,OAAO,EAAI,CAAC8B,EAAkBrP,IAAI,CACtD,CADwD,KACjD,UAACkN,EAAAA,CAAQA,CAAAA,CAACC,OAAQ,IAAKC,QAAS,KAGzC,IAAME,EAAakC,OAAAA,EAAAA,KAAAA,EAAAA,EAAYE,WAAW,CAAvBF,IAAwBhC,GAAQ,EAAE,CAErD,MACE,UAACC,EAAAA,CAAkBA,CAAAA,CACjBC,SAAU,CACR,CACEzE,IAAK,aACL0E,QAASL,CAAAA,OAAAA,EAAAA,CAAU,CAAC,IAAXA,KAAAA,EAAAA,EAAeM,GAAfN,MAAwB,EAC/B,UAACpJ,EAAAA,EAAOA,CAAAA,CAENsG,SAAS,MACTpE,gBAAgB,QAChBjC,QACE,UAAC1C,MAAAA,UACC,UAACoM,GAAAA,EAAgBA,CAAAA,CAACC,IAAKR,CAAU,CAAC,EAAE,CAAEpP,KAAMA,MAGhD6P,eAAgB,aAEhB,UAAC1H,EAAAA,CAAWA,CAAAA,UACV,WAACtB,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAOgB,WAAY,SAAU2E,IAAK,CAAC,YACxD,UAAC+G,GAAAA,EAAkBA,CAAAA,CAACrK,OAAQ2J,CAAU,CAAC,EAAE,CAAC3J,MAAM,GAChD,UAACsK,GAAAA,CAAWA,CAAAA,CAACC,cAAeZ,CAAU,CAAC,EAAE,CAACM,SAAS,CAAEO,aAAa,UAbjEb,CAAU,CAAC,EAAE,CAAC3M,EAAE,EAiBrB,IACN,EACA,CACEsI,IAAK,OACL0E,QAAS,UAAChJ,EAAqBA,CAACC,WAAMA,EAAAA,EAAQ,GAAfD,GACjC,EACA,CACEsE,IAAK,SACL0E,QACE,UAAC5I,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,SAAU4F,eAAgB,QAAQ,EAAGlC,QAAS,CAAC8H,KAAM,CAAC,WAC1E0C,EACC,UAACK,GAAAA,CAAYA,CAAAA,CAAYlQ,YAAaA,EAAamQ,OAAQN,GAAxCtR,GAEnB,UAACoQ,EAAAA,CAAQA,CAAAA,CAAYhL,QAAQ,IAACiL,aAAa,IAAChD,SAAS,EAAOvF,OAAO,UAApD9H,IAIvB,EACD,GAGP,KAwCF,GACA,GAEyBsQ,WAAW,CAAG,6BAEzC,IAAMuB,GAAgD,CACpD,CAACrB,EAAAA,GAAUA,CAACC,KAAK,CAAC,CAAE,eACpB,CAACD,EAAAA,GAAUA,CAACG,UAAU,CAAC,CAAE,8BACzB,CAACH,EAAAA,GAAUA,CAACE,gBAAgB,CAAC,CAAE,8BAC/B,CAACF,EAAAA,GAAUA,CAACI,gBAAgB,CAAC,CAAE,0BAC/B,CAACJ,EAAAA,GAAUA,CAACK,WAAW,CAAC,CAAE,qBAC1B,CAACL,EAAAA,GAAUA,CAACM,UAAU,CAAC,CAAE,oBACzB,CAACN,EAAAA,GAAUA,CAACO,QAAQ,CAAC,CAAE,kBACvB,CAACP,EAAAA,GAAUA,CAACQ,OAAO,CAAC,CAAE,qBACxB,ECxMatE,GAAmB,sCAAHA,YAAqD,GAEvC,OAAC,CAACoF,UAAQ,CAA8B,GACjF,MACE,WAACC,GAAAA,EAASA,CAAAA,CAACC,gBAAiBtF,GAAkBuF,MAAM,cAClD,UAACC,GAAAA,EAAUA,CAAAA,EAD+BxF,QAExC,UAACnJ,MAAAA,CAAIkB,MAAO,CAAC6H,SAAU,WAAY6F,IAAK,MAAM,WAAIL,MAEpD,UAACI,GAAAA,EAAUA,CAAAA,UAAC,SACZ,UAACA,GAAAA,EAAUA,CAAAA,UAAC,SACZ,UAACA,GAAAA,EAAUA,CAAAA,UAAC,WACZ,UAACA,GAAAA,EAAUA,CAAAA,UAAC,cACZ,UAACA,GAAAA,EAAUA,CAAAA,UAAC,eAGlB,EAAE,GAE+BjG,CAAAA,EAAAA,GAAAA,EAAAA,CAAMA,CAACpF,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,uFAEhB6F,oBCqBpB,IAAM0F,GAAmClF,CAAAA,EAAAA,EAAAA,SDrBLR,CCqBKQ,CDnB9C,CCoBA,CAAC1M,EAAyB2M,SA6EtBW,EA5EF,GAAM,OAACvB,CAAK,CAAEvM,MAAI,aAAEyB,CAAW,SAAE4L,CAAO,iBAAEC,CAAe,CAAC,CAAG9M,EAGvD+M,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAAC,KAE9BC,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAC1Bb,GACA,CACE9K,UAAW,CACT4L,MAHiBd,GAGP,CACRhL,eAAgBJ,EAAYzB,IAAI,CAChC2B,uBAAwBF,EAAYG,QAAQ,CAC5CS,aAAcrC,CAChB,CACF,EACA4N,KAAM,CAACL,EACPM,6BAA6B,CAC/B,GAGIC,EAAoCJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAGhDK,GAAAA,CAA+BA,CAAE,CACjChM,UAAW,CACTK,iBAAkB,CAChBP,eAAgBJ,EAAYzB,IAAI,CAChC2B,uBAAwBF,EAAYG,QAAQ,CAC5CS,aAAcrC,CAChB,CACF,EACA4N,KAAM,CAACL,CACT,GAEAS,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACP,EAAaQ,GAAAA,EAAeA,EACtDD,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACF,EAAmCG,GAAAA,EAAeA,EAE5E,GAAM,MAACnM,CAAI,CAAC,CAAG2L,EAETL,EAAerH,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAC3B,OAAIjE,EAAAA,KAAAA,EAAAA,EAAMoM,MAANpM,SAAqB,CAACI,UAAAA,IAAe,WAChC,CAD4C,IAI9CJ,EAAKoM,eAAe,CAC1B,CAACpM,EAAK,EAWHqM,QAAgBf,EAAAA,KAAAA,EAAAA,EAAce,aAAa,CAE3CkE,EAAgBtM,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC5B,GAAI,CAACoI,EACH,MAAO,CAAC/I,MADU,IACA,CAAI,EAGxB,GAAM,CAACkN,oBAAkB,mBAAEC,CAAiB,QAAE9M,CAAM,CAAC,CAAG0I,SACxD,IAAezI,EAAAA,GAAiBA,CAACC,OAAO,EAAK4M,EAGzC9M,IAAWC,EAAAA,GAAiBA,CAACE,OAAO,EAAK0M,EAAD,CAGpClN,UAAU,CAAK,EAFd,CAACA,GADuD,OAC7C,EAAMjD,QAAS,mDAAmD,EAH7E,CAACiD,UAAU,EAAMjD,QAAS,kDAAkD,CAMvF,EAAG,CAACgM,EAAc,EAEZzH,EAAO0G,QAAAA,KAAAA,EAAAA,EAAce,QAAdf,KAA2B,CAACgB,KAAK,CAAC,EAAE,CAC3CoE,EAAUpF,OAAAA,EAAAA,KAAAA,EAAAA,EAAcqF,YAAAA,EAAdrF,CAA8B,CAACqF,aAAcrF,EAAaqF,YAAY,EAAE,CAAG,KACrFC,EACJ5E,CAAAA,OAAAA,EAAAA,EAAkChM,IAAAA,EAAlCgM,KAAAA,EAAAA,EAAwCI,GAAxCJ,YAAuD,CAAC5L,UAAAA,IAAe,WACnE4L,EAAkChM,IAAI,CAACoM,eAAe,CAACwE,cAAc,CACrE,KAEN,MACE,UAACnP,MAAAA,CAAI4J,IAAKA,EAAKwF,aAAYpG,WACzB,WAACqG,GAAiBA,CAACjK,OAAO,MAARiK,aAChB,UAACC,GAAAA,EAAOA,CAAAA,UACN,UAAC1H,EAAAA,CAAOA,CAAAA,CACN2H,QAAST,EAAcjN,QAAQ,CAC/Ba,QAASoM,EAAclQ,OAAO,EAAI,GAClCoE,UAAU,eAEV,UAAC6J,EAAAA,CAAQA,CAAAA,CAAChL,SAAUiN,EAAcjN,QAAQ,CAAEiI,QAASA,EAAS0F,SA1CvD,CA0CiEA,GAzChF,GAAIzF,GAAmB0F,EAAEC,MAAM,YAAYC,iBAAkB,CAC3D,GAAM,SAAC7F,CAAO,CAAC,CAAG2F,EAAEC,MAAM,CAG1B3F,EAAgB,SAACD,EAAS8F,SADxBH,EAAEI,WAAW,YAAYC,YAAcL,EAAEI,WAAW,CAACE,gBAAgB,CAAC,QACtC,EACpC,CACF,QAsCM,UAACT,GAAAA,EAAOA,CAAAA,UACN,UAAChM,EAAAA,CAAGA,CAAAA,CACFiC,KAAM,CACJ1F,UAAW,MACX2F,IAAK,EACL3E,WAAY,aACZ4E,eAAgB,eAClB,WAEA,WAACnC,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAACyK,KAAM,EAAGxK,IAAK,CAAC,YACxBqE,EACC,iCACE,UAAC8C,GAAAA,CAAcA,CAAAA,CAAYzO,YAAaA,EAAa0O,SAAU/C,GAA1CpN,GACpBkM,GACCkB,EAAae,aAAa,CAAC1I,MAAM,CACjC2H,CAFWlB,CAEEiC,aAAa,CAACqF,YAAY,KAI3C,UAACjQ,MAAAA,CAAIkB,MAAO,CAAC2D,MAAO,EAAE,IAExB,UAACsG,EAAAA,EAAIA,CAAAA,CAACC,GAAIJ,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAAC9M,EAAa,cAAmB,OAALzB,aAC5D,UAACyT,GAAAA,CAAcA,CAAAA,CAACrN,KAAMpG,aAK9B,UAAC6S,GAAAA,EAAOA,CAAAA,UACLzF,EACC,WAACvG,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,SAAU2F,IAAK,CAAC,YACrC,UAACuB,GAAOA,CACNC,WADMD,EACQ8C,EAAa7C,YAAY,CACvCC,kBAAmB4C,EAAa5C,iBAAiB,GAElD4C,EAAae,aAAa,CAACuF,QAAQ,EACpCtG,EAAae,aAAa,CAAC1I,MAAM,GAAKC,EAAAA,GAAiBA,CAACC,OAAO,CAC7D,UAACsB,EAAAA,EAAOA,CAAAA,UACN,WAAC1D,MAAAA,CACCkB,MAAO,CACLkP,SAAU,SACVC,WAAY,SACZC,SAAU,OACVC,aAAc,UAChB,YACD,iBAEC,UAACC,GAAAA,CAAgBA,CAAAA,CAEf5M,UAAWiG,EAAae,aAAa,CAACuF,QAAQ,CAACvM,SAAS,CACxDkE,SAAU+B,EAAa5C,iBAAiB,CACxCwJ,WAAY,CAACC,aAAa,EAAOC,cAAc,CAAI,SAIvD,QAGN,UAACC,GAAAA,EAAaA,CAAAA,CAAC1G,YAAaA,MAGhC,UAACoF,GAAAA,EAAOA,CAAAA,UACN,UAACtP,MAAAA,UACC,UAAC6Q,GAAAA,CAAoBA,CAAAA,CACnB3S,YAAaA,EACb4S,eAAe,WACf7B,QAASA,EACTE,eAAgBA,QAItB,UAACG,GAAAA,EAAOA,CAAAA,UACLnM,EACC,UAACnD,MAAAA,UACC,UAAC+Q,GAAAA,CAAaA,CAAAA,CAAC5N,KAAMA,EAAM6N,eAAe,WAG5C,UAACJ,GAAAA,EAAaA,CAAAA,CAAC1G,YAAaA,MAGhC,UAACoF,GAAAA,EAAOA,CAAAA,UACLzF,OAAAA,EAAAA,KAAAA,EAAAA,EAAce,aAAAA,CAAdf,EAA+BA,SAAAA,KAAAA,EAAAA,EAAce,OAAdf,MAA2B,CAACkC,IAAI,CAAC,IAC/D,UAACkF,GAAAA,CAAcA,CAAAA,CACb5E,IAAKxC,EAAae,aAAa,CAACmB,IAAI,CAAC,EAAE,CACvCtP,KAAMA,EACNyU,YAAY,EACZC,SAAS,IACTC,YAAa,KAGf,UAACR,GAAAA,EAAaA,CAAAA,CAAC1G,YAAaA,UAMxC,GACA,GCjM4CP,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CACtD,CAAC1M,EAAc2M,SA8EXiE,EA7EF,GAAM,CAAC7E,OAAK,MAAEvM,CAAI,aAAEyB,CAAW,SAAE4L,CAAO,iBAAEC,CAAe,CAAC,CAAG9M,EAGvD+M,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAAC,KAE9B2D,EAAoBzD,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAChCuD,GACA,CACElP,UAAW,CACT4L,IAHesD,KAGL,CACRpP,eAAgBJ,EAAYzB,IAAI,CAChC2B,uBAAwBF,EAAYG,QAAQ,CAC5CK,WAAYjC,CACd,CACF,EACA4N,KAAM,CAACL,CACT,GAGI6D,EAAkC1D,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAG9C2D,GAAAA,CAA6BA,CAAE,CAC/BtP,UAAW,CACTC,eAAgB,CACdH,eAAgBJ,EAAYzB,IAAI,CAChC2B,uBAAwBF,EAAYG,QAAQ,CAC5CK,WAAYjC,CACd,CACF,EACA4N,KAAM,CAACL,CACT,GAEAS,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACmD,EAAmBlD,GAAAA,EAAeA,EAC5DD,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACoD,EAAiCnD,GAAAA,EAAeA,EAE1E,GAAM,MAACnM,CAAI,CAAC,CAAGqP,EAETG,EAAavL,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACzB,SAAIjE,KAAAA,EAAAA,CAAAA,CAAMyP,aAAa,CAACrP,UAAAA,IAAe,SAC9B,CADwC,IAI1CJ,EAAKyP,aAAa,CACxB,CAACzP,EAAK,EAWH0P,QAAcF,EAAAA,KAAAA,EAAAA,EAAYE,WAAW,CAAvBF,EAEEvL,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC5B,GAAI,CAACyL,EACH,MAAO,CAACpM,IADQ,MACE,CAAI,EAGxB,GAAM,oBAACkN,CAAkB,mBAAEC,CAAiB,QAAE9M,CAAM,CAAC,CAAG+L,SACxD,IAAe9L,EAAAA,GAAiBA,CAACC,OAAO,EAAK4M,EAGzC9M,IAAWC,EAAAA,GAAiBA,CAACE,OAH+B,EAGnB0M,EAAD,CAGpClN,UAAU,CAAK,EAFd,CAACA,GADuD,OAC7C,EAAMjD,QAAS,iDAAiD,EAH3E,CAACiD,UAAU,EAAMjD,QAAS,gDAAgD,CAMrF,EAAG,CAACqP,EAAY,EAEV9K,QAAO4K,EAAAA,KAAAA,EAAAA,EAAYE,WAAW,CAACpD,KAAK,CAAC,EAAE,CAEvCqD,QAAaH,EAAAA,KAAAA,EAAAA,EAAYG,UAAU,CACnCC,CADaJ,CACAG,EAAalB,EAAgB,CAACkB,EAAW,CAAG,KACzDmD,EACJxD,CAAAA,MAAAA,GAAAA,EAAgCtP,IAAAA,EAAhCsP,KAAAA,EAAAA,EAAsCG,GAAtCH,UAAmD,CAAClP,UAAAA,IAAe,SAC/DkP,EAAgCtP,IAAI,CAACyP,aAAa,CAACmB,cAAc,CACjE,KAEN,MACE,UAACnP,MAAAA,CAAI4J,IAAKA,EAAKwF,aAAYpG,WACzB,WAACqG,GAAiBA,CAACjK,OAAO,MAARiK,aAChB,UAACC,GAAAA,EAAOA,CAAAA,UACN,UAAC1H,EAAAA,CAAOA,CAAAA,CACN2H,QAAST,EAAcjN,QAAQ,CAC/Ba,QAASoM,EAAclQ,OAAO,EAAI,GAClCoE,UAAU,eAEV,UAAC6J,EAAAA,CAAQA,CAAAA,CAAChL,SAAUiN,EAAcjN,QAAQ,CAAEiI,QAASA,EAAS0F,SA5CtDC,CA4CgED,GA3ChF,GAAIzF,GAAmB0F,EAAEC,MAAM,YAAYC,iBAAkB,CAC3D,GAAM,SAAC7F,CAAO,CAAC,CAAG2F,EAAEC,MAAM,CAG1B3F,EAAgB,SAACD,EAAS8F,SADxBH,EAAEI,WAAW,YAAYC,YAAcL,EAAEI,WAAW,CAACE,gBAAgB,CAAC,QACtC,EACpC,CACF,QAwCM,UAACT,GAAAA,EAAOA,CAAAA,UACN,UAAChM,EAAAA,CAAGA,CAAAA,CACFiC,KAAM,CACJ1F,UAAW,MACX2F,IAAK,EACL3E,WAAY,aACZ4E,eAAgB,eAClB,WAEA,WAACnC,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAACyK,KAAM,EAAGxK,IAAK,CAAC,YAExBuI,EACC,UAACK,GAAAA,CAAYA,CAAAA,CAAYlQ,YAAaA,EAAamQ,OAAQN,GAAxCtR,GAEnB,UAACuD,MAAAA,CAAIkB,MAAO,CAAC2D,MAAO,EAAE,IAExB,UAACsG,EAAAA,EAAIA,CAAAA,CAACC,GAAIJ,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAAC9M,EAAa,YAAiB,OAALzB,aAC1D,UAACyT,GAAAA,CAAcA,CAAAA,CAACrN,KAAMpG,aAK9B,UAAC6S,GAAAA,EAAOA,CAAAA,UACN,UAACtP,MAAAA,UACEmO,EACCA,EAAW7C,WAAW,CACpB,UAAC1D,EAAAA,CAAOA,CAAAA,CACNlF,QAAS,UAAC1C,MAAAA,CAAIkB,MAAO,CAACoP,SAAU,OAAO,WAAInC,EAAW7C,WAAW,GACjEtI,UAAU,eAEV,UAAC6E,GAAAA,CAAGA,CAAAA,CAAC9E,KAAMoL,EAAWpL,IAAI,UAAGoL,EAAW1R,IAAI,KAG9C,UAACoL,GAAAA,CAAGA,CAAAA,CAAC9E,KAAMoL,EAAWpL,IAAI,UAAGoL,EAAW1R,IAAI,GAE5C,SAGR,UAAC6S,GAAAA,EAAOA,CAAAA,UACLvB,EACC,UAAC/N,MAAAA,UACC,UAAC6Q,GAAAA,CAAoBA,CAAAA,CACnB5B,QAASlB,EAAWkB,OAAO,EAAI,KAC/B/Q,YAAaA,EACbiR,eAAgBkC,EAChBP,eAAgB/C,EAAWG,UAAU,KAIzC,UAAC0C,GAAAA,EAAaA,CAAAA,CAAC1G,YAAa2D,MAGhC,UAACyB,GAAAA,EAAOA,CAAAA,UACLnM,EACC,UAACnD,MAAAA,UACC,UAAC+Q,GAAAA,CAAaA,CAAAA,CAAC5N,KAAMA,EAAM6N,eAAe,WAG5C,UAACJ,GAAAA,EAAaA,CAAAA,CAAC1G,YAAa0D,MAGhC,UAAC0B,GAAAA,EAAOA,CAAAA,UACLvB,OAAAA,EAAAA,KAAAA,EAAAA,EAAYE,WAAAA,CAAZF,SAA2BA,EAAAA,KAAAA,EAAAA,EAAYE,WAAW,CAAvBF,IAA4B,CAAC,IACvD,UAACkD,GAAAA,CAAcA,CAAAA,CACb5E,IAAK0B,EAAWE,WAAW,CAAClC,IAAI,CAAC,EAAE,CACnCtP,KAAMA,EACNyU,YAAY,EACZC,SAAS,IACTC,aAAa,IAGf,UAACR,GAAAA,EAAaA,CAAAA,CAAC1G,YAAa0D,UAMxC,GACA,uCC/MK,IAAM0D,GAAoB,CAACpT,EAA0BqD,IACnD,GAA4CA,MAAAA,CAAzCgQ,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACrT,GAAa,KAAkB,OAAfqD,8BC6B9C,IAAMiQ,GAAmB,OAAC,OAC/BC,CAAK,gBACLC,CAAc,aACdC,CAAW,sBACXC,CAAoB,CACd,GACA,sBAACC,CAAoB,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,CAAeA,GACxCC,EAAYC,EAAAA,MAAY,CAAwB,MAChDC,EAAUD,EAAAA,OAAa,CAC3B,IAAMP,EAAMrQ,GAAG,CAAC,OAAC,aAAClD,CAAW,CAAC,SAAKqT,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACrT,KAC5D,CAACuT,EAAM,EAEH,cAACS,CAAY,UAAEjH,CAAQ,aAAEkH,CAAW,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,CAAqBA,CACjEC,GAAAA,CAAsBA,CACtBJ,GAGIK,EAAuBN,EAAAA,OAAa,CAAC,KACzC,IAAMO,EAAkB,EAAE,CA0B1B,OAzBAd,EAAMe,OAAO,CAAC,OAAC,aAACtU,CAAW,WAAEuU,CAAS,SAAEC,CAAO,CAAC,GAC9CH,EAAK1J,IAAI,CAAC,CACRrM,KAAM,qBACN0B,EACAyU,cAAeF,EAAUtV,MAAM,CAC/ByV,YAAaF,EAAQvV,MAAM,GAE7B,IAAM0V,EAAUtB,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACrT,GAEzC,GAAIgU,EAAaY,QAAQ,CAACD,GAAU,CAClC,IAAME,EAAa,IAAIC,IAAIN,GACrBO,EAAe,IAAID,IAAIP,GACL,IAAIC,KAAYD,EAAU,CAACS,IAAI,CAAC,CAACC,EAAGC,IAC1DC,EAAAA,EAAeA,CAACC,OAAO,CAACH,EAAGC,IAGbZ,OAAO,CAAC,IAClBO,EAAWQ,GAAG,CAAC9W,GACjB8V,EAAK1J,EADmB,EACf,CAAC,CAACrM,KAAM,qBAAU0B,EAAamQ,OAAQ5R,CAAI,GAC3CwW,EAAaM,GAAG,CAAC9W,IAC1B8V,EAAK1J,CAD4B,GACxB,CAAC,CAACrM,KAAM,WAAY0B,cAAa0O,SAAUnQ,CAAI,EAE5D,EACF,CACF,GACO8V,CACT,EAAG,CAACd,EAAOS,EAAa,EAElBsB,EAAqBC,CAAAA,EAAAA,GAAAA,CAAAA,CAAsBA,CAAChC,EAAMrQ,GAAG,CAAC,OAAC,CAAClD,aAAW,CAAC,UAAKA,EAAYzB,IAAI,IAEzFiX,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAcA,CAAC,CACpCzW,MAAOoV,EAAUnV,MAAM,CACvByW,iBAAkB,IAAM7B,EAAU8B,OAAO,CACzCC,aAAeC,IACb,IAAMC,EAAM1B,CAAS,CAACyB,EAAG,CACzB,MAAOC,OAAAA,EAAAA,KAAAA,EAAAA,EAAKxX,IAAAA,CAALwX,GAAc,SAAW,GAAK,EACvC,EACAC,SAAU,EACZ,GAEMC,EAAcR,EAAeS,YAAY,GACzCC,EAAQV,EAAeW,eAAe,GAE5C,MACE,UAACrU,MAAAA,CAAIkB,MAAO,CAACkP,SAAU,QAAQ,WAC7B,WAACzI,GAAAA,EAASA,CAAAA,CAACiC,IAAKmI,YACbF,EAAuB,KAAO,UAACyC,GAA2BA,CAAC/F,SAAUmD,IACtE,UAD2D4C,GAC1DC,EAAKA,CAAAA,CAACC,aAAcN,WAClBE,EAAMhT,GAAG,CAAC,OAAC,OAAC4H,CAAK,KAAExB,CAAG,MAAEiN,CAAI,OAAEzW,CAAK,CAAC,GAE7BgW,EAAe1B,CAAS,CAACtJ,EAAM,CAE/BxM,EAAOwX,EAAKxX,IAAI,CACtB,GAAa,UAAU,CAAnBA,EACF,MACE,UAACkY,EAAAA,EAAGA,CAAAA,CAAC/I,QAAS8I,EAAME,OAAQ3W,WAC1B,UAAC4W,GAAAA,EAAcA,CAAAA,CACb1W,YAAa8V,EAAI9V,WAAW,CAC5B0L,IAAK8J,EAAemB,cAAc,CAClC7L,MAAOA,EACPiC,SAAUA,EACVkH,YAAaA,EACb2C,SAAU5C,EAAaY,QAAQ,CAACvB,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACyC,EAAI9V,WAAW,GACxE6W,aAAcvB,EAAmBD,GAAG,CAACS,EAAI9V,WAAW,CAACzB,IAAI,EACzDuY,aAAc,4BATsBxN,GAe5C,GAAa,WAAThL,EAAmB,CACrB,IAAMyY,EAAY3D,GAAkB0C,EAAI9V,WAAW,CAAhBoT,EAAsBjD,MAAM,SAC/D,EAEI,UAACqG,EAAAA,EAAGA,CAAAA,CAAC/I,IAFiB,IAER8I,EAAME,OAAQ3W,WAC1B,UAACkX,GAA0BA,CAEzBlM,MAAOA,EACPY,IAAK8J,EAAemB,QAHKK,MAGS,CAClCzY,KAAMuX,EAAI3F,MAAM,CAChBvE,QAAS6H,EAAY4B,GAAG,CAAC0B,GACzBlL,gBAAiB6H,EAAqBqD,GACtC/W,YAAa8V,EAAI9V,WAAW,EANvBsJ,IAF+BA,GAe1C,UAACkN,EAAAA,EAAGA,CAAAA,CAAC/I,QAAS8I,EAAME,OAAQ3W,WAC1B,UAACmX,GAA8BA,CAC7BnM,MAAOA,EACPY,IAAK8J,EAAemB,YAFSM,EAEK,CAClC1Y,KAAMuX,EAAI3F,MAAM,CAChBvE,QAAS6H,EAAY4B,GAAG,CAAC0B,GACzBlL,gBAAiB6H,EAAqBqD,GACtC/W,YAAa8V,EAAI9V,WAAW,IAPQsJ,EAW5C,CAEA,GAAa,aAAThL,EAAqB,CACvB,IAAM4Y,EAAc9D,GAAkB0C,EAAI9V,WAAW,CAAhBoT,EAAsB1E,QAAQ,SAEnE,EAEI,UAAC8H,EAAAA,EAAGA,CAAAA,CAAC/I,IAFiB,IAER8I,EAAME,OAAQ3W,WAC1B,UAACqX,GAA4BA,CAE3BrM,MAAOA,EACPY,IAAK8J,EAAemB,UAHOQ,IAGO,CAClC5Y,KAAMuX,EAAIpH,QAAQ,CAClB9C,QAAS6H,EAAY4B,GAAG,CAAC6B,GACzBrL,gBAAiB6H,EAAqBwD,GACtClX,YAAa8V,EAAI9V,WAAW,EANvBsJ,IAF+BA,GAe1C,UAACkN,EAAAA,EAAGA,CAAAA,CAAC/I,QAAS8I,EAAME,OAAQ3W,WAC1B,UAAC6Q,GAAgCA,CAE/B7F,MAAOA,EACPY,IAAK8J,EAAemB,cAHWhG,CAI/BpS,KAAMuX,EAAIpH,QAAQ,CAClB9C,QAAS6H,EAAY4B,GAAG,CAAC6B,GACzBrL,gBAAiB6H,EAAqBwD,GACtClX,YAAa8V,EAAI9V,WAAW,EANvBsJ,IAF+BA,EAY5C,CAEA,MAAO,UAACxH,MAAAA,CAAAA,EAASwH,EACnB,SAKV,EAAE,oGCpMK,IAAM8N,GAAqC,GAI9C,EAAkBvG,kBAAkB,EAClC9P,EAAiBiD,MAAM,GAAKC,EAAAA,GAAiBA,CAACE,OAAO,EACtDpD,EAAiB+P,iBAAiB,EAAI/P,EAAiBiD,MAAM,GAAKC,EAAAA,GAAiBA,CAACC,OAAO,iBCmBzF,IAAMmT,GAAuB,KAClCC,CAAAA,EAAAA,GAAAA,EAAAA,CAAgBA,GAChBC,CAAAA,EAAAA,GAAAA,CAAAA,CAAgBA,CAAC,cAEjB,IAAMC,EAAkCC,CAAAA,EAAAA,GAAAA,CAAAA,CAA4BA,GAE9D,aAAC3Y,CAAW,aAAE4Y,CAAW,CAAE9J,QAAS+J,CAAgB,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,CAAcA,GAEtE,CAACC,EAAWC,EAAa,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,CAAsBA,CAAS,CAC/DC,SAAU,YACVC,SAAU,CAACJ,UAAW,EAAE,EACxBK,SAAU,MACZ,GAEMC,EAAW7T,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAChB8T,CAAAA,EAAAA,GAAAA,CAAAA,CAAgCA,CAACtZ,EAAa+Y,GACpD,CAAC/Y,EAAa+Y,EAAU,EAErBQ,EAAkB/T,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACvBoT,EACJY,MAAM,CAAC,GACCC,MAAMC,IAAI,CAACL,GAAUM,IAAI,CAC9B,GACE1Y,EAAW2Y,IAAI,CAACna,IAAI,GAAKoa,EAAO3Y,WAAW,CAACzB,IAAI,EAChDwB,EAAW2Y,IAAI,CAACvY,QAAQ,GAAKwY,EAAO3Y,WAAW,CAACG,QAAQ,GAG7D+C,GAAG,CAAC,GAAa,mBACbyV,GAAAA,CACHpE,UAAWoE,EAAOpE,SAAS,CAAC+D,MAAM,CAAC,GAC1BH,EAAS9C,GAAG,CAAC3G,IAEtB8F,QAASmE,EAAOnE,OAAO,CAAC8D,MAAM,CAAC,GACtBH,EAAS9C,GAAG,CAAClF,OAGvBmI,MAAM,CAAC,GAAY,CAAC,CAACK,EAAOpE,SAAS,CAACtV,MAAM,EAAI,CAAC,CAAC0Z,EAAOnE,OAAO,CAACvV,MAAM,EACzE,CAACyY,EAAaS,EAAS,EAIpBS,EAA6BtU,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAClC+T,EACJnV,GAAG,CAAC,OAAC,CAAClD,aAAW,WAAEuU,CAAS,SAAEC,CAAO,CAAC,GACrC,MAAO,IACFA,EACA8D,MAAM,CAAC,OAAC,aAACvI,CAAW,CAAC,UAAKqH,GAAmCrH,KAC7D7M,GAAG,CAAC,OAAC,MAAC3E,CAAI,QADkD6Y,KAChDrH,CAAW,CAAC,SAAM,aAC7B/P,OACAzB,EACAD,KAAM,SACNyC,iBAAkBgP,CACpB,OACCwE,EACA+D,MAAM,CAAC,OAAC,eAAC5L,CAAa,CAAC,UAAK0K,GAAmC1K,KAC/DxJ,GAAG,CAAC,OAAC,MAAC3E,CAAI,QADoD6Y,OAClD1K,CAAa,CAAC,SAAM,aAC/B1M,OACAzB,EACAD,KAAM,WACNyC,iBAAkB2L,CACpB,IACH,GAEF2H,IAAI,GACN,CAACgE,EAAgB,EAIdQ,EAAgCvU,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACrCsU,EAA2B1V,GAAG,CAAC,OAAC,aAAClD,CAAW,MAAEzB,CAAI,CAAC,UACxD6U,GAAkBpT,EAAazB,KAEhC,CAACqa,EAA2B,EAEzB,CAAC,CAJcxF,WAIDK,CAAW,CAAC,CAAE,iBAACqF,CAAe,aAAE7E,CAAW,CAAC,CAAC,CAAG8E,CAAAA,EAAAA,GAAAA,CAAAA,CAAmBA,CACrFF,GAIIG,EAA2B1U,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACvC,IAAM2U,EAAe,IAAInE,IACvBuD,EACGnV,GAAG,CAAC,OAAC,CAAClD,aAAW,WAAEuU,CAAS,SAAEC,CAAO,CAAC,GACrC,MAAO,IAAID,KAAcC,EAAQ,CAACtR,GAAG,CAAC,OAAC,MAAC3E,CAAI,CAAC,UAAK6U,GAAkBpT,EAAazB,IACnF,GACC8V,IAAI,CAFgEjB,GAIzE,OAAOyF,EAA8BP,MAAM,CAAC,GAASW,EAAa5D,GAAG,CAAC/L,GACxE,EAAG,CAACuP,EAA+BR,EAAgB,EAI7Ca,EAAqB5U,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACjC,IAAM6U,EAAsB,IAAIrE,IAC9BkE,EAAyBV,MAAM,CAAC,GAAiB7E,EAAY4B,GAAG,CAAC/L,KAEnE,OAAOsP,EAA2BN,MAAM,CAAC,OAAC,aAACtY,CAAW,MAAEzB,CAAI,CAAC,GAC3D,OAAO4a,EAAoB9D,GAAG,CAACjC,GAAkBpT,EAAazB,GAChE,EACF,EAAG,CAACya,EAA0BJ,EAA4BnF,EAAY,EAEhE2F,EAAoCP,EAA8B5Z,MAAM,CAAG,EAC3Eoa,EAAeH,EAAmBja,MAAM,CACxCqa,EAAwBN,EAAyB/Z,MAAM,CAAG,EAE1DsU,EAAQjP,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACb+T,EAAgBnV,GAAG,CAAC,GAAa,EACtClD,IADsC,QACzB2Y,EAAO3Y,WAAW,CAC/BuU,UAAWoE,EAAOpE,SAAS,CAACrR,GAAG,CAAC,GAAcwL,EAASnQ,IAAI,EAC3DiW,QAASmE,EAAOnE,OAAO,CAACtR,GAAG,CAAC,GAAYiN,EAAO5R,IAAI,EACrD,GACC,CAAC8Z,EAAgB,EAwEpB,MACE,WAACjT,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,QAAQ,EAAGqB,MAAO,CAACuW,OAAQ,OAAQrH,SAAU,QAAQ,YAC1E,UAACsH,EAAAA,CAAUA,CAAAA,CAAClY,MAAO,UAACmY,EAAAA,EAASA,CAAAA,UAAC,iBACO,mBAApCjC,EACC,UAACpS,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACE,WAAY,EAAE,EAAG2B,OAAO,kBACrC,UAACwS,EAAAA,CAAcA,CAAAA,CAACC,IAAI,4BAEpB,KACJ,WAACvU,EAAAA,CAAGA,CAAAA,CACFC,QAAS,CAACE,WAAY,GAAID,SAAU,EAAE,EACtC+B,KAAM,CACJ1F,UAAW,MACXgB,WAAY,SACZ4E,eAAgB,gBAChBD,IAAK,GACLwK,KAAM,CACR,YAEA,UAAC1M,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAACyK,KAAM,CAAC,WACjB,UAAC8H,GAAAA,CAAwBA,CAAAA,CAAC1D,MAAOpX,EAAaiD,MAAO8V,EAAWvG,SAAUwG,MAE5E,UAACpO,EAAAA,CAAOA,CAAAA,CACNlF,QAAQ,8DACR6M,QAASiI,GAAyB,CAACF,EACnCtU,UAAU,UACV+U,2BAA2B,aAE3B,UAACC,EAAwBA,CAAChb,YAAaoa,SAhG7C,EAEI,UAAC9T,EAAAA,CAAGA,CAAAA,CAACiC,CAFa,IAEP,CAAC1F,UAAW,MAAO4F,eAAgB,QAAQ,EAAGlC,QAAS,CAACqL,IAAK,EAAE,WACxE,UAACqJ,EAAAA,CAAeA,CAAAA,CAACrW,MAAM,2BAKE,GAAG,CAA9B2U,EAAgBpZ,MAAM,CACxB,EAEI,SAFW,CAEVmG,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACqL,IAAK,EAAE,WACpB,UAACsJ,EAAAA,CAAaA,CAAAA,CACZnV,KAAK,SACLvD,MAAM,0BACN8L,YACE,WAACtL,MAAAA,WAAI,2BACqB,UAACsB,SAAAA,UAAQyU,IAAmB,yCAU9D,UAACzS,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACqL,IAAK,EAAE,WACpB,UAACsJ,EAAAA,CAAaA,CAAAA,CACZnV,KAAK,SACLvD,MAAM,iBACN8L,YACE,WAAC6M,EAAAA,EAAKA,CAAAA,WAAC,+CACwC,IAC7C,UAAChF,IAAAA,CACCpI,KAAK,8CACL2E,OAAO,SACP0I,IAAI,sBAEJ,WAAC9U,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAO2F,IAAK,EAAG3E,WAAY,QAAQ,YAAG,+BAE3D,UAACC,EAAAA,EAAIA,CAAAA,CAACrE,KAAK,cAAcsE,MAAOC,EAAAA,EAAkB,iBAWhE,UAACwQ,GAAgBA,CACfE,YADeF,GAEb8F,EACE,UAACe,GAAAA,CAAWA,CAAAA,CACVd,aAAcA,EACde,WAAYpB,EAAyB/Z,MAAM,CAC3CgV,YAAaA,SAEb9M,EAENoM,MAAOA,EACPE,YAAaA,EACbC,qBAAsBoF,MAsC9B,EAAE,GAGazB,cCtPf,MDsPmCA,EAAC,CCtPpC,EAAkB,oMCSX,IAAMqC,EAAiB,IAC5B,GAAM,KAACC,CAAG,CAAC,CAAG5a,EAERsb,EAAkBC,CAAAA,EAAAA,EAAAA,EAAAA,CAA8BA,GAChD9C,EAAkCC,CAAAA,EAAAA,EAAAA,CAAAA,CAA4BA,GAEpE,MACE,WAAC8C,EAAAA,EAAIA,CAAAA,CAACC,cAAeb,YACnB,UAACc,EAAAA,CAAOA,CAAAA,CAACzZ,GAAG,wBAAwBM,MAAM,wBAAwB4L,GAAG,gBAChC,mBAApCsK,EACC,UAACiD,EAAAA,CAAOA,CAAAA,CACNzZ,GAAG,aACHM,MACE,WAAC8D,EAAAA,CAAGA,CAAAA,CAACiC,KAAM,CAAC1F,UAAW,MAAO2F,IAAK,EAAG3E,WAAY,QAAQ,YACxD,UAACb,MAAAA,UAAI,qBACJuY,EAAgBzM,OAAO,CACtB,UAAC9G,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAEjB,UAACjF,MAAAA,CACCkB,MAAO,CACL2D,MAAO,OACP4S,OAAQ,OACRmB,aAAc,MACdC,iBAC6B,IAA3BN,EAAgBO,MAAM,CAAa9X,EAAAA,EAAiB,GAAKA,EAAAA,EAAiB,EAC9E,OAKRoK,GAAG,yBAEH,OAGV,EAAE","sources":["webpack://_N_E/../ui-core/src/instigation/useInstigationStateReducer.tsx","webpack://_N_E/../ui-core/src/automation/AutomationStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/instigation/instigationStateSummary.tsx","webpack://_N_E/../ui-core/src/automation/AutomationBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/automation/LatestTickHoverButton.tsx","webpack://_N_E/../ui-core/src/schedules/hourOffsetFromUTC.tsx","webpack://_N_E/../ui-core/src/schedules/CronTag.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulesTable.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedScheduleRow.tsx","webpack://_N_E/../ui-core/src/automation/ObserveAutomationScheduleRow.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedSensorRow.tsx","webpack://_N_E/../ui-core/src/automation/ObserveAutomationSensorRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationScheduleRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationSensorRow.tsx","webpack://_N_E/../ui-core/src/sensors/makeSensorKey.tsx","webpack://_N_E/../ui-core/src/automation/AutomationsTable.tsx","webpack://_N_E/../ui-core/src/instigation/filterPermissionedInstigationState.tsx","webpack://_N_E/../ui-core/src/automation/MergedAutomationRoot.tsx","webpack://_N_E/../ui-core/src/automation/css/LatestTickHoverButton.module.css?0526","webpack://_N_E/../ui-core/src/automation/AutomationTabs.tsx"],"sourcesContent":["import {useReducer} from 'react';\n\nexport type OpenWithIntent = 'not-open' | 'start' | 'stop';\n\ntype CompletionState = {completed: number; errors: {[id: string]: string}};\n\ntype DialogState = {\n  step: 'initial' | 'updating' | 'completed';\n  completion: CompletionState;\n};\n\ntype DialogAction =\n  | {type: 'reset'}\n  | {type: 'start'}\n  | {type: 'update-success'}\n  | {type: 'update-error'; name: string; error: string}\n  | {type: 'complete'};\n\nconst initialState: DialogState = {\n  step: 'initial',\n  completion: {completed: 0, errors: {}},\n};\n\nconst reducer = (prevState: DialogState, action: DialogAction): DialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'start':\n      return {...prevState, step: 'updating'};\n    case 'update-success': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {...completion, completed: completion.completed + 1},\n      };\n    }\n    case 'update-error': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {\n          ...completion,\n          completed: completion.completed + 1,\n          errors: {...completion.errors, [action.name]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const useInstigationStateReducer = () => useReducer(reducer, initialState);\n","// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {useMutation} from '../apollo-client';\nimport {assertUnreachable} from '../app/Util';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from '../schedules/ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {RepoAddress} from '../workspace/types';\n\nexport interface AutomationInfo {\n  repoAddress: RepoAddress;\n  name: string;\n  type: 'sensor' | 'schedule';\n  instigationState: BasicInstigationStateFragment;\n}\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  automations: AutomationInfo[];\n}\n\nexport const AutomationStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, automations} = props;\n  const count = automations.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (automation: AutomationInfo) => {\n    const {repoAddress, name, type} = automation;\n    const repoValues = {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    };\n\n    switch (type) {\n      case 'sensor': {\n        const {data} = await startSensor({\n          variables: {sensorSelector: {...repoValues, sensorName: name}},\n        });\n\n        switch (data?.startSensor.__typename) {\n          case 'Sensor':\n            dispatch({type: 'update-success'});\n            return;\n          case 'SensorNotFoundError':\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.startSensor.message,\n            });\n        }\n\n        break;\n      }\n\n      case 'schedule': {\n        const {data} = await startSchedule({\n          variables: {scheduleSelector: {...repoValues, scheduleName: name}},\n        });\n\n        switch (data?.startSchedule.__typename) {\n          case 'ScheduleStateResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.startSchedule.message,\n            });\n        }\n\n        break;\n      }\n\n      default:\n        assertUnreachable(type);\n    }\n  };\n\n  const stop = async (automation: AutomationInfo) => {\n    const {name, type, instigationState} = automation;\n    const variables = {id: instigationState.id};\n\n    switch (type) {\n      case 'sensor': {\n        const {data} = await stopSensor({variables});\n        switch (data?.stopSensor.__typename) {\n          case 'StopSensorMutationResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.stopSensor.message,\n            });\n        }\n        break;\n      }\n\n      case 'schedule': {\n        const {data} = await stopSchedule({variables});\n        switch (data?.stopRunningSchedule.__typename) {\n          case 'ScheduleStateResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.stopRunningSchedule.message,\n            });\n        }\n        break;\n      }\n\n      default:\n        assertUnreachable(type);\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const automation of automations) {\n      if (openWithIntent === 'start') {\n        await start(automation);\n      } else {\n        await stop(automation);\n      }\n    }\n\n    dispatch({type: 'complete'});\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${\n                count === 1 ? '1 automation' : `${count} automations`\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${\n              count === 1 ? '1 automation' : `${count} automations`\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Automations are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 automation' : `${count} automations`}`\n            : `Stop ${count === 1 ? '1 automation' : `${count} automations`}`;\n        return (\n          <>\n            <Button onClick={onClose}>Cancel</Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 automation' : `${count} automations`}`\n            : `Stopping ${count === 1 ? '1 automation' : `${count} automations`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while automations are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 automation' : `${successCount} automations`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 automation' : `${successCount} automations`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 automation' : `${errorCount} automations`\n                    }:`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 automation' : `${errorCount} automations`\n                    }:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((automationName) => (\n                <li key={automationName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{automationName}:</strong>\n                    {errors[automationName] ? <div>{errors[automationName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start automations' : 'Stop automations'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const instigationStateSummary = (instigationStates: BasicInstigationStateFragment[]) => {\n  let anyOff = false;\n  let anyOn = false;\n\n  for (const state of instigationStates) {\n    const {status} = state;\n    if (status === InstigationStatus.RUNNING) {\n      anyOn = true;\n    } else if (status === InstigationStatus.STOPPED) {\n      anyOff = true;\n    }\n    if (anyOn && anyOff) {\n      break;\n    }\n  }\n\n  return {anyOff, anyOn};\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {AutomationInfo, AutomationStateChangeDialog} from './AutomationStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  automations: AutomationInfo[];\n}\n\nexport const AutomationBulkActionMenu = (props: Props) => {\n  const {automations} = props;\n  const count = automations.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(automations.map(({instigationState}) => instigationState));\n  }, [automations]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 automation' : `${count} automations`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 automation' : `${count} automations`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <AutomationStateChangeDialog\n        openWithIntent={openWithIntent}\n        automations={automations}\n        onClose={() => setOpenWithIntent('not-open')}\n      />\n    </>\n  );\n};\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  HoverButton,\n  Icon,\n  Popover,\n  Spinner,\n} from '@dagster-io/ui-components';\nimport {ReactNode, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {TickTagFragment} from '../instigation/types/InstigationTick.types';\nimport {numberFormatter} from '../ui/formatters';\nimport styles from './css/LatestTickHoverButton.module.css';\n\ninterface Props {\n  tick: TickTagFragment | null;\n}\n\nexport const LatestTickHoverButton = ({tick}: Props) => {\n  const [showErrors, setShowErrors] = useState(false);\n\n  const content = () => {\n    if (!tick) {\n      return (\n        <Box padding={{vertical: 8, horizontal: 12}}>\n          <Caption>No ticks yet</Caption>\n        </Box>\n      );\n    }\n\n    const icon = statusToIcon[tick.status];\n    const timestamp = <Timestamp timestamp={{unix: tick.timestamp}} />;\n\n    switch (tick.status) {\n      case InstigationTickStatus.FAILURE:\n        return (\n          <HoverContent\n            icon={icon}\n            title=\"Latest tick failed\"\n            timestamp={timestamp}\n            content={\n              <div>\n                {tick.error ? (\n                  <ButtonLink onClick={() => setShowErrors(true)}>Show error</ButtonLink>\n                ) : (\n                  'Unknown error'\n                )}\n              </div>\n            }\n          />\n        );\n      case InstigationTickStatus.SUCCESS: {\n        const runCount = tick.runIds.length;\n        return (\n          <HoverContent\n            icon={icon}\n            title=\"Latest tick succeeded\"\n            timestamp={timestamp}\n            content={\n              <div>\n                {runCount === 1\n                  ? '1 run requested'\n                  : `${numberFormatter.format(runCount)} runs requested`}\n              </div>\n            }\n          />\n        );\n      }\n      case InstigationTickStatus.STARTED:\n        return <HoverContent icon={icon} title=\"Evaluating tick\" timestamp={timestamp} />;\n      case InstigationTickStatus.SKIPPED:\n      default:\n        return (\n          <HoverContent\n            icon={icon}\n            title=\"Latest tick skipped\"\n            timestamp={timestamp}\n            content={<Caption>{tick.skipReason ?? 'No reason provided'}</Caption>}\n          />\n        );\n    }\n  };\n\n  return (\n    <>\n      <Popover content={content()} placement=\"top\" interactionKind=\"hover\">\n        <HoverButton>\n          {tick ? statusToIcon[tick.status] : <Icon name=\"missing\" color={Colors.accentGray()} />}\n        </HoverButton>\n      </Popover>\n      {tick?.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Done\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n\nconst statusToIcon: Record<InstigationTickStatus, ReactNode> = {\n  [InstigationTickStatus.FAILURE]: <Icon name=\"warning\" color={Colors.accentYellow()} />,\n  [InstigationTickStatus.SUCCESS]: <Icon name=\"done\" color={Colors.accentGreen()} />,\n  [InstigationTickStatus.STARTED]: <Spinner purpose=\"body-text\" />,\n  [InstigationTickStatus.SKIPPED]: <Icon name=\"status\" color={Colors.accentGray()} />,\n};\n\ninterface HoverContentProps {\n  icon: ReactNode;\n  title: ReactNode;\n  timestamp: ReactNode;\n  content?: ReactNode;\n}\n\nconst HoverContent = ({icon, title, timestamp, content}: HoverContentProps) => {\n  return (\n    <Box padding={12} className={styles.hoverContent}>\n      <Box\n        border={content ? 'bottom' : undefined}\n        padding={content ? {bottom: 12} : undefined}\n        margin={content ? {bottom: 8} : undefined}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          gap: 8,\n          justifyContent: 'space-between',\n        }}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          {icon}\n          <div>{title}</div>\n        </Box>\n        <div>{timestamp}</div>\n      </Box>\n      {content ? <div>{content}</div> : null}\n    </Box>\n  );\n};\n","export const hourOffsetFromUTC = (timeZone: string) => {\n  const formatForTimezone = Intl.DateTimeFormat(navigator.language, {\n    timeZone,\n    timeZoneName: 'shortOffset',\n  });\n  const offset = formatForTimezone\n    .formatToParts(new Date())\n    .find((part) => part.type === 'timeZoneName')?.value;\n\n  const withoutGMT = offset?.replace('GMT', '');\n  if (!withoutGMT) {\n    return 0;\n  }\n\n  const [hours = '0', minutes = '0'] = withoutGMT.split(':');\n  const parsedHours = parseInt(hours, 10);\n  const parsedMinutes = (parseInt(minutes, 10) / 60) * (parsedHours < 0 ? -1 : 1);\n  return parsedHours + parsedMinutes;\n};\n","import {CaptionMono, MetadataTable, Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\nimport styled from 'styled-components';\n\nimport {hourOffsetFromUTC} from './hourOffsetFromUTC';\nimport {humanCronString} from './humanCronString';\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\n\ninterface Props {\n  cronSchedule: string;\n  executionTimezone: string | null;\n}\n\nexport const CronTag = (props: Props) => {\n  const {cronSchedule, executionTimezone} = props;\n  const {withHumanTimezone, withExecutionTimezone} = useCronInformation(\n    cronSchedule,\n    executionTimezone,\n  );\n\n  const tooltipContent = (\n    <MetadataTable\n      rows={[\n        {key: 'Cron value', value: <CaptionMono>{cronSchedule}</CaptionMono>},\n        {key: 'Your time', value: <span>{withHumanTimezone}</span>},\n      ]}\n    />\n  );\n\n  return (\n    <Container>\n      <Tooltip content={tooltipContent} placement=\"top\">\n        <Tag icon=\"schedule\">{withExecutionTimezone}</Tag>\n      </Tooltip>\n    </Container>\n  );\n};\n\nexport const useCronInformation = (\n  cronSchedule: string | null,\n  executionTimezone: string | null,\n) => {\n  const {\n    timezone: [storedTimezone],\n  } = useContext(TimeContext);\n\n  if (!cronSchedule) {\n    return {\n      withHumanTimezone: null,\n      withExecutionTimezone: null,\n    };\n  }\n\n  const longTimezoneName = executionTimezone || 'UTC';\n  const humanStringWithExecutionTimezone = humanCronString(cronSchedule, {longTimezoneName});\n  const userTimezone = storedTimezone === 'Automatic' ? browserTimezone() : storedTimezone;\n\n  const userTimezoneOffset = hourOffsetFromUTC(userTimezone);\n  const executionTimezoneOffset = hourOffsetFromUTC(longTimezoneName);\n  const tzOffset = userTimezoneOffset - executionTimezoneOffset;\n\n  const humanStringWithUserTimezone = humanCronString(cronSchedule, {\n    longTimezoneName: userTimezone,\n    tzOffset,\n  });\n\n  return {\n    withHumanTimezone: humanStringWithUserTimezone,\n    withExecutionTimezone: humanStringWithExecutionTimezone,\n  };\n};\n\nconst Container = styled.div`\n  .bp5-popover-target {\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {InstigationStatus} from '../graphql/types';\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp5-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n","import {\n  Box,\n  Button,\n  Caption,\n  Checkbox,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from './types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {CronTag} from '../schedules/CronTag';\nimport {SCHEDULE_ASSET_SELECTIONS_QUERY} from '../schedules/ScheduleAssetSelectionsQuery';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitchFragment';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {\n  ScheduleAssetSelectionQuery,\n  ScheduleAssetSelectionQueryVariables,\n} from '../schedules/types/ScheduleAssetSelectionsQuery.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.2fr 1fr 1fr 76px 148px 210px 92px';\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = `60px ${TEMPLATE_COLUMNS}`;\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  scheduleState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    scheduleState,\n    start,\n    height,\n  } = props;\n\n  const repo = useRepository(repoAddress);\n\n  // Wait 100ms before querying in case we're scrolling the table really fast\n  const shouldQuery = useDelayedState(100);\n\n  const scheduleQueryResult = useQuery<SingleScheduleQuery, SingleScheduleQueryVariables>(\n    SINGLE_SCHEDULE_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !shouldQuery,\n    },\n  );\n\n  const scheduleAssetSelectionQueryResult = useQuery<\n    ScheduleAssetSelectionQuery,\n    ScheduleAssetSelectionQueryVariables\n  >(SCHEDULE_ASSET_SELECTIONS_QUERY, {\n    variables: {\n      scheduleSelector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    skip: !shouldQuery,\n  });\n\n  useQueryRefreshAtInterval(scheduleQueryResult, FIFTEEN_SECONDS);\n  useQueryRefreshAtInterval(scheduleAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = scheduleQueryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = scheduleState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this schedule'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this schedule'};\n    }\n    return {disabled: false};\n  }, [scheduleState]);\n\n  const tick = scheduleData?.scheduleState.ticks[0];\n  const targets = scheduleData?.pipelineName ? [{pipelineName: scheduleData.pipelineName}] : null;\n  const assetSelection =\n    scheduleAssetSelectionQueryResult.data?.scheduleOrError.__typename === 'Schedule'\n      ? scheduleAssetSelectionQueryResult.data.scheduleOrError.assetSelection\n      : null;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <span style={{fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </span>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <CronTag\n                cronSchedule={scheduleData.cronSchedule}\n                executionTimezone={scheduleData.executionTimezone}\n              />\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={scheduleQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <div>\n            <AutomationTargetList\n              repoAddress={repoAddress}\n              automationType=\"schedule\"\n              targets={targets}\n              assetSelection={assetSelection}\n            />\n          </div>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} tickResultType=\"runs\" />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={scheduleQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={scheduleQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : (\n            <span style={{color: Colors.textLight()}}>{'\\u2013'}</span>\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = (props: {checkbox: React.ReactNode}) => {\n  const {checkbox} = props;\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          hasStartPermission\n          hasStopPermission\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n`;\n","import {\n  BodySmall,\n  Box,\n  Checkbox,\n  Colors,\n  HorizontalControls,\n  HoverButton,\n  Icon,\n  ListItem,\n  MetadataTable,\n  MonoSmall,\n  Popover,\n  Skeleton,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {ForwardedRef, forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LatestTickHoverButton} from './LatestTickHoverButton';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {useCronInformation} from '../schedules/CronTag';\nimport {SCHEDULE_ASSET_SELECTIONS_QUERY} from '../schedules/ScheduleAssetSelectionsQuery';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {\n  ScheduleAssetSelectionQuery,\n  ScheduleAssetSelectionQueryVariables,\n} from '../schedules/types/ScheduleAssetSelectionsQuery.types';\nimport {TimeFromNow} from '../ui/TimeFromNow';\nimport {SINGLE_SCHEDULE_QUERY} from '../workspace/VirtualizedScheduleRow';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from '../workspace/types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface ScheduleRowProps {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const ObserveAutomationScheduleRow = forwardRef(\n  (props: ScheduleRowProps, ref: ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const queryResult = useQuery<SingleScheduleQuery, SingleScheduleQueryVariables>(\n      SINGLE_SCHEDULE_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            scheduleName: name,\n          },\n        },\n        skip: !shouldQuery,\n        notifyOnNetworkStatusChange: true,\n      },\n    );\n\n    const scheduleAssetSelectionQueryResult = useQuery<\n      ScheduleAssetSelectionQuery,\n      ScheduleAssetSelectionQueryVariables\n    >(SCHEDULE_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        scheduleSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(scheduleAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n\n    const scheduleData = useMemo(() => {\n      if (data?.scheduleOrError.__typename !== 'Schedule') {\n        return null;\n      }\n\n      return data.scheduleOrError;\n    }, [data]);\n\n    const tick = scheduleData?.scheduleState.ticks[0];\n\n    const {withHumanTimezone, withExecutionTimezone} = useCronInformation(\n      scheduleData?.cronSchedule ?? null,\n      scheduleData?.executionTimezone ?? null,\n    );\n\n    const right = () => {\n      if (queryResult.loading && !queryResult.data) {\n        return <Skeleton $width={200} $height={24} />;\n      }\n\n      const latestRuns = scheduleData?.scheduleState.runs || [];\n\n      return (\n        <HorizontalControls\n          controls={[\n            {\n              key: 'latest-run',\n              control: latestRuns[0]?.startTime ? (\n                <Popover\n                  key={latestRuns[0].id}\n                  position=\"top\"\n                  interactionKind=\"hover\"\n                  content={\n                    <div>\n                      <RunStatusOverlay run={latestRuns[0]} name={name} />\n                    </div>\n                  }\n                  hoverOpenDelay={100}\n                >\n                  <HoverButton>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                      <RunStatusIndicator status={latestRuns[0].status} />\n                      <TimeFromNow unixTimestamp={latestRuns[0].startTime} showTooltip={false} />\n                    </Box>\n                  </HoverButton>\n                </Popover>\n              ) : null,\n            },\n            {\n              key: 'tick',\n              control: <LatestTickHoverButton tick={tick ?? null} />,\n            },\n            {\n              key: 'switch',\n              control: (\n                <Box flex={{direction: 'column', justifyContent: 'center'}} padding={{left: 8}}>\n                  {scheduleData ? (\n                    <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n                  ) : (\n                    <Checkbox key={name} disabled indeterminate checked={false} format=\"switch\" />\n                  )}\n                </Box>\n              ),\n            },\n          ]}\n        />\n      );\n    };\n\n    return (\n      <ListItem\n        ref={ref}\n        index={index}\n        href={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}\n        checked={checked}\n        onToggle={onToggleChecked}\n        renderLink={({href, ...props}) => <Link to={href || '#'} {...props} />}\n        left={\n          <Box flex={{direction: 'row', gap: 8, alignItems: 'flex-start'}}>\n            <div>\n              <Icon name=\"schedule\" />\n            </div>\n            <Box flex={{direction: 'column', gap: 4}}>\n              <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>{name}</Box>\n                {scheduleData?.description ? (\n                  <Tooltip\n                    content={<div style={{width: 320}}>{scheduleData.description}</div>}\n                    placement=\"top\"\n                  >\n                    <Icon name=\"info\" color={Colors.textLight()} />\n                  </Tooltip>\n                ) : null}\n              </Box>\n              {withHumanTimezone ? (\n                <BodySmall>\n                  Scheduled{' '}\n                  <Tooltip\n                    placement=\"top\"\n                    content={\n                      <MetadataTable\n                        rows={[\n                          {\n                            key: 'Cron value',\n                            value: <MonoSmall>{scheduleData?.cronSchedule ?? ''}</MonoSmall>,\n                          },\n                          {key: 'Your time', value: <span>{withHumanTimezone}</span>},\n                        ]}\n                      />\n                    }\n                  >\n                    <span>{withExecutionTimezone}</span>\n                  </Tooltip>\n                </BodySmall>\n              ) : (\n                <Skeleton $width={80} $height={16} />\n              )}\n            </Box>\n          </Box>\n        }\n        right={right()}\n      />\n    );\n  },\n);\n\nObserveAutomationScheduleRow.displayName = 'ObserveAutomationScheduleRow';\n","import {\n  Box,\n  Caption,\n  Checkbox,\n  Colors,\n  IconName,\n  MiddleTruncate,\n  Tag,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitchFragment';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 180px 1fr 76px 120px 148px 180px';\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = `60px ${TEMPLATE_COLUMNS}`;\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  sensorState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    sensorState,\n    start,\n    height,\n  } = props;\n\n  // Wait 100ms before querying in case we're scrolling the table really fast\n  const shouldQuery = useDelayedState(100);\n\n  const sensorQueryResult = useQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n    SINGLE_SENSOR_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n      skip: !shouldQuery,\n    },\n  );\n\n  const sensorAssetSelectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {\n      sensorSelector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        sensorName: name,\n      },\n    },\n    skip: !shouldQuery,\n  });\n\n  useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n  useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = sensorQueryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = sensorState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this sensor'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this sensor'};\n    }\n    return {disabled: false};\n  }, [sensorState]);\n\n  const tick = sensorData?.sensorState.ticks[0];\n\n  const sensorType = sensorData?.sensorType;\n  const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n\n  const selectedAssets =\n    sensorAssetSelectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n      ? sensorAssetSelectionQueryResult.data.sensorOrError.assetSelection\n      : null;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.textLight(),\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <div>\n            {sensorInfo ? (\n              sensorInfo.description ? (\n                <Tooltip content={sensorInfo.description}>\n                  <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                </Tooltip>\n              ) : (\n                <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n              )\n            ) : null}\n          </div>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div>\n              <AutomationTargetList\n                targets={sensorData.targets}\n                repoAddress={repoAddress}\n                assetSelection={selectedAssets}\n                automationType={sensorData.sensorType}\n              />\n            </div>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: Colors.textDefault()}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} tickResultType=\"runs\" />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = ({checkbox}: {checkbox: React.ReactNode}) => {\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SENSOR_TYPE_META: Record<\n  SensorType,\n  {name: string; icon: IconName; description: string | null}\n> = {\n  [SensorType.ASSET]: {\n    name: 'Asset sensor',\n    icon: 'sensors',\n    description: 'Asset sensors instigate runs when a materialization occurs',\n  },\n  [SensorType.AUTO_MATERIALIZE]: {\n    name: 'Automation condition sensor',\n    icon: 'automation_condition',\n    description:\n      'Automation condition sensors trigger runs based on conditions defined on assets or checks.',\n  },\n  [SensorType.AUTOMATION]: {\n    name: 'Automation condition sensor',\n    icon: 'automation_condition',\n    description:\n      'Automation condition sensors trigger runs based on conditions defined on assets or checks.',\n  },\n  [SensorType.FRESHNESS_POLICY]: {\n    name: 'Freshness policy sensor',\n    icon: 'sensors',\n    description:\n      'Freshness sensors check the freshness of assets on each tick, then perform an action in response to that status',\n  },\n  [SensorType.MULTI_ASSET]: {\n    name: 'Multi-asset sensor',\n    icon: 'sensors',\n    description:\n      'Multi asset sensors trigger job executions based on multiple asset materialization event streams',\n  },\n  [SensorType.RUN_STATUS]: {\n    name: 'Run status sensor',\n    icon: 'sensors',\n    description: 'Run status sensors react to run status',\n  },\n  [SensorType.STANDARD]: {\n    name: 'Standard sensor',\n    icon: 'sensors',\n    description: null,\n  },\n  [SensorType.UNKNOWN]: {\n    name: 'Standard sensor',\n    icon: 'sensors',\n    description: null,\n  },\n};\n\nexport const SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          hasStartPermission\n          hasStopPermission\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {\n  BodySmall,\n  Box,\n  Checkbox,\n  Colors,\n  HorizontalControls,\n  HoverButton,\n  Icon,\n  ListItem,\n  Popover,\n  Skeleton,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {ForwardedRef, forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LatestTickHoverButton} from './LatestTickHoverButton';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {SensorType} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TimeFromNow} from '../ui/TimeFromNow';\nimport {SENSOR_TYPE_META, SINGLE_SENSOR_QUERY} from '../workspace/VirtualizedSensorRow';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleSensorQuery,\n  SingleSensorQueryVariables,\n} from '../workspace/types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const ObserveAutomationSensorRow = forwardRef(\n  (props: Props, ref: ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const sensorQueryResult = useQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n      SINGLE_SENSOR_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            sensorName: name,\n          },\n        },\n        skip: !shouldQuery,\n      },\n    );\n\n    const sensorAssetSelectionQueryResult = useQuery<\n      SensorAssetSelectionQuery,\n      SensorAssetSelectionQueryVariables\n    >(SENSOR_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        sensorSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = sensorQueryResult;\n\n    const sensorData = useMemo(() => {\n      if (data?.sensorOrError.__typename !== 'Sensor') {\n        return null;\n      }\n\n      return data.sensorOrError;\n    }, [data]);\n\n    const tick = sensorData?.sensorState.ticks[0];\n\n    const sensorType = sensorData?.sensorType;\n    const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n\n    const right = () => {\n      if (sensorQueryResult.loading && !sensorQueryResult.data) {\n        return <Skeleton $width={200} $height={24} />;\n      }\n\n      const latestRuns = sensorData?.sensorState.runs || [];\n\n      return (\n        <HorizontalControls\n          controls={[\n            {\n              key: 'latest-run',\n              control: latestRuns[0]?.startTime ? (\n                <Popover\n                  key={latestRuns[0].id}\n                  position=\"top\"\n                  interactionKind=\"hover\"\n                  content={\n                    <div>\n                      <RunStatusOverlay run={latestRuns[0]} name={name} />\n                    </div>\n                  }\n                  hoverOpenDelay={100}\n                >\n                  <HoverButton>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                      <RunStatusIndicator status={latestRuns[0].status} />\n                      <TimeFromNow unixTimestamp={latestRuns[0].startTime} showTooltip={false} />\n                    </Box>\n                  </HoverButton>\n                </Popover>\n              ) : null,\n            },\n            {\n              key: 'tick',\n              control: <LatestTickHoverButton tick={tick ?? null} />,\n            },\n            {\n              key: 'switch',\n              control: (\n                <Box flex={{direction: 'column', justifyContent: 'center'}} padding={{left: 8}}>\n                  {sensorData ? (\n                    <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n                  ) : (\n                    <Checkbox key={name} disabled indeterminate checked={false} format=\"switch\" />\n                  )}\n                </Box>\n              ),\n            },\n          ]}\n        />\n      );\n    };\n\n    return (\n      <ListItem\n        ref={ref}\n        index={index}\n        href={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}\n        checked={checked}\n        onToggle={onToggleChecked}\n        renderLink={({href, ...props}) => <Link to={href || '#'} {...props} />}\n        left={\n          <Box flex={{direction: 'row', gap: 8, alignItems: 'flex-start'}}>\n            <div>\n              <Icon name=\"sensors\" />\n            </div>\n            <Box flex={{direction: 'column', gap: 4}}>\n              <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                {name}\n                {sensorInfo?.description ? (\n                  <Tooltip\n                    content={<div style={{width: 320}}>{sensorInfo.description}</div>}\n                    placement=\"top\"\n                  >\n                    <Icon name=\"info\" color={Colors.textLight()} />\n                  </Tooltip>\n                ) : null}\n              </Box>\n              <BodySmall>\n                {sensorData?.sensorType ? (\n                  sensorTypeToLabel[sensorData.sensorType]\n                ) : (\n                  <Skeleton $width={80} $height={16} />\n                )}\n              </BodySmall>\n            </Box>\n          </Box>\n        }\n        right={right()}\n      />\n    );\n  },\n);\n\nObserveAutomationSensorRow.displayName = 'ObserveAutomationSensorRow';\n\nconst sensorTypeToLabel: Record<SensorType, string> = {\n  [SensorType.ASSET]: 'Asset sensor',\n  [SensorType.AUTOMATION]: 'Automation condition sensor',\n  [SensorType.AUTO_MATERIALIZE]: 'Automation condition sensor',\n  [SensorType.FRESHNESS_POLICY]: 'Freshness policy sensor',\n  [SensorType.MULTI_ASSET]: 'Multi-asset sensor',\n  [SensorType.RUN_STATUS]: 'Run status sensor',\n  [SensorType.STANDARD]: 'Standard sensor',\n  [SensorType.UNKNOWN]: 'Unknown sensor type',\n};\n","import {Box} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {HeaderCell, HeaderRow} from '../ui/VirtualizedTable';\n\nexport const TEMPLATE_COLUMNS = '60px minmax(400px, 1.5fr) 240px 1fr 200px 200px';\n\nexport const VirtualizedAutomationHeader = ({checkbox}: {checkbox: React.ReactNode}) => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>\n        <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n      </HeaderCell>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nexport const AutomationRowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","import {\n  Box,\n  Caption,\n  Checkbox,\n  MiddleTruncate,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AutomationTargetList} from './AutomationTargetList';\nimport {AutomationRowGrid} from './VirtualizedAutomationRow';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {CronTag} from '../schedules/CronTag';\nimport {SCHEDULE_ASSET_SELECTIONS_QUERY} from '../schedules/ScheduleAssetSelectionsQuery';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {\n  ScheduleAssetSelectionQuery,\n  ScheduleAssetSelectionQueryVariables,\n} from '../schedules/types/ScheduleAssetSelectionsQuery.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RowCell} from '../ui/VirtualizedTable';\nimport {SINGLE_SCHEDULE_QUERY} from '../workspace/VirtualizedScheduleRow';\nimport {LoadingOrNone} from '../workspace/VirtualizedWorkspaceTable';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from '../workspace/types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface ScheduleRowProps {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const VirtualizedAutomationScheduleRow = forwardRef(\n  (props: ScheduleRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const queryResult = useQuery<SingleScheduleQuery, SingleScheduleQueryVariables>(\n      SINGLE_SCHEDULE_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            scheduleName: name,\n          },\n        },\n        skip: !shouldQuery,\n        notifyOnNetworkStatusChange: true,\n      },\n    );\n\n    const scheduleAssetSelectionQueryResult = useQuery<\n      ScheduleAssetSelectionQuery,\n      ScheduleAssetSelectionQueryVariables\n    >(SCHEDULE_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        scheduleSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(scheduleAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n\n    const scheduleData = useMemo(() => {\n      if (data?.scheduleOrError.__typename !== 'Schedule') {\n        return null;\n      }\n\n      return data.scheduleOrError;\n    }, [data]);\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n      if (onToggleChecked && e.target instanceof HTMLInputElement) {\n        const {checked} = e.target;\n        const shiftKey =\n          e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n        onToggleChecked({checked, shiftKey});\n      }\n    };\n\n    const scheduleState = scheduleData?.scheduleState;\n\n    const checkboxState = useMemo(() => {\n      if (!scheduleState) {\n        return {disabled: true};\n      }\n\n      const {hasStartPermission, hasStopPermission, status} = scheduleState;\n      if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n        return {disabled: true, message: 'You do not have permission to stop this schedule'};\n      }\n      if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n        return {disabled: true, message: 'You do not have permission to start this schedule'};\n      }\n      return {disabled: false};\n    }, [scheduleState]);\n\n    const tick = scheduleData?.scheduleState.ticks[0];\n    const targets = scheduleData?.pipelineName ? [{pipelineName: scheduleData.pipelineName}] : null;\n    const assetSelection =\n      scheduleAssetSelectionQueryResult.data?.scheduleOrError.__typename === 'Schedule'\n        ? scheduleAssetSelectionQueryResult.data.scheduleOrError.assetSelection\n        : null;\n\n    return (\n      <div ref={ref} data-index={index}>\n        <AutomationRowGrid border=\"bottom\">\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n          <RowCell>\n            <Box\n              flex={{\n                direction: 'row',\n                gap: 8,\n                alignItems: 'flex-start',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Box flex={{grow: 1, gap: 8}}>\n                {scheduleData ? (\n                  <>\n                    <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n                    {errorDisplay(\n                      scheduleData.scheduleState.status,\n                      scheduleData.scheduleState.runningCount,\n                    )}\n                  </>\n                ) : (\n                  <div style={{width: 30}} />\n                )}\n                <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </Box>\n            </Box>\n          </RowCell>\n          <RowCell>\n            {scheduleData ? (\n              <Box flex={{direction: 'column', gap: 4}}>\n                <CronTag\n                  cronSchedule={scheduleData.cronSchedule}\n                  executionTimezone={scheduleData.executionTimezone}\n                />\n                {scheduleData.scheduleState.nextTick &&\n                scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                  <Caption>\n                    <div\n                      style={{\n                        overflow: 'hidden',\n                        whiteSpace: 'nowrap',\n                        maxWidth: '100%',\n                        textOverflow: 'ellipsis',\n                      }}\n                    >\n                      Next tick:&nbsp;\n                      <TimestampDisplay\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                        timezone={scheduleData.executionTimezone}\n                        timeFormat={{showSeconds: false, showTimezone: true}}\n                      />\n                    </div>\n                  </Caption>\n                ) : null}\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            <div>\n              <AutomationTargetList\n                repoAddress={repoAddress}\n                automationType=\"schedule\"\n                targets={targets}\n                assetSelection={assetSelection}\n              />\n            </div>\n          </RowCell>\n          <RowCell>\n            {tick ? (\n              <div>\n                <TickStatusTag tick={tick} tickResultType=\"runs\" />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n              <LastRunSummary\n                run={scheduleData.scheduleState.runs[0]}\n                name={name}\n                showButton={false}\n                showHover\n                showSummary={false}\n              />\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n        </AutomationRowGrid>\n      </div>\n    );\n  },\n);\n","import {\n  Box,\n  Checkbox,\n  MiddleTruncate,\n  Tag,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AutomationTargetList} from './AutomationTargetList';\nimport {AutomationRowGrid} from './VirtualizedAutomationRow';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RowCell} from '../ui/VirtualizedTable';\nimport {SENSOR_TYPE_META, SINGLE_SENSOR_QUERY} from '../workspace/VirtualizedSensorRow';\nimport {LoadingOrNone} from '../workspace/VirtualizedWorkspaceTable';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleSensorQuery,\n  SingleSensorQueryVariables,\n} from '../workspace/types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const VirtualizedAutomationSensorRow = forwardRef(\n  (props: Props, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const sensorQueryResult = useQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n      SINGLE_SENSOR_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            sensorName: name,\n          },\n        },\n        skip: !shouldQuery,\n      },\n    );\n\n    const sensorAssetSelectionQueryResult = useQuery<\n      SensorAssetSelectionQuery,\n      SensorAssetSelectionQueryVariables\n    >(SENSOR_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        sensorSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = sensorQueryResult;\n\n    const sensorData = useMemo(() => {\n      if (data?.sensorOrError.__typename !== 'Sensor') {\n        return null;\n      }\n\n      return data.sensorOrError;\n    }, [data]);\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n      if (onToggleChecked && e.target instanceof HTMLInputElement) {\n        const {checked} = e.target;\n        const shiftKey =\n          e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n        onToggleChecked({checked, shiftKey});\n      }\n    };\n\n    const sensorState = sensorData?.sensorState;\n\n    const checkboxState = useMemo(() => {\n      if (!sensorState) {\n        return {disabled: true};\n      }\n\n      const {hasStartPermission, hasStopPermission, status} = sensorState;\n      if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n        return {disabled: true, message: 'You do not have permission to stop this sensor'};\n      }\n      if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n        return {disabled: true, message: 'You do not have permission to start this sensor'};\n      }\n      return {disabled: false};\n    }, [sensorState]);\n\n    const tick = sensorData?.sensorState.ticks[0];\n\n    const sensorType = sensorData?.sensorType;\n    const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n    const selectedAssets =\n      sensorAssetSelectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n        ? sensorAssetSelectionQueryResult.data.sensorOrError.assetSelection\n        : null;\n\n    return (\n      <div ref={ref} data-index={index}>\n        <AutomationRowGrid border=\"bottom\">\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n          <RowCell>\n            <Box\n              flex={{\n                direction: 'row',\n                gap: 8,\n                alignItems: 'flex-start',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Box flex={{grow: 1, gap: 8}}>\n                {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n                {sensorData ? (\n                  <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n                ) : (\n                  <div style={{width: 30}} />\n                )}\n                <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </Box>\n            </Box>\n          </RowCell>\n          <RowCell>\n            <div>\n              {sensorInfo ? (\n                sensorInfo.description ? (\n                  <Tooltip\n                    content={<div style={{maxWidth: '300px'}}>{sensorInfo.description}</div>}\n                    placement=\"top\"\n                  >\n                    <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                  </Tooltip>\n                ) : (\n                  <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                )\n              ) : null}\n            </div>\n          </RowCell>\n          <RowCell>\n            {sensorData ? (\n              <div>\n                <AutomationTargetList\n                  targets={sensorData.targets || null}\n                  repoAddress={repoAddress}\n                  assetSelection={selectedAssets}\n                  automationType={sensorData.sensorType}\n                />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={sensorAssetSelectionQueryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {tick ? (\n              <div>\n                <TickStatusTag tick={tick} tickResultType=\"runs\" />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={sensorQueryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n              <LastRunSummary\n                run={sensorData.sensorState.runs[0]}\n                name={name}\n                showButton={false}\n                showHover\n                showSummary={false}\n              />\n            ) : (\n              <LoadingOrNone queryResult={sensorQueryResult} />\n            )}\n          </RowCell>\n        </AutomationRowGrid>\n      </div>\n    );\n  },\n);\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\n// todo dish: Delete this in favor of `makeAutomationKey`, they're the same.\nexport const makeSensorKey = (repoAddress: RepoAddress, sensorName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${sensorName}`;\n};\n\nexport const makeAutomationKey = (repoAddress: RepoAddress, automationName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${automationName}`;\n};\n","import {Row} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {ObserveAutomationScheduleRow} from './ObserveAutomationScheduleRow';\nimport {ObserveAutomationSensorRow} from './ObserveAutomationSensorRow';\nimport {VirtualizedAutomationHeader} from './VirtualizedAutomationRow';\nimport {VirtualizedAutomationScheduleRow} from './VirtualizedAutomationScheduleRow';\nimport {VirtualizedAutomationSensorRow} from './VirtualizedAutomationSensorRow';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {useFeatureFlags} from '../app/useFeatureFlags';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {makeAutomationKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {DynamicRepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n  sensors: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: string}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: string};\n\nexport const AutomationsTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const {flagUseNewObserveUIs} = useFeatureFlags();\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules, sensors}) => {\n      flat.push({\n        type: 'header',\n        repoAddress,\n        scheduleCount: schedules.length,\n        sensorCount: sensors.length,\n      });\n      const repoKey = repoAddressAsHumanString(repoAddress);\n\n      if (expandedKeys.includes(repoKey)) {\n        const sensorKeys = new Set(sensors);\n        const scheduleKeys = new Set(schedules);\n        const repoAutomations = [...sensors, ...schedules].sort((a, b) =>\n          COMMON_COLLATOR.compare(a, b),\n        );\n\n        repoAutomations.forEach((name) => {\n          if (sensorKeys.has(name)) {\n            flat.push({type: 'sensor', repoAddress, sensor: name});\n          } else if (scheduleKeys.has(name)) {\n            flat.push({type: 'schedule', repoAddress, schedule: name});\n          }\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 62;\n    },\n    overscan: 15,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        {flagUseNewObserveUIs ? null : <VirtualizedAutomationHeader checkbox={headerCheckbox} />}\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const row: RowType = flattened[index]!;\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const type = row!.type;\n            if (type === 'header') {\n              return (\n                <Row $height={size} $start={start} key={key}>\n                  <DynamicRepoRow\n                    repoAddress={row.repoAddress}\n                    ref={rowVirtualizer.measureElement}\n                    index={index}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={<></>}\n                  />\n                </Row>\n              );\n            }\n\n            if (type === 'sensor') {\n              const sensorKey = makeAutomationKey(row.repoAddress, row.sensor);\n              if (flagUseNewObserveUIs) {\n                return (\n                  <Row $height={size} $start={start} key={key}>\n                    <ObserveAutomationSensorRow\n                      key={key}\n                      index={index}\n                      ref={rowVirtualizer.measureElement}\n                      name={row.sensor}\n                      checked={checkedKeys.has(sensorKey)}\n                      onToggleChecked={onToggleCheckFactory(sensorKey)}\n                      repoAddress={row.repoAddress}\n                    />\n                  </Row>\n                );\n              }\n\n              return (\n                <Row $height={size} $start={start} key={key}>\n                  <VirtualizedAutomationSensorRow\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.sensor}\n                    checked={checkedKeys.has(sensorKey)}\n                    onToggleChecked={onToggleCheckFactory(sensorKey)}\n                    repoAddress={row.repoAddress}\n                  />\n                </Row>\n              );\n            }\n\n            if (type === 'schedule') {\n              const scheduleKey = makeAutomationKey(row.repoAddress, row.schedule);\n\n              if (flagUseNewObserveUIs) {\n                return (\n                  <Row $height={size} $start={start} key={key}>\n                    <ObserveAutomationScheduleRow\n                      key={key}\n                      index={index}\n                      ref={rowVirtualizer.measureElement}\n                      name={row.schedule}\n                      checked={checkedKeys.has(scheduleKey)}\n                      onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                      repoAddress={row.repoAddress}\n                    />\n                  </Row>\n                );\n              }\n\n              return (\n                <Row $height={size} $start={start} key={key}>\n                  <VirtualizedAutomationScheduleRow\n                    key={key}\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.schedule}\n                    checked={checkedKeys.has(scheduleKey)}\n                    onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                    repoAddress={row.repoAddress}\n                  />\n                </Row>\n              );\n            }\n\n            return <div key={key} />;\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const filterPermissionedInstigationState = (\n  instigationState: BasicInstigationStateFragment,\n) => {\n  return (\n    (instigationState.hasStartPermission &&\n      instigationState.status === InstigationStatus.STOPPED) ||\n    (instigationState.hasStopPermission && instigationState.status === InstigationStatus.RUNNING)\n  );\n};\n","import {\n  Body2,\n  Box,\n  Colors,\n  Icon,\n  NonIdealState,\n  PageHeader,\n  SpinnerWithText,\n  Subtitle1,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {AutomationBulkActionMenu} from './AutomationBulkActionMenu';\nimport {AutomationTabs} from './AutomationTabs';\nimport {AutomationsTable} from './AutomationsTable';\nimport {useAutomations} from './useAutomations';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {filterAutomationSelectionByQuery} from '../automation-selection/AntlrAutomationSelection';\nimport {AutomationSelectionInput} from '../automation-selection/input/AutomationSelectionInput';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {makeAutomationKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\n\nexport const MergedAutomationRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Automation');\n\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n\n  const {automations, repoBuckets, loading: workspaceLoading} = useAutomations();\n\n  const [selection, setSelection] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n    behavior: 'push',\n  });\n\n  const filtered = useMemo(() => {\n    return filterAutomationSelectionByQuery(automations, selection);\n  }, [automations, selection]);\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets\n      .filter((bucket) => {\n        return Array.from(filtered).some(\n          (automation) =>\n            automation.repo.name === bucket.repoAddress.name &&\n            automation.repo.location === bucket.repoAddress.location,\n        );\n      })\n      .map((bucket) => ({\n        ...bucket,\n        schedules: bucket.schedules.filter((schedule) => {\n          return filtered.has(schedule);\n        }),\n        sensors: bucket.sensors.filter((sensor) => {\n          return filtered.has(sensor);\n        }),\n      }))\n      .filter((bucket) => !!bucket.schedules.length || !!bucket.sensors.length);\n  }, [repoBuckets, filtered]);\n\n  // Collect all automations across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedAutomations = useMemo(() => {\n    return filteredBuckets\n      .map(({repoAddress, schedules, sensors}) => {\n        return [\n          ...sensors\n            .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n            .map(({name, sensorState}) => ({\n              repoAddress,\n              name,\n              type: 'sensor' as const,\n              instigationState: sensorState,\n            })),\n          ...schedules\n            .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n            .map(({name, scheduleState}) => ({\n              repoAddress,\n              name,\n              type: 'schedule' as const,\n              instigationState: scheduleState,\n            })),\n        ];\n      })\n      .flat();\n  }, [filteredBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedAutomationKeys = useMemo(() => {\n    return allPermissionedAutomations.map(({repoAddress, name}) =>\n      makeAutomationKey(repoAddress, name),\n    );\n  }, [allPermissionedAutomations]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedAutomationKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBuckets\n        .map(({repoAddress, schedules, sensors}) => {\n          return [...schedules, ...sensors].map(({name}) => makeAutomationKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedAutomationKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedAutomationKeys, filteredBuckets]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedAutomations = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedAutomations.filter(({repoAddress, name}) => {\n      return checkedKeysOnScreen.has(makeAutomationKey(repoAddress, name));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedAutomations, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedAutomationKeys.length > 0;\n  const checkedCount = checkedAutomations.length;\n  const anyAutomationsVisible = permissionedKeysOnScreen.length > 0;\n\n  const repos = useMemo(() => {\n    return filteredBuckets.map((bucket) => ({\n      repoAddress: bucket.repoAddress,\n      schedules: bucket.schedules.map((schedule) => schedule.name),\n      sensors: bucket.sensors.map((sensor) => sensor.name),\n    }));\n  }, [filteredBuckets]);\n\n  const content = () => {\n    if (workspaceLoading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} padding={{top: 64}}>\n          <SpinnerWithText label=\"Loading automations…\" />\n        </Box>\n      );\n    }\n\n    if (filteredBuckets.length === 0) {\n      if (selection) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching automations\"\n              description={\n                <div>\n                  No automations matching <strong>{selection}</strong> were found in your\n                  definitions\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No automations\"\n            description={\n              <Body2>\n                There are no automations in this deployment.{' '}\n                <a\n                  href=\"https://docs.dagster.io/concepts/automation\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n                    Learn more about automations\n                    <Icon name=\"open_in_new\" color={Colors.linkDefault()} />\n                  </Box>\n                </a>\n              </Body2>\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <AutomationsTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={repos}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Subtitle1>Automation</Subtitle1>} />\n      {automaterializeSensorsFlagState === 'has-global-amp' ? (\n        <Box padding={{horizontal: 24}} border=\"bottom\">\n          <AutomationTabs tab=\"schedules-and-sensors\" />\n        </Box>\n      ) : null}\n      <Box\n        padding={{horizontal: 24, vertical: 12}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{grow: 1}}>\n          <AutomationSelectionInput items={automations} value={selection} onChange={setSelection} />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anyAutomationsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <AutomationBulkActionMenu automations={checkedAutomations} />\n        </Tooltip>\n      </Box>\n      {content()}\n    </Box>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default MergedAutomationRoot;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverContent\":\"LatestTickHoverButton_hoverContent__4QRVM\"};","import {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\n\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props {\n  tab: 'schedules-and-sensors' | 'global-amp';\n}\n\nexport const AutomationTabs = (props: Props) => {\n  const {tab} = props;\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n\n  return (\n    <Tabs selectedTabId={tab}>\n      <TabLink id=\"schedules-and-sensors\" title=\"Schedules and sensors\" to=\"/automation\" />\n      {automaterializeSensorsFlagState === 'has-global-amp' ? (\n        <TabLink\n          id=\"global-amp\"\n          title={\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <div>Auto-materialize</div>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <div\n                  style={{\n                    width: '10px',\n                    height: '10px',\n                    borderRadius: '50%',\n                    backgroundColor:\n                      automaterialize.paused === false ? Colors.accentBlue() : Colors.accentGray(),\n                  }}\n                />\n              )}\n            </Box>\n          }\n          to=\"/overview/automation\"\n        />\n      ) : null}\n    </Tabs>\n  );\n};\n"],"names":["initialState","step","completion","completed","errors","reducer","prevState","action","type","name","error","useInstigationStateReducer","useReducer","AutomationStateChangeDialog","openWithIntent","onClose","automations","props","count","length","state","dispatch","useEffect","startSensor","useMutation","START_SENSOR_MUTATION","stopSensor","STOP_SENSOR_MUTATION","startSchedule","START_SCHEDULE_MUTATION","stopSchedule","STOP_SCHEDULE_MUTATION","start","automation","repoAddress","repoValues","repositoryLocationName","location","repositoryName","data","variables","sensorSelector","sensorName","__typename","message","scheduleSelector","scheduleName","assertUnreachable","stop","instigationState","id","stopRunningSchedule","mutate","canQuicklyClose","Dialog","isOpen","title","canEscapeKeyClose","canOutsideClickClose","DialogBody","Group","direction","spacing","progressContent","div","value","ProgressBar","intent","Math","max","animate","NavigationBlock","completionContent","errorCount","Object","keys","successCount","alignItems","Icon","color","Colors","ul","style","margin","map","li","strong","automationName","DialogFooter","buttons","Button","onClick","label","disabled","instigationStateSummary","anyOff","anyOn","instigationStates","status","InstigationStatus","RUNNING","STOPPED","setOpenWithIntent","useState","useMemo","Popover","content","Menu","MenuItem","text","aria-disabled","icon","placement","rightIcon","LatestTickHoverButton","tick","showErrors","setShowErrors","Box","padding","vertical","horizontal","Caption","statusToIcon","timestamp","Timestamp","unix","InstigationTickStatus","FAILURE","HoverContent","ButtonLink","SUCCESS","runCount","runIds","numberFormatter","format","STARTED","SKIPPED","skipReason","interactionKind","HoverButton","width","PythonErrorInfo","topBorder","Spinner","purpose","className","styles","border","undefined","bottom","flex","gap","justifyContent","hourOffsetFromUTC","formatForTimezone","offset","Intl","DateTimeFormat","navigator","language","timeZone","timeZoneName","formatToParts","Date","find","part","withoutGMT","replace","hours","minutes","split","parsedHours","parseInt","parsedMinutes","CronTag","cronSchedule","executionTimezone","withHumanTimezone","withExecutionTimezone","useCronInformation","tooltipContent","MetadataTable","rows","key","CaptionMono","span","Container","Tooltip","Tag","timezone","storedTimezone","useContext","TimeContext","longTimezoneName","humanStringWithExecutionTimezone","humanCronString","userTimezone","browserTimezone","userTimezoneOffset","executionTimezoneOffset","tzOffset","styled","errorDisplay","runningScheduleCount","push","popoverClassName","position","index","fill","interactive","TEMPLATE_COLUMNS","TEMPLATE_COLUMNS_WITH_CHECKBOX","$showCheckboxColumn","SINGLE_SCHEDULE_QUERY","gql","TICK_TAG_FRAGMENT","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","forwardRef","ref","scheduleData","checked","onToggleChecked","shouldQuery","useDelayedState","queryResult","useQuery","selector","skip","notifyOnNetworkStatusChange","scheduleAssetSelectionQueryResult","SCHEDULE_ASSET_SELECTIONS_QUERY","useQueryRefreshAtInterval","FIFTEEN_SECONDS","scheduleOrError","scheduleState","ticks","ListItem","href","workspacePathFromAddress","onToggle","renderLink","Link","to","left","description","BodySmall","MonoSmall","Skeleton","$width","$height","right","latestRuns","loading","runs","HorizontalControls","controls","control","startTime","RunStatusOverlay","run","hoverOpenDelay","RunStatusIndicator","TimeFromNow","unixTimestamp","showTooltip","ScheduleSwitch","schedule","Checkbox","indeterminate","displayName","SENSOR_TYPE_META","SensorType","ASSET","AUTO_MATERIALIZE","AUTOMATION","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","STANDARD","UNKNOWN","SINGLE_SENSOR_QUERY","SENSOR_SWITCH_FRAGMENT","sensorQueryResult","sensorAssetSelectionQueryResult","SENSOR_ASSET_SELECTIONS_QUERY","sensorData","sensorOrError","sensorState","sensorType","sensorInfo","SensorSwitch","sensor","sensorTypeToLabel","checkbox","HeaderRow","templateColumns","sticky","HeaderCell","top","VirtualizedAutomationScheduleRow","checkboxState","hasStartPermission","hasStopPermission","targets","pipelineName","assetSelection","data-index","AutomationRowGrid","RowCell","canShow","onChange","e","target","HTMLInputElement","shiftKey","nativeEvent","MouseEvent","getModifierState","grow","runningCount","MiddleTruncate","nextTick","overflow","whiteSpace","maxWidth","textOverflow","TimestampDisplay","timeFormat","showSeconds","showTimezone","LoadingOrNone","AutomationTargetList","automationType","TickStatusTag","tickResultType","LastRunSummary","showButton","showHover","showSummary","selectedAssets","makeAutomationKey","repoAddressAsHumanString","AutomationsTable","repos","headerCheckbox","checkedKeys","onToggleCheckFactory","flagUseNewObserveUIs","useFeatureFlags","parentRef","React","allKeys","expandedKeys","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","forEach","schedules","sensors","scheduleCount","sensorCount","repoKey","includes","sensorKeys","Set","scheduleKeys","sort","a","b","COMMON_COLLATOR","compare","has","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","VirtualizedAutomationHeader","Inner","$totalHeight","size","Row","$start","DynamicRepoRow","measureElement","expanded","showLocation","rightElement","sensorKey","ObserveAutomationSensorRow","VirtualizedAutomationSensorRow","scheduleKey","ObserveAutomationScheduleRow","filterPermissionedInstigationState","MergedAutomationRoot","useTrackPageView","useDocumentTitle","automaterializeSensorsFlagState","useAutoMaterializeSensorFlag","repoBuckets","workspaceLoading","useAutomations","selection","setSelection","useQueryPersistedState","queryKey","defaults","behavior","filtered","filterAutomationSelectionByQuery","filteredBuckets","filter","Array","from","some","repo","bucket","allPermissionedAutomations","allPermissionedAutomationKeys","onToggleFactory","useSelectionReducer","permissionedKeysOnScreen","filteredKeys","checkedAutomations","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","anyAutomationsVisible","height","PageHeader","Subtitle1","AutomationTabs","tab","AutomationSelectionInput","useDisabledButtonTooltipFix","AutomationBulkActionMenu","SpinnerWithText","NonIdealState","Body2","rel","CheckAllBox","totalCount","automaterialize","useAutomaterializeDaemonStatus","Tabs","selectedTabId","TabLink","borderRadius","backgroundColor","paused"],"sourceRoot":"","ignoreList":[]}
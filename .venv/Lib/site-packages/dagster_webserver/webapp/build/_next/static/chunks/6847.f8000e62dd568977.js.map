{"version":3,"file":"static/chunks/6847.f8000e62dd568977.js","mappings":"qXA2BO,IAAMA,EAAkB,OAAC,KAACC,CAAG,CAAqB,GACjD,CAACC,GAAIC,CAAK,cAAEC,CAAY,CAAC,CAAGH,EAC5B,CAACI,EAAYC,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAU,GAChDC,EAAcC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,IAAMH,GAAc,GAAQ,EAAE,EAExDI,EAAaD,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAC5B,MAAOE,IACL,GAAM,CAACC,QAAM,CAAC,CAAGD,EACXE,EAAQV,GAASS,CAAM,CAACT,EAAM,CAChCU,GAAS,YAAaA,GACxB,IAD+B,EACzBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAiBA,CAAC,CACtBC,QAASF,EAAME,OAAO,CACtBC,KAAM,QACNC,OAAQ,QACV,EAEJ,EACA,CAACd,EAAM,SAGT,EAKE,EALE,CAKF,8BACE,UAACe,EAAAA,EAAMA,CAAAA,CACLF,KAAM,UAACG,EAAAA,EAAIA,CAAAA,CAACC,KAAK,WACjBH,OAAO,SACPI,SAAUhB,EACViB,QAAS,IAAMhB,GAAc,YAC9B,cAGD,UAACiB,EAAAA,CAAiBA,CAAAA,CAChBC,OAAQnB,EACRoB,QAASjB,EACTE,WAAYA,EACZgB,aAAc,CAAC,CAACvB,EAAM,CAAEC,CAAY,OAjBjC,IAqBX,EAAE,SAEOuB,EAAuBC,CAAwB,CAAEC,CAA0B,EAClF,IAAMC,EAAaF,EAAUG,IAAI,CAACC,GAAG,CACnC,QAAiBH,SAAR,WAAQA,EAAAA,EAASI,KAAK,CAACC,EAAAA,EAAfL,KAAAA,EAAAA,EAAqBM,GAArBN,EAAqBM,GAAUC,EAAAA,EAAUA,CAACC,SAAS,GAGtE,MAAO,mBACFT,GAAAA,CACHU,QAASV,EAAUG,IAAI,CAACQ,MAAM,CAAG,EACjCC,OAAQZ,EAAUG,IAAI,CAACQ,MAAM,EAAIT,EAAWW,QAAQ,CAACL,EAAAA,EAAUA,CAACM,MAAM,EACtEC,SAAUb,EAAWc,KAAK,CAAC,GACzB,CAACR,EAAAA,EAAUA,CAACM,MAAM,CAAEN,EAAAA,EAAUA,CAACS,SAAS,CAAC,CAACJ,QAAQ,CAACK,KAGzD,CAiBO,IAAMC,EAAkB9C,GAAqC+C,EAAAA,EAAYA,CAACC,GAAG,CAAChD,EAAIiD,MAAM,EAAE,EAChE,GAC/BjD,EAAIkD,aAAa,EAAIC,EAAAA,EAAcA,CAACH,GAAG,CAAChD,EAAIiD,MAAM,EAAE,EAEtB,QAMHjD,EAIKA,EA6H9BA,EAtIF,GAAM,CAAC4B,UAAQ,OAAEwB,CAAK,KAAEpD,CAAG,CAAC,CAAGqD,EAEzBC,EAAYC,CAAAA,EAAAA,EAAAA,CAAAA,CAAqCA,CAACvD,GAClDwD,EAAWC,CAAAA,EAAAA,EAAAA,CAAAA,CAA6BA,CAACzD,GAEzC0D,QAAqB1D,GAAAA,OAAAA,EAAAA,EAAKkD,EAALlD,WAAKkD,EAALlD,KAAAA,EAAAA,EAAoB0D,GAApB1D,eAAsC,CAE3D2B,EAAYD,EAAuB2B,EAAM1B,SAAS,CAAEC,GACpD+B,EA5BR,SAASC,CACS,CAChBR,CAAuB,CACvBxB,CAA0B,EAE1B,IAAMiC,EAAM7D,EAAI8D,IAAI,CAACC,IAAI,CAAC,GAAOC,EAAE/B,GAAG,GAAKgC,EAAAA,CAAUA,CAACC,aAAa,SACnE,EAGOxC,EACL,CAACI,KAAMqC,CAAAA,EAAAA,EAAAA,CAAAA,CAAaA,CAACf,EAAOS,EAAIO,KAAK,EAAEC,GAAG,CAACtC,GAAG,CAAC,GAAOuC,EAAEnD,IAAI,EAAGoD,MAAOV,EAAIO,KAAK,EAC/ExC,GAJO,IAMX,EAeuD5B,EAAKoD,EAAOxB,GAC3D4C,EAAAA,MAA0BxE,GAAAA,EAAI8D,IAAAA,EAAJ9D,KAAAA,EAAAA,EAAUyE,GAAVzE,CAAc,CAC5C,GAAOgE,EAAE/B,GAAG,GAAKgC,EAAAA,CAAUA,CAACS,aAAa,EAAgB,SAAZV,EAAEI,KAAK,EAGhDO,EAAYC,CAAAA,EAAAA,EAAAA,CAAAA,CAAiBA,GAC7BC,EAAyB,MAAOlD,IACpC,GAAI,CAAC3B,GAAO,CAACsD,GAAa,CAACtD,EAAI8E,kBAAkB,CAC/C,CADiD,MAGnD,IAAMC,EAAkBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAgCA,CAAC,KACvDhF,YACA2B,EACAsD,uBAAwB3B,EAAU4B,KAAK,CAACC,kBAAkB,CAAChE,IAAI,CAC/DiE,eAAgB9B,EAAU4B,KAAK,CAACG,UAAU,CAAClE,IAAI,EAEjD,OAAMwD,EAAUtD,OAAO,CAACrB,EAAK+E,GAAiB,EAChD,EAEMO,EAAkC,CACtCvE,KAAM,SACNwE,MAAO,IACPC,MAAO,wBACPC,QAAS,wEACTrE,SAAU,CAAC0B,EAAe9C,GAC1BqB,QAAS,GAAOsD,EAAUtD,OAAO,CAACrB,EAAK0F,EAAAA,GAAmBA,CAACC,SAAS,CAAEC,EAAEC,QAAQ,CAClF,EAEMC,EAAkC,CACtC/E,KAAM,eACNwE,MAAO5B,OAAAA,EAAAA,KAAAA,EAAAA,EAAqBY,KAAAA,GAAS,IACrCiB,MAAO,GADA7B,UAEPvC,SAAU,CAACuC,GAAuB,CAAEA,CAAAA,EAAoBjB,QAAQ,EAAIiB,EAAoBpB,MAAAA,EACxFkD,QACE,WAACM,MAAAA,WACE,GAAyBpC,EAAoBtB,OAAO,CAEjD,EAAqBK,QAAQ,CAE3B,qDADA,qEAFF,yEAIJ,UAACsD,EAAAA,CAAyBrE,UAAWgC,OAIzCtC,QAAS,IAAMwD,EAAuBlB,EACxC,EAEMsC,EAAsC,CAC1ClF,KAAM,KACNwE,MAAO5D,EAAU4C,KAAK,CACtBiB,MAAO7D,EAAUG,IAAI,CAACQ,MAAM,CAAG,EAAI,iBAAmB,gBACtDlB,SAAU,CAACO,EAAUU,OAAO,EAAI,CAAEV,CAAAA,EAAUe,QAAQ,EAAIf,EAAUY,MAAAA,EAClEkD,QACE,WAACM,MAAAA,WACE,EAAW1D,OAAO,CAEdV,EAAUe,QAAQ,CAEjB,6DADA,mDAFF,qDAIJ,UAACsD,EAAAA,CAAyBrE,UAAWA,OAGzCN,QAAS,IAAMwD,EAAuBlD,EACxC,EAEMuE,EAA0C,CAC9CnF,KAAM,gBACNyE,MAAO,gBACPpE,SAAU,CAAC0B,EAAe9C,IAAkC,IAA1B2B,EAAUG,IAAI,CAACQ,MAAM,CACvDmD,QAAS,8DACTpE,QAAS,UACP,GAAI,CAACrB,EAAIkD,aAAa,CAEpB,CAFsB,MACtBiD,QAAQC,IAAI,CAAC,wEACNC,QAAQC,OAAO,GAGxB,IAAMC,EAA8B5E,EAAUG,IAAI,CAACC,GAAG,CAAC,GAAO,GAAK,OAAFuC,EAAE,MAAIkC,IAAI,CAAC,KACtEC,EAA0B9E,EAAUG,IAAI,CAACC,GAAG,CAAC,GAAO,SAAW,OAAFuC,EAAE,OAAKkC,IAAI,CAAC,QAEzEE,EAAgBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAyBA,CAACvD,EAAOqD,GAAyBpC,GAAG,CAACtC,GAAG,CACrF,GAAU6E,EAAKzF,IAAI,CAGrB,OAAM0D,EAAuB,CAC3B/C,KAAM4E,EACNnC,MAAOgC,CACT,EACF,CACF,EAEMM,EAAqBC,EAAkB9G,GAEvC+G,EAAyC,CAC7ChG,KAAM,gBACNyE,MAAO,eACPpE,SAAU,CAACyF,EACXpB,QAAS,EAEL,kGADA,sDAEJpE,QAAUuE,GAAMjB,EAAUtD,OAAO,CAACrB,EAAK0F,EAAAA,GAAmBA,CAACsB,YAAY,CAAEpB,EAAEC,QAAQ,CACrF,CAYI,CAACnC,GACH,CAACuC,EAAUH,EAAMiB,EAAab,EAAa,CAACe,OADrB,CAC6B,IAClDC,EAAO9F,QAAQ,EAAG,EAClB8F,EAAO1B,KAAK,CACV,oHACJ,GAGF,IAAM2B,EAAU,CACd7B,EACAQ,EACAG,EACAC,EACAa,EACA/G,CAAAA,OAAAA,EAAAA,EAAIkD,aAAAA,EAAJlD,KAAAA,EAAAA,EAAmBoH,GAAnBpH,WAAiC,CAACsC,MAAAA,EAxBgB,CAClDvB,CAuB2CsG,IAvBrC,gBACN7B,MAAO,qBACPpE,SAAU,CAACyF,EACXpB,QAAS,EAEL,gHADA,sDAEJpE,QAAS,GAAOsD,EAAUtD,OAAO,CAACrB,EAAK0F,EAAAA,GAAmBA,CAAC4B,kBAAkB,CAAE1B,EAAEC,QAAQ,CAC3F,EAgBgE,KAC/D,CAAC0B,MAAM,CAACC,SACHC,EAAiB9F,EAAUU,OAAO,CACpC4D,EACAY,GAAsBrC,EACpBuC,EACApD,OAAAA,EAAAA,KAAAA,EAAAA,EAAqBtB,OAAAA,EACnByD,EACA,KAEF4B,EAAUhE,GAAsB+D,EAAiBA,EAAiBnC,EASxE,MACE,WAACqC,EAAAA,CAAKA,CAAAA,CAACC,UAAU,MAAMC,QAAS,YAC9B,UAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACH,UAAW,KAAK,WAC1B,UAACI,EAAAA,CAAoBA,CAAAA,CACnBC,SAAU,EACVP,QAASA,EACTP,QAASA,EACT3B,MACoB,MAAlBkC,EAAQnC,KAAK,CACR,qBACDmC,EAAQnC,KAAK,CACX,eAA6B,OAAdmC,EAAQnC,KAAK,CAAC,KAC7B,cAA4B,OAAdmC,EAAQlC,KAAK,EAEnCC,QApBN,CAoBeA,MApBXjC,EAAAA,KAAAA,EAAAA,EAAUiC,OAAAA,EAAS,CAAnBjC,KACKA,EAAAA,KAAAA,EAAAA,EAAUiC,OAAO,CAEnBzF,EAFEwD,sBAEwB,MAAG0E,EAAYC,EAAAA,EAAuBA,CAkBjEpH,IAAI,OAAEyC,EAAAA,KAAAA,EAAAA,EAAUzC,IAAI,CACpBK,KADMoC,IACIA,SAAAA,KAAAA,EAAAA,EAAUpC,GAAVoC,KAAUpC,GAAY,CAACpB,EAAIoI,sBAAsB,KAG7DrF,EAAAA,EAAYA,CAACC,GAAG,CAAChD,EAAIiD,MAAM,EAAoC,KAAhC,UAAClD,EAAAA,CAAgBC,IAAKA,IACtD2E,EAAU0D,gBAAgB,GAGjC,EAAE,EAE+B,OAAC,WAAC1G,CAAS,CAAoC,SAC9E,UAACoE,MAAAA,CAAIuC,MAAO,CAACC,YAAa,MAAM,WAC7B,CAAC5G,OAAAA,EAAAA,KAAAA,EAAAA,EAAWG,IAAAA,GAAQ,EAAE,EAAEC,GAAG,CAAC,GAC3B,UAACyG,OAAAA,CAAgBF,MAAO,CAACG,QAAS,OAAO,WAAI,KAAU,OAALC,IAAvCA,ucC7RV,IAAMC,EAAcC,IACzBC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,IAAMC,EAAKC,SAASC,aAAa,CAAC,0CAClC,GAAI,CAACF,EACH,EADO,KAGT,IAAMG,EAAeH,EAAGI,YAAY,CAAC,QAErC,OADAJ,EAAGK,YAAY,CAAC,OAAQP,GACjB,KACDK,GACFH,EAAGK,SADa,GACD,CAAC,OAAQF,EAE5B,CACF,EAAG,CAACL,EAAK,CACX,EAAE,2DC+BF,IAAMQ,EAAmB,IACvB,OAAQnG,GACN,KAAKoG,EAAAA,GAASA,CAACC,OAAO,CACpB,MAAO,yBACT,MAAKD,EAAAA,GAASA,CAACE,OAAO,CACpB,MAAO,0BACT,MAAKF,EAAAA,GAASA,CAACG,QAAQ,CACvB,KAAKH,EAAAA,GAASA,CAACI,OAAO,CACtB,KAAKJ,EAAAA,GAASA,CAACK,SAAS,CACtB,MAAO,0BACT,SACE,MAAO,cACX,CACF,EAEaC,EAAMC,CAAAA,EAAAA,EAAAA,IAAAA,CAAIA,CAAC,IACtB,GAAM,KAAC5J,CAAG,OAAEE,CAAK,CAAC,CAAGmD,EACf,CAACwG,EAAYC,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAA0BA,GACxD,CAACC,EAAgBC,EAAkB,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAAS,CACzEC,SAAU,YACVC,SAAU,CAACzI,UAAW,EAAE,CAC1B,GAEAgH,EAAW3I,EAAMoJ,EAAiBpJ,EAAIiD,EAA5B0F,IAAkC,EAAI,gBAChD0B,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CACdrK,EACI,GAAuEE,MAAAA,CAApE,CAACoK,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACtK,EAAIuK,YAAY,EAAIvK,EAAIuK,YAAY,CAAG,GAAG,KAG9DvK,MAAAA,CAHiEE,EAAMsK,KAAK,CAChF,EACA,GACA,MAAe,OAAXxK,EAAIiD,MAAM,CAAC,KACjB,QAAc,OAAN/C,IAGd,IAAMuK,EAAqB,CAACC,EAAiBC,KAC3C,IAAMC,EAAYD,EAAK5G,IAAI,CACzB,GAA8B,8BAApB6C,EAAKiE,UAAU,EAAoCjE,EAAK8D,OAAO,GAAKA,GAG5EE,GACFE,CAAAA,EAAAA,EAAAA,EAAAA,CADa,CACG,CACdC,KAAM,UAACC,EAAAA,EAAeA,CAAAA,CAACpK,MAAOgK,GAChC,EAEJ,EAEMK,EAAuB1G,IAC3B0F,EAAkB1F,GAClBuF,EAAc,mBACTD,GAAAA,CACHqB,SAAoB,MAAV3G,EAAgB,CAAC,CAAC4G,MAAO,QAAS/G,MAAOG,CAAK,EAAE,CAAG,EAAE,GAEnE,EAEM6G,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAAC,WAE1C,MACE,UAACC,EAAAA,CAAUA,CAACC,QAAQ,EAACnH,MAAOpE,WAC1B,UAACwL,EAAAA,CAAYA,CAAAA,CAAatL,MAAOA,WAC9B,GACC,iCACE,UAACuL,EAAAA,CAAaC,WAAYN,EAAgBT,KAAMA,IAChD,UAACgB,EAAAA,EAAmBA,CAAAA,CAAChB,KAAMA,WACxB,GACC,UAACiB,EAAAA,CACC5L,IAAKA,EACLE,MAAOA,EACPyK,KAAMA,EACNd,WAAYA,EACZjI,SAAUA,EACVoI,eAAgBA,EAChB6B,gBAAiB/B,EACjBmB,oBAAqBA,EACrBR,mBAAoBA,UAfbvK,IAwBzB,GAEMuL,EAAe,OAAC,YACpBC,CAAU,MACVf,CAAI,CAIL,GAMC,MALAmB,CAAAA,EAAAA,EAAAA,eAAAA,CAAeA,CAAC,KACV,EAAMC,OAAO,EAAE,EACNC,kBAAkB,CAACC,EAAAA,EAAcA,CAAC1C,OAAO,CAExD,EAAG,CAACmC,EAAYf,EAAK,EACd,IACT,EAcMuB,EAAmB,IACvB,OAAQC,GACN,IAAK,SACH,OAAOC,EAAAA,EAAOA,CAACC,MAAM,KAClB,SACH,OAAOD,EAAAA,EAAOA,CAACE,MAAM,SAErB,OAAOF,EAAAA,EAAOA,CAACG,UAAU,CAE/B,EAeMX,EAAc,OAAC,CACnB5L,KAAG,OACHE,CAAK,MACLyK,CAAI,YACJd,CAAU,UACVjI,CAAQ,gBACRoI,CAAc,iBACd6B,CAAe,CACfZ,qBAAmB,CACF,GACX,CAACkB,EAAcK,EAAgB,CAAGtC,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAAS,CACrEC,SAAU,UACVC,SAAU,CAACqC,QAASL,EAAAA,EAAOA,CAACG,UAAU,CACxC,GAEME,EAAUP,EAAiBC,GAE3B,CAACO,EAAeC,EAAiB,CAAGrM,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAgB,MAE5DsM,EAAeC,KAAKC,SAAS,CAACC,OAAOjL,IAAI,CAACF,EAASI,KAAK,EAAEgL,IAAI,IAC9DC,EAAWC,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAAML,KAAKM,KAAK,CAACP,GAAe,CAACA,EAAa,EAEjEQ,EAAepN,OAAAA,EAAAA,KAAAA,EAAAA,EAAKkD,KAALlD,QAAKkD,GAAiBmK,CAAAA,EAAAA,EAAAA,CAAAA,CAAiBA,OAACrN,EAAAA,KAAAA,EAAAA,EAAKkD,KAALlD,QAAkB,CAAE4B,EAASI,KAAK,EAEzFsL,EAAoBJ,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACzBE,GAAgBpD,GAAqC,MAAnBA,EACrCrD,CAAAA,EAAAA,EAAAA,CAAAA,CAAyBA,CAACyG,EAAcpD,GAAgB3F,GAAG,CAACtC,GAAG,CAAC,GAAOwL,EAAEpM,IAAI,EAC7E,EAAE,CACL,CAACiM,EAAcpD,EAAe,EAE3BrI,EAAYuL,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CACvB,IAAO,EACL3I,MAAOyF,EACPlI,KAAMwL,EACR,EACA,CAACA,EAAmBtD,EAAe,EAG/B,gBAACwD,CAAc,mBAAEC,CAAiB,sBAAEC,CAAoB,CAAC,CAC7DC,CAAAA,EAAAA,EAAAA,CAAAA,CAAgCA,CAAC,UAC/BV,oBACAK,WACA1L,EACAgM,oBAAoB,CACtB,GAEIC,EAAqBX,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAChC,IACEE,EACIvD,EAAWqB,QAAQ,CAChB3D,MAAM,CAAC,GAAOuG,EAAE3C,KAAK,EAAgB,UAAZ2C,EAAE3C,KAAK,EAChC4C,MAAM,CAAC,CAACC,EAAOF,KACdE,EAAMC,IAAI,IACLtH,CAAAA,EAAAA,EAAAA,CAAAA,CAAyBA,CAACyG,EAAcU,EAAE1J,KAAK,EAAEC,GAAG,CAACtC,GAAG,CAAC,GAAOwL,EAAEpM,IAAI,GAEpE6M,GACN,EAAE,EACP,EAAE,CACR,CAACnE,EAAWqB,QAAQ,CAAEkC,EAAa,EAG/Bc,EAAc,CAACxD,EAAiByD,KACpC,IAAMC,EAAQd,EAAkBe,OAAO,CAAC3D,GACpC4D,EAAqBtE,EACzB,GAAImE,EAAItI,QAAQ,CAGd,CAHgB,IA2MWmE,EAAwBU,EAI7BV,IA1MpBsE,CAsMgE,CAxMpD,CAAC,GAAG,IA4M0B,EA1MGA,IAAoB5D,EAuMhE,GAvMoB6D,CAuMiB7D,MAAAA,CAAjCV,EAAe,oBAA0B,OAARU,EAAQ,SApMN4D,EAuMI5D,EAvMgBA,EAwM3D,GAD0D,CAC1BA,MAAAA,CAA5BV,EAAe,eAAqB,OAARU,EAAQ,KAvM3C,MAGA,GAAiC,IAA7B4C,EAAkBhL,MAAM,EAAoB,CAAC,GAAG,CAAd8L,EACpCE,EAAqB,OAChB,CAELA,EAAqB,SAAiB,OAAR5D,EAAQ,KAGtC,IAAM8D,EAAiBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAgCA,CAAC7M,EAAS8M,eAAe,CAAEhE,EAC9E8D,IACFd,EAAqBc,EAEzB,CAGFvD,EAAoBqD,EACtB,EAEM,CAACK,EAAeC,EAAiB,CAAGtO,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA0B,MACtEuO,EAAeC,CAAAA,EAAAA,EAAAA,MAAAA,CAAMA,CAA4B,MAEvDhD,CAAAA,EAAAA,EAAAA,eAAAA,CAAeA,CAAC,KACd,GAAI+C,EAAaE,OAAO,CAAE,CACxB,IAAMC,EAAOH,EAAaE,OAAO,CAACE,OAAO,GAC5B,KAAK,CAAdD,EACFJ,EAAiB,OACRI,GAAY,IACrBJ,EAAiB,SAErB,CACF,EAAG,EAAE,EAEL,IAAMM,EAAkC,QAAlBP,EAChBQ,EAAmBR,aAMnBS,EAAiB,SACrBP,SAAAA,EAAAA,EAAaE,OAAAA,GAAbF,EAAsBQ,SAAtBR,CAAgC,CAAC,KACjCD,EAAiB,MACnB,EACMU,EAAc,SAClBT,SAAAA,EAAAA,EAAaE,OAAO,GAApBF,EAAsBQ,SAAtBR,CAAgC,CAAC,IACjCD,EAAiB,KACnB,EAoFA,MACE,+BACE,UAACW,EAAAA,CAAmBA,CAAAA,CAClBC,IAAKX,EACLY,KAAK,WACLC,WAAW,YACXC,oBAAqB,GACrBC,aAAc,GACdC,MAAOC,CA1FElO,GACR5B,EAIDA,EAJA,CAAM,YAIW,EAAIoN,EAErB,UAAC2C,EAAAA,CAAaA,CAAAA,CAACC,OAAO,uBACpB,UAACC,EAAAA,EAAUA,CAAAA,CACT9I,QAAS,CACP+I,KAAMC,EAAAA,EAAcA,CAACC,eAAe,EAEtCC,eACE,WAACvI,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACH,UAAW,MAAO0I,WAAY,SAAUC,IAAK,EAAE,YACzD,UAACC,EAAAA,CAAOA,CAAAA,CAACC,QAASvB,EAAgB,WAAa,kBAC7C,UAACjO,EAAAA,EAAMA,CAAAA,CACLF,KAAM,UAACG,EAAAA,EAAIA,CAAAA,CAACC,KAAM+N,EAAgB,kBAAoB,kBACtD7N,QAAS6N,EAAgBI,EAAcF,MAG3C,UAACsB,EAAAA,EAAgBA,CAAAA,CACf1Q,IAAKA,EACLoD,MAAOgK,EACPxL,SAAUA,EACVD,UAAWA,OAIjBzB,MAAOA,EACPkD,MAAOgK,EACPxL,SAAUA,EACVD,UAAWA,EACXuM,YAAaA,EACbyC,eAAgB1F,EAChB2F,YAAa/G,EAAW+G,WAAW,KAMpC,UAACC,EAAAA,CAAaA,CAAAA,CAAC9P,KAAK,QAAQyE,MAAM,mCAtChC,UAACsL,EAAAA,EAAsBA,CAAAA,CAAC5Q,MAAOA,GAuC1C,EAiDmB0B,GACbmP,cAAe,GACfC,OACE,UAACjB,EAAAA,CAAaA,CAAAA,CAACC,OAAO,gBACpB,WAACiB,EAAAA,WACC,UAACC,EAAAA,EAAWA,CAAAA,CACVzE,QAASA,EACT0E,aA5MMC,CA4MQC,EA5MQ7E,EAAgBJ,EAAAA,EAAO,CAACgF,EAAG,EA6MjD7J,OAAQsC,EACRyH,YAAazF,EACb7J,MAAOiL,EACPrL,SAAUA,EACV6L,kBAAmBA,EACnB8D,mBAAoB7D,EACpBhB,cAAeA,EACf8E,OAAQ7G,EAAK6G,MAAM,CACnBC,kBAAmBtC,EACnBuC,eAAgBvC,EAAmBG,EAxHvB,SACxBT,GAuH6D8C,MAvH7D9C,EAAAA,EAAaE,OAAO,GAApBF,EAAsBQ,SAAtBR,CAAgC,CAAC,GACjCD,EAAiB,SACnB,IAsDM5O,OAAAA,EAAAA,KAAAA,EAAAA,EAAKiD,KAALjD,CAAKiD,IAAW,SAEhB,UAAC4N,EAAAA,CAAaA,CAAAA,CACZ9P,KAAK,gBACLyE,MAAM,aACNoM,YAAY,wDACZC,OACE,UAACC,EAAAA,EAAIA,CAAAA,CAACC,GAAIC,CAAAA,EAAAA,EAAAA,EAAAA,CAAmBA,CAAC,CAAC,CAAC7G,MAAO,SAAU/G,MAAO,QAAQ,EAAE,WAAG,uBAOzEqI,IAAYL,EAAAA,EAAOA,CAACG,UAAU,CAE9B,CAFgC,EAEhC,OAAC0F,EAAAA,CAAkBA,CAAAA,CACjBtH,KAAMA,EACNpD,OAAQsC,EACRqI,eAAgBrE,EAChBsE,UAAW,GAA8B,OAA3BtF,KAAKC,SAAS,CAACjD,IAC7BjI,SAAUA,IAIZ6L,EAEA,UAAC2E,EAAAA,CAA0BA,CAAAA,CACzBC,EAHiB,KAGT5E,EAAoB,CAACvN,EAAO,eAAgBuN,EAAkB,CAAG,EAAE,CAC3ED,eAAgBA,EAChB8E,cAAelG,EAAAA,EAAO,CAACK,EAAQ,CAC/B8F,iBAAkB5F,IAIjB,UAAC6F,EAAAA,CAAqBC,KAAMhG,YAqCvC,EAEMwE,EAAgByB,EAAAA,EAAMA,CAAC3M,GAAG,gGAM1ByM,EAAuB,OAAC,MAACC,CAAI,CAAkB,GACnD,MACE,UAAC3K,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CACJH,UAAW,MACX+K,KAAM,EACNrC,WAAY,SACZsC,eAAgB,QAClB,EACAtK,MAAO,CAACuK,WAAYC,EAAAA,EAAwB,EAAE,WAE9C,UAACjC,EAAAA,CAAaA,CAAAA,CACZrL,MAAO,yBAA8B,OAALiN,GAChC1R,KAAK,UACL6Q,YAAY,+EAIpB,gVCxbO,IAAMmB,GAAoB,IAC/B,GAAM,KAAC/S,CAAG,CAAC,CAAGqD,EACR2P,EAAO1I,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACtK,EAAIuK,YAAY,EAQ7C,MAAC0I,CAAI,CAAElH,SAAO,CAAC,CAPDmH,CAAAA,CAOIC,CAPJD,EAAAA,EAAAA,CAAQA,CAC1BE,GACA,CACEC,UAAW,CAACnT,MAAOF,EAAIC,EAAE,OACzB+S,CACF,GAIF,GAAIjH,GAAW,CAACkH,GAA+C,OAAO,CAA9CA,EAAKK,kBAAkB,CAACzI,UAAU,CACxD,OAAO,KAGT,IAAM0I,EAAcP,EAAOhT,EAAIwT,mBAAmB,CAAGP,EAAKK,kBAAkB,CAACC,WAAW,CAExF,MAAO,UAACE,EAAAA,EAAuBA,CAAAA,CAACF,YAAaA,GAC/C,EAAE,GAE8BG,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,0TClB5B,IAAMC,GAAe,IAC1B,GAAM,CAAC3T,KAAG,CAAC,CAAGqD,EACR2P,EAAO1I,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACtK,EAAIuK,YAAY,EAC7C4I,EAAcD,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAA0CU,GAAkB,CACtFP,UAAW,CAACnT,MAAOF,EAAIC,EAAE,OACzB+S,EACAa,YAAa,UACf,GAEMC,EAAY5G,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACxB,GAAM,MAAC+F,CAAI,CAAC,CAAGE,EACXrR,EAAO,KAKX,MAJImR,SAAAA,KAAAA,EAAAA,CAAAA,CAAMK,kBAAkB,CAACzI,UAAAA,IAAe,OAAO,CACjD/I,EAAOmR,EAAKK,kBAAkB,CAACS,MAAM,CAAChS,GAAG,CAAC,GAAOiS,EAAE/R,IAAG,EAGjD+Q,EAAOiB,CAAAA,EAAAA,GAAAA,EAAAA,CAAeA,CAACjU,GAAO8B,CACvC,EAAG,CAACqR,EAAanT,EAAKgT,EAAK,EAE3B,MAAO,UAACkB,EAAAA,EAAqBA,CAAAA,CAACC,OAAO,IAACL,UAAWA,GACnD,EAAE,GAEuBJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,2BAAAA,8BC/BrB,IAAMU,GAAwB,GAA6B,KAAK,2ECIhE,IAAMC,GAAiB,OAAC,QAC7B9S,CAAM,SACNC,CAAO,OACP8S,CAAK,CAKN,GACC,MACE,WAACC,GAAAA,EAAMA,CAAAA,CAAChT,OAAQA,EAAQC,QAASA,EAASgT,oBAAoB,IAACC,iBAAiB,IAACjP,MAAM,kBACrF,UAACsC,EAAAA,CAAGA,CAAAA,CAAC4M,OAAQ,CAACC,WAAY,GAAIC,SAAU,EAAE,EAAG7M,KAAM,CAACwI,IAAK,EAAE,WACxD+D,EAAMvS,GAAG,CAAC,GACT,UAAC8S,GAAAA,CAAOA,CAAAA,CAAYC,KAAMA,GAAZA,MAGlB,UAACC,GAAAA,EAAYA,CAAAA,CAACC,SAAS,aACrB,UAAC/T,EAAAA,EAAMA,CAAAA,CAACI,QAASG,EAASR,OAAO,mBAAU,cAMnD,EAAE,mGCUK,IAAMiU,GAAmB,QA2BZjV,EACQA,KA5BK,KAACA,CAAG,OAAEkV,CAAK,CAAqC,GACzEC,EAAoBnV,EAAIoV,oBAAoB,CAE5C,CAACC,EAAeC,EAAiB,CAAGhV,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAgB,MAE5D,eAACiV,CAAa,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,GAAAA,CAAUA,EACvC,SAACC,CAAO,CAAC,CAAGF,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACG,GAAAA,EAAuBA,EAE9CC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,GAEpB,CAACC,EAAU,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAG7BC,GAAAA,EAA+BA,EAE3BC,EAAuB,cAEvBC,CAAJ,SAAIA,EAAAA,CADS,MAAMJ,EAAU,CAACzC,UAAW,CAACnT,MAAOF,EAAIC,EAAE,CAAC,IAC/CgT,IAAAA,EAALiD,KAAAA,EAAAA,EAAWD,GAAXC,iBAAWD,EAAsB,CACnC,MAAMpV,CAAAA,EAAAA,GAAAA,CAAAA,CAAiBA,CAAC,CACtBG,OAAQ,UACRD,KAAM,eACND,QAAS,yBACX,EAEJ,EAEMqV,EAAUC,CAAAA,EAAAA,GAAAA,EAAAA,CAA2BA,CAAC,CAC1ChR,cAAc,QAAEpF,EAAAA,EAAIqW,gBAAAA,EAAJrW,KAAAA,EAAAA,EAAsBoF,GAAtBpF,WAAoC,CACpDiF,sBAAsB,QAAEjF,EAAAA,EAAIqW,gBAAAA,EAAJrW,KAAAA,EAAAA,EAAsBiF,GAAtBjF,mBAA4C,KACpEA,EACAkV,OACF,GAEA,MACE,WAACnP,MAAAA,WACC,WAAC4B,GAAAA,CAAKA,CAAAA,CAACC,UAAU,MAAMC,QAAS,YAC9B,UAACuM,GAAqBA,CAAClU,MAAOF,EAAIC,EAAE,GACnCkW,EAAQG,EADalC,YACC,CACrB,UAAC5D,EAAAA,CAAOA,CAAAA,CAACC,QAAS0F,EAAQG,cAAc,CAAEC,2BAA2B,aACnE,UAACtV,EAAAA,EAAMA,CAAAA,CAACF,KAAM,UAACG,EAAAA,EAAIA,CAAAA,CAACC,KAAMgV,EAAQpV,IAAI,GAAMK,QAAQ,aACjD+U,EAAQK,KAAK,KAIlB,UAACC,GAAAA,CAAYA,CAAAA,CAAC1V,KAAM,UAACG,EAAAA,EAAIA,CAAAA,CAACC,KAAMgV,EAAQpV,IAAI,GAAMgR,GAAIoE,EAAQpE,EAAE,UAC7DoE,EAAQK,KAAK,GAGlB,UAACvV,EAAAA,EAAMA,CAAAA,CAACF,KAAM,UAACG,EAAAA,EAAIA,CAAAA,CAACC,KAAK,QAAUE,QAAS,IAAMiU,EAAiB,mBAAW,yBAG7EtV,EAAI0W,QAAQ,EAAI1W,EAAI0W,QAAQ,CAACpU,MAAM,CAClC,UAACkO,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,aAAakG,SAAS,MAAMC,cAAc,eACzD,UAAC3V,EAAAA,EAAMA,CAAAA,CAACF,KAAM,UAACG,EAAAA,EAAIA,CAAAA,CAACC,KAAK,gBAAkBE,QAAS,IAAMiU,EAAiB,aAE3E,KACH,CAACuB,CAAAA,EAAAA,GAAAA,CAAAA,CAAaA,CAAC7W,IAAQA,EAAI8W,mBAAmB,CAC7C,UAACC,GAAAA,EAAOA,CAAAA,CACNJ,SAAS,eACTlG,QACE,WAACuG,GAAAA,EAAIA,CAAAA,WACF,CAACH,EAAAA,GAAAA,CAAAA,CAAaA,CAAC7W,GAwCZ,KAvCF,iCACE,UAACwQ,EAAAA,CAAOA,CAAAA,CACNC,QAAQ,sCACRkG,SAAS,OACTC,cAAc,eAEd,UAACK,GAAAA,EAAQA,CAAAA,CACPC,KAAK,sBACLnW,KAAK,uBAELM,QAAS,IAAM8V,OAAOC,IAAI,CAAC,GAAmCpX,MAAAA,CAAhCuV,EAAc,oBAAyB,OAAPvV,EAAIC,EAAE,OAGvED,EAAIiD,MAAM,GAAKoG,EAAAA,GAASA,CAACgO,MAAM,CAC9B,UAACJ,GAAAA,EAAQA,CAAAA,CACPK,QAAQ,SACRvW,KAAK,qBACLmW,KAAK,sBACLlW,OAAO,OACPK,QAAS,IAAMiU,EAAiB,oBAEhC,KACHH,GAAqBoC,GAAAA,CAAgBA,CACpC,UAACN,GAAAA,EAAQA,CAAAA,CACPK,QAAQ,SACRvW,KAAK,aACLmW,KAAK,yBACLlW,OAAO,OACPK,QAAS,IAAMiU,EAAiB,aAEhC,KACHtV,EAAIwX,sBAAsB,EAAIzU,GAAAA,EAAYA,CAACC,GAAG,CAAChD,EAAIiD,MAAM,EACxD,UAACgU,GAAAA,EAAQA,CAAAA,CACPC,KAAK,yBACLnW,KAAK,OACLM,QAAS4U,IAET,QAGPjW,EAAI8W,mBAAmB,CACtB,UAACG,GAAAA,EAAQA,CAAAA,CACPlW,KAAK,SACLmW,KAAK,SACLlW,OAAO,SACPK,QAAS,IAAMiU,EAAiB,YAEhC,iBAIR,UAACrU,EAAAA,EAAMA,CAAAA,CAACF,KAAM,UAACG,EAAAA,EAAIA,CAAAA,CAACC,KAAK,oBAEzB,QAEN,UAACsW,GAAAA,CAAeA,CAAAA,CACdlW,OAA0B,WAAlB8T,EACR7T,QAAS,IAAM8T,EAAiB,MAChCpF,KAAMlQ,EAAIkQ,IAAI,CACdwH,cAAe1X,EAAI0X,aAAa,CAChC5T,KAAM9D,EAAI8D,IAAI,CACdoR,MAAOA,IAERlV,EAAIiD,MAAM,GAAKoG,EAAAA,GAASA,CAACgO,MAAM,CAC9B,UAACM,GAAAA,CAAuBA,CAAAA,CACtB3X,IAAKA,EACLuB,OAA0B,mBAAlB8T,EACR7T,QAAS,IAAM8T,EAAiB,QAEhC,KACHH,GAAqBoC,GAAAA,CAAgBA,CACpC,UAACA,GAAAA,CAAgBA,CAAAA,CACfrX,MAAOF,EAAIC,EAAE,CACbsB,OAA0B,YAAlB8T,EACR7T,QAAS,IAAM8T,EAAiB,QAEhC,KACHtV,EAAI8W,mBAAmB,CACtB,UAACc,GAAAA,CAAcA,CAAAA,CACbrW,OAA0B,WAAlB8T,EACR7T,QAAS,IAAM8T,EAAiB,MAChC7U,WAAY,KACNT,EAAIqW,gBAAgB,CACtBT,CADwB,CAChB3H,IAAI,CACV4J,CAAAA,EAAAA,GAAAA,EAAAA,CAAqBA,CAAC,CACpBC,SAAU9X,EAAIqW,gBAAgB,CAACjR,cAAc,CAC7C2S,aAAc/X,EAAIqW,gBAAgB,CAACpR,sBAAsB,CACzDsF,aAAcvK,EAAIuK,YAAY,OAC9B2K,EACA8C,KAAM,OACR,IAGF1C,EAAiB,KAErB,EACA2C,mBAAoB,IAAM3C,EAAiB,aAC3C7T,aAAc,CAAC,CAACzB,EAAIC,EAAE,CAAC,CAAED,EAAIG,YAAY,IAEzC,KACHH,EAAIkY,sBAAsB,CACzB,UAAC5W,GAAAA,CAAiBA,CAAAA,CAChBC,OAA0B,cAAlB8T,EACR7T,QAAS,IAAM8T,EAAiB,MAChC7U,WAAY,KACViV,GACF,EACAjU,aAAc,CAAC,CAACzB,EAAIC,EAAE,CAAC,CAAED,EAAIG,YAAY,IAEzC,KACHH,EAAI0W,QAAQ,EAAI1W,EAAI0W,QAAQ,CAACpU,MAAM,CAClC,UAAC+R,GAAcA,CACb9S,OAA0B,GADb8S,OACLgB,EACRf,MAAOtU,EAAI0W,QAAQ,CACnBlV,QAAS,IAAM8T,EAAiB,QAEhC,OAGV,EAAE,+DCnNK,IAAM6C,GAAgB,OAAC,SAACpM,CAAO,KAAE/L,CAAG,CAA6C,GACtF,MACE,iCACGA,OAAAA,EAAAA,KAAAA,EAAAA,EAAKoY,KAALpY,IAAKoY,EACJ,UAACrB,GAAAA,EAAOA,CAAAA,CACNsB,gBAAgB,QAChBC,UAAU,SACV7H,QACE,UAAC3I,EAAAA,CAAGA,CAAAA,CAACyQ,QAAS,YACZ,UAACC,GAAAA,EAAgBA,CAAAA,CAACxY,IAAKA,EAAK+L,QAASA,eAIzC,UAAC0M,EAAAA,CAAGA,CAAAA,CAAC1X,KAAK,oBACR,UAAC2X,GAAAA,CAAgBA,CAAAA,CACfC,UAAW3Y,EAAIoY,SAAS,CACxBQ,WAAY,CAACC,aAAa,EAAMC,cAAc,CAAK,QAIvD9Y,EAAI+Y,UAAU,CAChB,UAACN,EAAAA,CAAGA,CAAAA,CAAC1X,KAAK,oBACR,UAAC2X,GAAAA,CAAgBA,CAAAA,CACfC,UAAW3Y,EAAI+Y,UAAU,CACzBH,WAAY,CAACC,aAAa,EAAMC,cAAc,CAAK,WAGrD5Q,EACHlI,OAAAA,EAAAA,KAAAA,EAAAA,EAAKoY,KAALpY,IAAc,UAAIA,EAAAA,KAAAA,EAAAA,EAAKgZ,KAALhZ,EAAKgZ,EACtB,UAACjC,GAAAA,EAAOA,CAAAA,CACNsB,gBAAgB,QAChBC,UAAU,SACV7H,QACE,UAAC3I,EAAAA,CAAGA,CAAAA,CAACyQ,QAAS,YACZ,UAACC,GAAAA,EAAgBA,CAAAA,CAACxY,IAAKA,EAAK+L,QAASA,eAIzC,UAAC0M,EAAAA,CAAGA,CAAAA,CAAC1X,KAAK,iBACR,UAACyH,OAAAA,CAAKF,MAAO,CAAC2Q,mBAAoB,cAAc,WAC7CjZ,SAAAA,KAAAA,EAAAA,EAAKoY,SAAAA,EACFc,CAAAA,EAAAA,GAAAA,EAAAA,CAA4BA,CAC1B,CAAClZ,OAAAA,EAAAA,KAAAA,EAAAA,EAAKgZ,KAALhZ,EAAKgZ,EAAU,KAAQG,KAAKC,GAAG,GAAC,CAAKpZ,OAAAA,EAAAA,KAAAA,EAAAA,EAAKoY,KAALpY,IAAKoY,EAAY,KAEzD,UAIR,OAGV,EAAE,4ECzCK,IAAMiB,GAAgB,OAAC,qBAACC,CAAmB,iBAAEC,CAAe,QAAEC,CAAM,CAAQ,GAC3E,CAACC,EAAaC,EAAe,CAAGpZ,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACzC,CAACqZ,EAAUC,EAAY,CAAGtZ,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACnCS,EAAOwY,IAAoBtV,GAAAA,CAAUA,CAAC4V,YAAY,CAAG,WAAa,UAClE,MAAC1Y,CAAI,gBAAEiE,CAAc,wBAAEH,CAAsB,CAAC,CAAGqU,EACjDQ,EAAcC,CAAAA,EAAAA,GAAAA,EAAAA,CAAgBA,CAAC3U,EAAgBH,GAE/C+U,EAAU,CACd,CACExD,MAAO,QAA4E,OAApE+C,IAAoBtV,GAAAA,CAAUA,CAAC4V,YAAY,CAAG,WAAa,UAC1E9H,GAAIkI,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAC1BH,EACA,GAA8E3Y,MAAAA,CAA3EoY,IAAoBtV,GAAAA,CAAUA,CAAC4V,YAAY,CAAG,aAAe,WAAW,KAAQ,OAAL1Y,GAElF,EACA,CACEqV,MAAO,oBACPnV,QAAS,IAAMqY,GAAe,EAChC,EACA,CACElD,MAAO,iBACPnV,QAAS,IAAMuY,GAAY,EAC7B,EACD,CAED,MACE,iCACE,UAACM,GAAAA,CAAiBA,CAAAA,CAACF,QAASA,EAAS/G,KAAM,CAAChR,IAAK,cAAemC,MAAOjD,CAAI,WACzE,UAACsX,EAAAA,CAAGA,CAAAA,CAAC1X,KAAMA,WACT,WAAC+G,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACH,UAAW,KAAK,YAC1B,UAACY,OAAAA,UAAK,oBACN,UAACzC,MAAAA,CAAIuC,MAAO,CAAC6R,SAAU,OAAO,WAC5B,UAACC,GAAAA,CAAcA,CAAAA,CAAClD,KAAM/V,aAK9B,UAACkZ,GAAAA,CAAiBA,CAAAA,CAChB9Y,OAAQkY,EACRa,eAAe,OACf9Y,QAAS,IAAMkY,GAAe,GAC9BJ,oBAAqBA,EACrBE,OAAQA,IAEV,UAACe,GAAAA,CAAaA,CAAAA,CACZhZ,OAAQoY,EACRnY,QAAS,IAAMoY,GAAY,GAC3BN,oBAAqBA,EACrBE,OAAQA,MAIhB,EAAE,oDC9DF,IAAMgB,GAAW,IAAIC,KAAKC,QAAQ,CAACC,UAAUC,QAAQ,CAAE,CAACC,YAAa,MAAM,GAY9DC,GAAmC,QA8D1BC,EAGAA,KAjE2B,WAACjH,CAAS,cAAEkH,CAAY,CAAQ,GACzE,CAACD,EAAgBE,EAAkB,CAAG3a,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAwB,MAEtE4a,EAAahO,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAClB,IAAI4G,EAAU,CAAC9G,IAAI,CAAC,CAACgH,EAAGmH,IAAMX,GAASY,OAAO,CAACpH,EAAEgE,IAAI,CAACxR,IAAI,CAAC,KAAM2U,EAAEnD,IAAI,CAACxR,IAAI,CAAC,OACnF,CAACsN,EAAU,EAEd,MACE,iCACE,UAACiD,GAAAA,EAAOA,CAAAA,CACNuB,UAAU,SACV7H,QACE,WAAC1K,MAAAA,CAAIuC,MAAO,CAAC+S,MAAO,OAAO,YACzB,UAACvT,EAAAA,CAAGA,CAAAA,CAACyQ,QAAS,CAAC3D,SAAU,EAAGD,WAAY,EAAE,EAAG2G,OAAO,SAAShT,MAAO,CAACiT,WAAY,GAAG,WAAG,yBAGvF,UAACzT,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACH,UAAW,SAAU2I,IAAK,EAAE,EACnCgI,QAAS,CAAC3D,SAAU,EAAE,EACtBtM,MAAO,CAACkT,UAAW,QAASC,UAAW,MAAM,WAE5CP,EAAWnZ,GAAG,CAAC,IACd,IAAM2Z,EAAMC,CAAAA,EAAAA,GAAAA,CAAAA,CAAsBA,CAACC,EAAU,CAC3CC,KAAM,aACNC,WAAYd,CACd,GACA,MACE,WAAClT,EAAAA,CAAGA,CAAAA,CAEFyQ,QAAS,CAAC3D,SAAU,EAAGmH,KAAM,GAAIC,MAAO,EAAE,EAC1CjU,KAAM,CACJH,UAAW,MACXgL,eAAgB,gBAChBtC,WAAY,SACZC,IAAK,EACP,EACAjI,MAAO,CAAC2T,SAAU,QAAQ,YAE1B,WAACnU,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACH,UAAW,MAAO0I,WAAY,SAAUC,IAAK,CAAC,EACrDjI,MAAO,CAAC2T,SAAU,QAAQ,YAE1B,UAAC/a,EAAAA,EAAIA,CAAAA,CAACC,KAAK,UACX,UAACiZ,GAAAA,CAAcA,CAAAA,CAAClD,KAAM0E,EAAS5D,IAAI,CAACxR,IAAI,CAAC,UAE3C,UAAC0V,GAAAA,CAAUA,CAAAA,CACT7a,QAAS,IAAM4Z,EAAkB,CAACkB,aAAcP,EAAS5D,IAAI,cAAEgD,CAAY,GAC3E1S,MAAO,CAAC8T,WAAY,QAAQ,WAC7B,sBApBIV,EAyBX,QAINrD,gBAAgB,iBAEhB,UAACI,EAAAA,CAAGA,CAAAA,CAAC1X,KAAK,gCAAuB,2BAEnC,UAACsb,GAAAA,CAAsBA,CAAAA,CACrBF,aAAcpB,OAAAA,QAAAA,EAAAA,KAAAA,EAAAA,EAAgBoB,YAAAA,EAAhBpB,EAAgC,EAAE,CAChDxZ,OADcwZ,CACL,CAACA,EACVvZ,QAAS,IAAMyZ,EAAkB,MACjCqB,aAAcvB,OAAAA,QAAAA,EAAAA,KAAAA,EAAAA,EAAgBC,YAAAA,EAAhBD,EAAgC,OAItD,EAAE,CAJoBA,oRC/Cf,IAAMwB,GAAU,SA2GgBvc,EA1GrCwc,CAAAA,EAAAA,GAAAA,EAAAA,CAAgBA,GAEhB,GAAM,OAACtc,CAAK,CAAC,CAAGuc,CAAAA,EAAAA,EAAAA,CAAAA,CAASA,GACzBpS,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CAACnK,EAAQ,OAAyB,OAAlBA,EAAMsK,KAAK,CAAC,EAAG,IAAO,OAKtD,GAAM,MAACyI,CAAI,CAAElH,SAAO,CAAC,CAHDmH,CAAAA,CAGIC,CAHJD,EAAAA,EAAAA,CAAQA,CAAsCwJ,GAAgB,CAChFrJ,UAAW,OAACnT,CAAK,CACnB,GAGMF,EAAMiT,OAAAA,EAAAA,KAAAA,EAAAA,EAAMK,MAANL,YAAwB,CAACpI,UAAU,IAAK,MAAQoI,EAAKK,kBAAkB,CAAG,KAChFqJ,QAAa3c,EAAAA,KAAAA,EAAAA,EAAK8E,KAAL9E,aAAuB,CAEpCsD,EAAYC,CAAAA,EAAAA,GAAAA,CAAAA,CAAqCA,CAACvD,GAClD8Z,EAAcxW,OAAAA,EAAAA,KAAAA,EAAAA,EAAW4B,KAAAA,EAC3B6U,CAAAA,EAAAA,CADgBzW,EAChByW,EAAAA,CAAgBA,CAACzW,EAAU4B,KAAK,CAACG,UAAU,CAAClE,IAAI,CAAEmC,EAAU4B,KAAK,CAACC,kBAAkB,CAAChE,IAAI,EACzF,KAEE+T,EAAQhI,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CACnB,IAAM,CAAC,CAAElN,IAAOsD,GAAasZ,CAAAA,EAAAA,GAAAA,EAAAA,CAAeA,CAACtZ,EAAU4B,KAAK,CAAElF,EAAIuK,aAAY,EAC9E,CAACvK,EAAKsD,EAAU,EAGZuZ,EAAqB3P,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAChC,IAAMlN,SAAAA,KAAAA,EAAAA,EAAK8D,IAAI,CAACC,IAAI,CAAC,GAASF,EAAI5B,GAAG,GAAKgC,GAAAA,CAAUA,CAAC6Y,kBAAiB,GAAK,KAC3E,CAAC9c,EAAI,EAGD+c,EAAc7P,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC1B,GAAI4M,EAAa,CACf,IAAMhW,EAAO9D,OAAAA,EAAAA,KAAAA,EAAAA,EAAK8D,IAAAA,CAAL9D,EAAa,EAAE,CACtBgd,EAAUlZ,EAAKC,IAAI,CAAC,GAASF,EAAI5B,GAAG,GAAKgC,GAAAA,CAAUA,CAACgZ,MAAM,EAEhE,GAAID,EAAS,CACX,IAAME,EAAmBpZ,EAAKC,IAAI,CAChC,GAASF,EAAI5B,GAAG,GAAKgC,GAAAA,CAAUA,CAAC4V,YAAY,EAAIhW,EAAI5B,GAAG,GAAKgC,GAAAA,CAAUA,CAACkZ,UAAU,EAEnF,GAAID,EAAkB,CACpB,IAAM5D,EAA2C,CAC/CnY,KAAM+b,EAAiB9Y,KAAK,CAC5BgB,eAAgB0U,EAAY3Y,IAAI,CAChC8D,uBAAwB6U,EAAYsD,QAAQ,EAE9C,MAAO,CACL5D,OAAQwD,EAAQ5Y,KAAK,CACrBmV,gBAAiB2D,EAAiBjb,GAAG,CAGrCqX,qBACF,CACF,CACF,CACF,CAEA,OAAO,IACT,EAAG,CAACtZ,EAAK8Z,EAAY,EAEfuD,QAAerd,EAAAA,KAAAA,EAAAA,EAAK8D,IAAI,CAACC,IAAI,CAAC,GAASF,EAAI5B,GAAG,GAAKgC,GAAAA,CAAUA,CAACqZ,SAAS,EAE7E,MACE,WAACvX,MAAAA,CACCuC,MAAO,CACLG,QAAS,OACT8U,cAAe,SACfC,SAAU,EACVnC,MAAO,OACPoC,OAAQ,OACRxB,SAAU,QACZ,YAEA,UAACnU,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACH,UAAW,MAAO0I,WAAY,YAAY,EACjDhI,MAAO,CACLqO,SAAU,WACV+G,OAAQ,CACV,WAEA,UAACC,EAAAA,CAAUA,CAAAA,CACTnY,MAAO,UAACoY,GAAAA,CAAe5d,IAAKA,EAAKE,MAAOA,IACxC4D,KACE9D,EACE,WAAC8H,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACH,UAAW,MAAO0I,WAAY,aAAcC,IAAK,GAAIsN,KAAM,MAAM,YAC3E,UAACC,GAAAA,EAAYA,CAAAA,CAAC7a,OAAQjD,EAAIiD,MAAM,GAC/B,CAACqH,EAAAA,EAAAA,EAAAA,CAAqBA,CAACtK,EAAIuK,YAAY,EAWpC,KAVF,WAACkO,EAAAA,CAAGA,CAAAA,CAAC1X,KAAK,gBAAM,SACP,IACP,UAACgd,GAAAA,CAAiBA,CAAAA,CAChBxT,YAAY,OAAEvK,EAAAA,KAAAA,EAAAA,EAAKuK,KAALvK,OAAiB,CAC/Bge,oBAAqBlE,GAAe,eACpCmE,WAAYtB,EACZ3N,KAAK,QACLkG,MAAOA,OAIZ6H,EACC,UAAC1D,GAAaA,CACZC,SADYD,WACS0D,EAAYzD,mBAAmB,CACpDC,gBAAiBwD,EAAYxD,eAAe,CAC5CC,OAAQuD,EAAYvD,MAAM,GAE1B,KACH6D,GAAgB,UAACa,GAAAA,CAAMA,CAAAA,CAACra,IAAKwZ,IAC9B,UAAC1J,GAAYA,CAAC3T,IAAKA,IAAN2T,CACb,SAACZ,GAAiBA,CAAC/S,IAAKA,IACxB,UAACmY,GAAaA,CAACnY,IAAKA,EAAK+L,GAAXoM,KAAoBpM,IACjC8Q,GAAAA,CAAAA,OAAsB7c,EAAAA,EAAIoH,cAAAA,EAAJpH,KAAAA,EAAAA,EAAoBsC,GAApBtC,GAA0B,EAC/C,UAAC8a,GAAgCA,CAC/BhH,UAAW9T,EAAIoH,cAAc,CAC7B4T,CAF+BF,YAEjB+B,EAAmBzY,KAAK,GAEtC,QAEJ,KAEN4X,MAAOhc,EAAM,UAACiV,GAAgBA,CAACjV,IAAKA,EAAKkV,MAAXD,IAA8B,SAGhE,UAACkJ,GAAAA,CAAQlL,KAAMA,EAAM/S,MAAOA,MAGlC,EAAE,GAIaqc,GAET4B,GAAU,CAFM5B,EAAC,CAGrB,GAAM,MAACtJ,CAAI,CAAE/S,OAAK,CAAC,CAAGmD,EAEtB,GAAI,CAAC4P,GAAQ,CAACA,EAAKK,kBAAkB,CACnC,CADqC,MAC9B,KAGT,GAA2C,OAAO,CAA9CL,EAAKK,kBAAkB,CAACzI,UAAU,CACpC,MACE,UAAC/C,EAAAA,CAAGA,CAAAA,CAACyQ,QAAS,CAAC3D,SAAU,EAAE,WACzB,UAAC/D,EAAAA,CAAaA,CAAAA,CACZ9P,KAAK,QACLyE,MAAM,eACNoM,YAAY,kEAMpB,GAAIiF,CAAAA,EAAAA,GAAAA,CAAAA,CAAaA,CAAC5D,EAAKK,kBAAkB,EAAG,CAC1C,IAAM8K,EAAcC,CAAAA,EAAAA,GAAAA,CAAAA,CAAiBA,CAACpL,EAAKK,kBAAkB,SAC7D,EAEI,UAACxL,CAFY,CAEZA,CAAGA,CAAAA,CAACyQ,QAAS,CAAC3D,SAAU,EAAE,WACzB,UAAC/D,EAAAA,CAAaA,CAAAA,CACZ9P,KAAK,MACLyE,MAAM,iCACNoM,YACE,WAAC9J,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACH,UAAW,MAAO0I,WAAY,QAAQ,YAChD,UAAC0D,IAAAA,CAAEpL,KAAMwV,EAAaE,OAAO,SAASC,IAAI,sBAAa,4BAGvD,UAACrd,EAAAA,EAAIA,CAAAA,CAACC,KAAK,cAAc6N,KAAM,GAAI1G,MAAO,CAACkW,WAAY,CAAC,WAQhE,UAAC1W,EAAAA,CAAGA,CAAAA,CAACyQ,QAAS,CAAC3D,SAAU,EAAE,WACzB,UAAC/D,EAAAA,CAAaA,CAAAA,CACZ9P,KAAK,MACLyE,MAAM,wBACNoM,YAAY,0EAKtB,CAEA,MAAO,UAACjI,EAAGA,CAAAA,IAAMsJ,EAAKK,kBAAkB,CAAEpT,MAAOA,GACnD,EAEMwc,GAAiBhJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,KAUtB+K,GAAAA,EAAiBA,EAGfb,GAAiB,OAAC,KAAC5d,CAAG,OAAEE,CAAK,CAA+C,GAC1Ewe,EAAcxR,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CACzB,UAAMlN,EAAAA,KAAAA,EAAAA,EAAK8D,IAAI,CAAT9D,IAAc,CAAC,GAAS6D,EAAI5B,GAAG,GAAKgC,GAAAA,CAAUA,CAAC0a,QAAQ,EAC7D,CAAC3e,EAAI,SAGP,EAEI,WAFa,EAEZ4e,EAASA,CAAAA,WACR,UAAC9M,EAAAA,EAAIA,CAAAA,CAACC,GAAG,QAAQzJ,MAAO,CAACuW,MAAO/L,EAAAA,EAAgB,EAAE,WAAG,SAGpD,MACD,UAAChB,EAAAA,EAAIA,CAAAA,CAACC,GAAI+M,CAAAA,EAAAA,GAAAA,CAAAA,CAAeA,CAACJ,EAAYta,KAAK,CAAE,QAASkE,MAAO,CAACuW,MAAO/L,EAAAA,EAAgB,EAAE,WACpF4L,EAAYta,KAAK,GAEnB,MACAlE,EAAMsK,KAAK,CAAC,EAAG,MAMpB,WAACoU,EAAAA,EAASA,CAAAA,CAACtW,MAAO,CAACG,QAAS,OAAQ8U,cAAe,MAAOhN,IAAK,CAAC,YAC9D,UAACuB,EAAAA,EAAIA,CAAAA,CAACC,GAAG,iBAAQ,SACjB,UAACvJ,OAAAA,UAAK,MACN,UAACA,OAAAA,CAAKF,MAAO,CAACyW,WAAYC,EAAAA,CAAUA,CAACC,SAAS,WAAI/e,EAAMsK,KAAK,CAAC,EAAG,OAGvE,gsBCnPO,IAAM+P,EAAgB,OAAC,QAC5Bf,CAAM,WACNb,CAAS,qBACTW,CAAmB,CACnB/X,QAAM,SACNC,CAAO,CAOR,GACC,MACE,WAAC+S,EAAAA,EAAMA,CAAAA,CACLhT,OAAQA,EACRC,QAASA,EACT8G,MAAO,CAAC+S,MAAO,OAAQlB,SAAU,SAAUqD,SAAU,OAAO,EAC5DhY,MACE,UAACgD,OAAAA,UACEmQ,EACC,WAACnQ,OAAAA,WACC,WAACA,OAAAA,WAAK,YAAU8Q,EAAoBnY,IAAI,CAAC,QACzC,UAACuX,EAAAA,CAAgBA,CAAAA,CAACC,UAAWA,EAAWC,WAAY,CAACC,aAAa,CAAI,OAGxE,WAACrQ,OAAAA,WAAK,YAAU8Q,EAAoBnY,IAAI,gBAK7CqY,EACC,UAAC0F,EAAAA,CAAsB5F,oBAAqBA,EAAqBE,OAAQA,IACvE,KAEJ,UAAC1R,EAAAA,CAAGA,CAAAA,CAAC+K,WAAYC,EAAAA,EAAwB,GAAIxK,MAAO,CAACoV,OAAQ,EAAG/G,SAAU,UAAU,WAClF,UAAC5B,EAAAA,EAAYA,CAAAA,CAACC,SAAS,aACrB,UAAC/T,EAAAA,EAAMA,CAAAA,CAACI,QAASG,WAAS,eAKpC,EAAE,EAOmC,OAAC,qBAAC8X,CAAmB,QAAEE,CAAM,CAAoB,GAC9E,CAACvG,MAAI,SAAElH,CAAO,CAAC,CAAGmH,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAC9BiM,EACA,CACE9L,UAAW,qBAACiG,SAAqBE,CAAM,EACvC4F,6BAA6B,CAC/B,GAGIC,EACJpM,OAAAA,EAAAA,KAAAA,EAAAA,EAAMqM,MAANrM,iBAA6B,CAACpI,UAAAA,IAAe,2BAC7CoI,EAAAA,KAAAA,EAAAA,EAAMqM,MAANrM,iBAA6B,CAACsM,IAAAA,QAC1BtM,EAAAA,KAAAA,EAAAA,EAAMqM,MAANrM,iBAA6B,CAACsM,IAAI,CAACC,SAAS,CAACH,MAAM,MACnDnX,EAEN,GAAI6D,EACF,MACE,CAFS,EAET,OAACjE,EAAAA,CAAGA,CAAAA,CAACQ,MAAO,CAACmV,OAAQ,GAAG,EAAG1V,KAAM,CAAC6K,eAAgB,SAAUtC,WAAY,QAAQ,WAC9E,UAACmP,EAAAA,CAAeA,CAAAA,CAACjJ,MAAM,oBAK7B,GAAI6I,GAAUA,EAAO/c,MAAM,CACzB,CAD2B,KAEzB,UAACwF,EAAAA,CAAGA,CAAAA,CAACQ,MAAO,CAACmV,OAAQ,GAAG,EAAG1V,KAAM,CAACH,UAAW,QAAQ,WACnD,UAAC8X,EAAAA,CAAwBA,CAAAA,CAACL,OAAQA,MAKxC,IAAMM,EACJ1M,OAAAA,EAAAA,KAAAA,EAAAA,EAAMqM,MAANrM,iBAA6B,CAACpI,UAAAA,IAAe,mBACzCoI,QAAAA,KAAAA,EAAAA,EAAAA,uBAA6B,CAACsM,IAAI,CAACtc,MAAM,MACzCiF,EACAqR,EACJtG,SAAAA,KAAAA,EAAAA,CAAAA,CAAMqM,uBAAuB,CAACzU,UAAAA,IAAe,yBACzCoI,EAAAA,KAAAA,EAAAA,EAAMqM,MAANrM,iBAA6B,CAACsG,eAAe,MAC7CrR,EACA0X,EACgB,WAApBrG,EACI,2FACoB,aAApBA,EACE,+FACArR,OAER,MACE,UAACJ,EAAAA,CAAGA,CAAAA,CACFQ,MAAO,CAACmV,OAAQ,GAAG,EACnB1V,KAAM,CAAC6K,eAAgB,SAAUtC,WAAY,QAAQ,EACrDiI,QAAS,CAAC3D,SAAU,EAAE,WAEtB,UAAC/D,EAAAA,CAAaA,CAAAA,CACZ9P,KAAK,aACLyE,MAAM,qBACNoM,YACE,WAAC9J,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACH,UAAW,SAAU2I,IAAK,EAAE,YACtC,UAACxK,MAAAA,UAAI,uIAIW,YAAf4Z,GACC,iCACE,UAAC5Z,MAAAA,UAAI,2HAIL,UAACA,MAAAA,UAAI,6EAKb8L,OACE+N,GACE,UAACC,EAAAA,EAAoBA,CAAAA,CACnBjX,KAAMgX,EACNE,UAAW,UAAC5e,EAAAA,EAAIA,CAAAA,CAACC,KAAK,yBACvB,0BAQb,EAAE,EAE4BuS,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAmB7BqM,EAAAA,CAA8BA","sources":["webpack://_N_E/../ui-core/src/runs/RunActionButtons.tsx","webpack://_N_E/../ui-core/src/hooks/useFavicon.tsx","webpack://_N_E/../ui-core/src/runs/Run.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetCheckTags.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetTags.tsx","webpack://_N_E/../ui-core/src/runs/RunAlertNotifications.oss.tsx","webpack://_N_E/../ui-core/src/runs/RunPoolsDialog.tsx","webpack://_N_E/../ui-core/src/runs/RunHeaderActions.tsx","webpack://_N_E/../ui-core/src/runs/RunTimingTags.tsx","webpack://_N_E/../ui-core/src/runs/TickTagForRun.tsx","webpack://_N_E/../ui-core/src/assets/AutomaterializeTagWithEvaluation.tsx","webpack://_N_E/../ui-core/src/runs/RunRoot.tsx","webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx"],"sourcesContent":["import {Box, Button, Group, Icon} from '@dagster-io/ui-components';\nimport {useCallback, useState} from 'react';\n\nimport {IRunMetadataDict, IStepState} from './RunMetadataProvider';\nimport {doneStatuses, failedStatuses} from './RunStatuses';\nimport {DagsterTag} from './RunTag';\nimport {getReexecutionParamsForSelection} from './RunUtils';\nimport {StepSelection} from './StepSelection';\nimport {TerminationDialog, TerminationDialogResult} from './TerminationDialog';\nimport {RunFragment, RunPageFragment} from './types/RunFragments.types';\nimport {useJobAvailabilityErrorForRun} from './useJobAvailabilityErrorForRun';\nimport {useJobReexecution} from './useJobReExecution';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {GraphQueryItem, filterByQuery} from '../app/GraphQueryImpl';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {LaunchButtonConfiguration, LaunchButtonDropdown} from '../launchpad/LaunchButton';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\ninterface RunActionButtonsProps {\n  run: RunPageFragment;\n  selection: StepSelection;\n  graph: GraphQueryItem[];\n  metadata: IRunMetadataDict;\n}\n\nexport const CancelRunButton = ({run}: {run: RunFragment}) => {\n  const {id: runId, canTerminate} = run;\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n  const closeDialog = useCallback(() => setShowDialog(false), []);\n\n  const onComplete = useCallback(\n    async (result: TerminationDialogResult) => {\n      const {errors} = result;\n      const error = runId && errors[runId];\n      if (error && 'message' in error) {\n        await showSharedToaster({\n          message: error.message,\n          icon: 'error',\n          intent: 'danger',\n        });\n      }\n    },\n    [runId],\n  );\n\n  if (!runId) {\n    return null;\n  }\n\n  return (\n    <>\n      <Button\n        icon={<Icon name=\"cancel\" />}\n        intent=\"danger\"\n        disabled={showDialog}\n        onClick={() => setShowDialog(true)}\n      >\n        Terminate\n      </Button>\n      <TerminationDialog\n        isOpen={showDialog}\n        onClose={closeDialog}\n        onComplete={onComplete}\n        selectedRuns={{[runId]: canTerminate}}\n      />\n    </>\n  );\n};\n\nfunction stepSelectionWithState(selection: StepSelection, metadata: IRunMetadataDict) {\n  const stepStates = selection.keys.map(\n    (key) => (key && metadata.steps[key]?.state) || IStepState.PREPARING,\n  );\n\n  return {\n    ...selection,\n    present: selection.keys.length > 0,\n    failed: selection.keys.length && stepStates.includes(IStepState.FAILED),\n    finished: stepStates.every((stepState) =>\n      [IStepState.FAILED, IStepState.SUCCEEDED].includes(stepState),\n    ),\n  };\n}\n\nfunction stepSelectionFromRunTags(\n  run: RunFragment,\n  graph: GraphQueryItem[],\n  metadata: IRunMetadataDict,\n) {\n  const tag = run.tags.find((t) => t.key === DagsterTag.StepSelection);\n  if (!tag) {\n    return null;\n  }\n  return stepSelectionWithState(\n    {keys: filterByQuery(graph, tag.value).all.map((k) => k.name), query: tag.value},\n    metadata,\n  );\n}\n\nexport const canRunAllSteps = (run: Pick<RunFragment, 'status'>) => doneStatuses.has(run.status);\nexport const canRunFromFailure = (run: Pick<RunFragment, 'status' | 'executionPlan'>) =>\n  run.executionPlan && failedStatuses.has(run.status);\n\nexport const RunActionButtons = (props: RunActionButtonsProps) => {\n  const {metadata, graph, run} = props;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const jobError = useJobAvailabilityErrorForRun(run);\n\n  const artifactsPersisted = run?.executionPlan?.artifactsPersisted;\n\n  const selection = stepSelectionWithState(props.selection, metadata);\n  const currentRunSelection = stepSelectionFromRunTags(run, graph, metadata);\n  const currentRunIsFromFailure = run.tags?.some(\n    (t) => t.key === DagsterTag.IsResumeRetry && t.value === 'true',\n  );\n\n  const reexecute = useJobReexecution();\n  const reexecuteWithSelection = async (selection: StepSelection) => {\n    if (!run || !repoMatch || !run.pipelineSnapshotId) {\n      return;\n    }\n    const executionParams = getReexecutionParamsForSelection({\n      run,\n      selection,\n      repositoryLocationName: repoMatch.match.repositoryLocation.name,\n      repositoryName: repoMatch.match.repository.name,\n    });\n    await reexecute.onClick(run, executionParams, false);\n  };\n\n  const full: LaunchButtonConfiguration = {\n    icon: 'cached',\n    scope: '*',\n    title: 'All steps in root run',\n    tooltip: 'Re-execute the pipeline run from scratch. Shift-click to adjust tags.',\n    disabled: !canRunAllSteps(run),\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.ALL_STEPS, e.shiftKey),\n  };\n\n  const same: LaunchButtonConfiguration = {\n    icon: 'linear_scale',\n    scope: currentRunSelection?.query || '*',\n    title: 'Same steps',\n    disabled: !currentRunSelection || !(currentRunSelection.finished || currentRunSelection.failed),\n    tooltip: (\n      <div>\n        {!currentRunSelection || !currentRunSelection.present\n          ? 'Re-executes the same step subset used for this run if one was present.'\n          : !currentRunSelection.finished\n            ? 'Wait for all of the steps to finish to re-execute the same subset.'\n            : 'Re-execute the same step subset used for this run:'}\n        <StepSelectionDescription selection={currentRunSelection} />\n      </div>\n    ),\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    onClick: () => reexecuteWithSelection(currentRunSelection!),\n  };\n\n  const selected: LaunchButtonConfiguration = {\n    icon: 'op',\n    scope: selection.query,\n    title: selection.keys.length > 1 ? 'Selected steps' : 'Selected step',\n    disabled: !selection.present || !(selection.finished || selection.failed),\n    tooltip: (\n      <div>\n        {!selection.present\n          ? 'Select a step or type a step subset to re-execute.'\n          : !selection.finished\n            ? 'Wait for the steps to finish to re-execute them.'\n            : 'Re-execute the selected steps with existing configuration:'}\n        <StepSelectionDescription selection={selection} />\n      </div>\n    ),\n    onClick: () => reexecuteWithSelection(selection),\n  };\n\n  const fromSelected: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From selected',\n    disabled: !canRunAllSteps(run) || selection.keys.length !== 1,\n    tooltip: 'Re-execute the pipeline downstream from the selected steps.',\n    onClick: async () => {\n      if (!run.executionPlan) {\n        console.warn('Run execution plan must be present to launch from-selected execution');\n        return Promise.resolve();\n      }\n\n      const selectionForPythonFiltering = selection.keys.map((k) => `${k}*`).join(',');\n      const selectionForUIFiltering = selection.keys.map((k) => `name:\"${k}\"+`).join(' or ');\n\n      const selectionKeys = filterRunSelectionByQuery(graph, selectionForUIFiltering).all.map(\n        (node) => node.name,\n      );\n\n      await reexecuteWithSelection({\n        keys: selectionKeys,\n        query: selectionForPythonFiltering,\n      });\n    },\n  };\n\n  const fromFailureEnabled = canRunFromFailure(run);\n\n  const fromFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, skipping steps that completed successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_FAILURE, e.shiftKey),\n  };\n\n  const fromAssetFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From asset failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, selecting only assets that did not complete successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_ASSET_FAILURE, e.shiftKey),\n  };\n\n  if (!artifactsPersisted) {\n    [selected, same, fromFailure, fromSelected].forEach((option) => {\n      option.disabled = true;\n      option.title =\n        'Retry and re-execute are only enabled on persistent storage. Try rerunning with a different storage configuration.';\n    });\n  }\n\n  const options = [\n    full,\n    same,\n    selected,\n    fromSelected,\n    fromFailure,\n    run.executionPlan?.assetSelection.length ? fromAssetFailure : null,\n  ].filter(Boolean) as LaunchButtonConfiguration[];\n  const preferredRerun = selection.present\n    ? selected\n    : fromFailureEnabled && currentRunIsFromFailure\n      ? fromFailure\n      : currentRunSelection?.present\n        ? same\n        : null;\n\n  const primary = artifactsPersisted && preferredRerun ? preferredRerun : full;\n\n  const tooltip = () => {\n    if (jobError?.tooltip) {\n      return jobError?.tooltip;\n    }\n    return run.hasReExecutePermission ? undefined : DEFAULT_DISABLED_REASON;\n  };\n\n  return (\n    <Group direction=\"row\" spacing={8}>\n      <Box flex={{direction: 'row'}}>\n        <LaunchButtonDropdown\n          runCount={1}\n          primary={primary}\n          options={options}\n          title={\n            primary.scope === '*'\n              ? `Re-execute all (*)`\n              : primary.scope\n                ? `Re-execute (${primary.scope})`\n                : `Re-execute ${primary.title}`\n          }\n          tooltip={tooltip()}\n          icon={jobError?.icon}\n          disabled={jobError?.disabled || !run.hasReExecutePermission}\n        />\n      </Box>\n      {!doneStatuses.has(run.status) ? <CancelRunButton run={run} /> : null}\n      {reexecute.launchpadElement}\n    </Group>\n  );\n};\n\nconst StepSelectionDescription = ({selection}: {selection: StepSelection | null}) => (\n  <div style={{paddingLeft: '10px'}}>\n    {(selection?.keys || []).map((step) => (\n      <span key={step} style={{display: 'block'}}>{`* ${step}`}</span>\n    ))}\n  </div>\n);\n","import {useEffect} from 'react';\n\nexport const useFavicon = (href: string) => {\n  useEffect(() => {\n    const el = document.querySelector('link[rel=\"icon\"][type=\"image/svg+xml\"]');\n    if (!el) {\n      return;\n    }\n    const previousHref = el.getAttribute('href');\n    el.setAttribute('href', href);\n    return () => {\n      if (previousHref) {\n        el.setAttribute('href', previousHref);\n      }\n    };\n  }, [href]);\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  ErrorBoundary,\n  Icon,\n  NonIdealState,\n  SplitPanelContainer,\n  SplitPanelContainerHandle,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {memo, useLayoutEffect, useMemo, useRef, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogType, LogsToolbar} from './LogsToolbar';\nimport {RunActionButtons} from './RunActionButtons';\nimport {RunContext} from './RunContext';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {runsPathWithFilters} from './RunsFilterInput';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {GanttChart, GanttChartLoadingState, GanttChartMode} from '../gantt/GanttChart';\nimport {toGraphQueryItems} from '../gantt/toGraphQueryItems';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useFavicon} from '../hooks/useFavicon';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {CompletionType, useTraceDependency} from '../performance/TraceContext';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\nimport {RunDagsterRunEventFragment, RunPageFragment} from './types/RunFragments.types';\nimport {\n  matchingComputeLogKeyFromStepKey,\n  useComputeLogFileKeyForSelection,\n} from './useComputeLogFileKeyForSelection';\nimport {useQueryPersistedLogFilter} from './useQueryPersistedLogFilter';\n\ninterface RunProps {\n  runId: string;\n  run?: RunPageFragment;\n}\n\nconst runStatusFavicon = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.FAILURE:\n      return '/favicon-run-failed.svg';\n    case RunStatus.SUCCESS:\n      return '/favicon-run-success.svg';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n    case RunStatus.CANCELING:\n      return '/favicon-run-pending.svg';\n    default:\n      return '/favicon.svg';\n  }\n};\n\nexport const Run = memo((props: RunProps) => {\n  const {run, runId} = props;\n  const [logsFilter, setLogsFilter] = useQueryPersistedLogFilter();\n  const [selectionQuery, setSelectionQuery] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n  });\n\n  useFavicon(run ? runStatusFavicon(run.status) : '/favicon.svg');\n  useDocumentTitle(\n    run\n      ? `${!isHiddenAssetGroupJob(run.pipelineName) ? run.pipelineName : ''} ${runId.slice(\n          0,\n          8,\n        )} [${run.status}]`\n      : `Run: ${runId}`,\n  );\n\n  const onShowStateDetails = (stepKey: string, logs: RunDagsterRunEventFragment[]) => {\n    const errorNode = logs.find(\n      (node) => node.__typename === 'ExecutionStepFailureEvent' && node.stepKey === stepKey,\n    );\n\n    if (errorNode) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={errorNode} />,\n      });\n    }\n  };\n\n  const onSetSelectionQuery = (query: string) => {\n    setSelectionQuery(query);\n    setLogsFilter({\n      ...logsFilter,\n      logQuery: query !== '*' ? [{token: 'query', value: query}] : [],\n    });\n  };\n\n  const logsDependency = useTraceDependency('RunLogs');\n\n  return (\n    <RunContext.Provider value={run}>\n      <LogsProvider key={runId} runId={runId}>\n        {(logs) => (\n          <>\n            <OnLogsLoaded dependency={logsDependency} logs={logs} />\n            <RunMetadataProvider logs={logs}>\n              {(metadata) => (\n                <RunWithData\n                  run={run}\n                  runId={runId}\n                  logs={logs}\n                  logsFilter={logsFilter}\n                  metadata={metadata}\n                  selectionQuery={selectionQuery}\n                  onSetLogsFilter={setLogsFilter}\n                  onSetSelectionQuery={onSetSelectionQuery}\n                  onShowStateDetails={onShowStateDetails}\n                />\n              )}\n            </RunMetadataProvider>\n          </>\n        )}\n      </LogsProvider>\n    </RunContext.Provider>\n  );\n});\n\nconst OnLogsLoaded = ({\n  dependency,\n  logs,\n}: {\n  dependency: ReturnType<typeof useTraceDependency>;\n  logs: LogsProviderLogs;\n}) => {\n  useLayoutEffect(() => {\n    if (!logs.loading) {\n      dependency.completeDependency(CompletionType.SUCCESS);\n    }\n  }, [dependency, logs]);\n  return null;\n};\n\ninterface RunWithDataProps {\n  run?: RunPageFragment;\n  runId: string;\n  selectionQuery: string;\n  logs: LogsProviderLogs;\n  logsFilter: LogFilter;\n  metadata: IRunMetadataDict;\n  onSetLogsFilter: (v: LogFilter) => void;\n  onSetSelectionQuery: (query: string) => void;\n  onShowStateDetails: (stepKey: string, logs: RunDagsterRunEventFragment[]) => void;\n}\n\nconst logTypeFromQuery = (queryLogType: string) => {\n  switch (queryLogType) {\n    case 'stdout':\n      return LogType.stdout;\n    case 'stderr':\n      return LogType.stderr;\n    default:\n      return LogType.structured;\n  }\n};\n\n/**\n * Note: There are two places we keep a \"step query string\" in the Run view:\n * selectionQuery and logsFilter.logsQuery.\n *\n * - selectionQuery is set when you click around in the Gannt view and is the\n *   selection used for re-execution, etc. When set, we autofill logsFilter.logsQuery.\n *\n * - logsFilter.logsQuery is used for filtering the logs. It can be cleared separately\n *   from the selectionQuery, so you can select a step but navigate elsewhere in the logs.\n *\n * We could revisit this in the future but I believe we iterated quite a bit to get to this\n * solution and we should avoid locking the two filter inputs together completely.\n */\nconst RunWithData = ({\n  run,\n  runId,\n  logs,\n  logsFilter,\n  metadata,\n  selectionQuery,\n  onSetLogsFilter,\n  onSetSelectionQuery,\n}: RunWithDataProps) => {\n  const [queryLogType, setQueryLogType] = useQueryPersistedState<string>({\n    queryKey: 'logType',\n    defaults: {logType: LogType.structured},\n  });\n\n  const logType = logTypeFromQuery(queryLogType);\n  const setLogType = (lt: LogType) => setQueryLogType(LogType[lt]);\n  const [computeLogUrl, setComputeLogUrl] = useState<string | null>(null);\n\n  const stepKeysJSON = JSON.stringify(Object.keys(metadata.steps).sort());\n  const stepKeys = useMemo(() => JSON.parse(stepKeysJSON), [stepKeysJSON]);\n\n  const runtimeGraph = run?.executionPlan && toGraphQueryItems(run?.executionPlan, metadata.steps);\n\n  const selectionStepKeys = useMemo(() => {\n    return runtimeGraph && selectionQuery && selectionQuery !== '*'\n      ? filterRunSelectionByQuery(runtimeGraph, selectionQuery).all.map((n) => n.name)\n      : [];\n  }, [runtimeGraph, selectionQuery]);\n\n  const selection = useMemo(\n    () => ({\n      query: selectionQuery,\n      keys: selectionStepKeys,\n    }),\n    [selectionStepKeys, selectionQuery],\n  );\n\n  const {logCaptureInfo, computeLogFileKey, setComputeLogFileKey} =\n    useComputeLogFileKeyForSelection({\n      stepKeys,\n      selectionStepKeys,\n      metadata,\n      defaultToFirstStep: false,\n    });\n\n  const logsFilterStepKeys = useMemo(\n    () =>\n      runtimeGraph\n        ? logsFilter.logQuery\n            .filter((v) => v.token && v.token === 'query')\n            .reduce((accum, v) => {\n              accum.push(\n                ...filterRunSelectionByQuery(runtimeGraph, v.value).all.map((n) => n.name),\n              );\n              return accum;\n            }, [] as string[])\n        : [],\n    [logsFilter.logQuery, runtimeGraph],\n  );\n\n  const onClickStep = (stepKey: string, evt: React.MouseEvent<any>) => {\n    const index = selectionStepKeys.indexOf(stepKey);\n    let nextSelectionQuery = selectionQuery;\n    if (evt.shiftKey) {\n      // shift-click to multi select steps, preserving quotations if present\n\n      if (index !== -1) {\n        // deselect the step if already selected\n        nextSelectionQuery = removeStepFromSelection(nextSelectionQuery, stepKey);\n      } else {\n        // select the step otherwise\n        nextSelectionQuery = addStepToSelection(nextSelectionQuery, stepKey);\n      }\n    } else {\n      // deselect the step if already selected\n      if (selectionStepKeys.length === 1 && index !== -1) {\n        nextSelectionQuery = '';\n      } else {\n        // select the step otherwise\n        nextSelectionQuery = `name:\"${stepKey}\"`;\n\n        // When only one step is selected, set the compute log key as well.\n        const matchingLogKey = matchingComputeLogKeyFromStepKey(metadata.logCaptureSteps, stepKey);\n        if (matchingLogKey) {\n          setComputeLogFileKey(matchingLogKey);\n        }\n      }\n    }\n\n    onSetSelectionQuery(nextSelectionQuery);\n  };\n\n  const [expandedPanel, setExpandedPanel] = useState<null | 'top' | 'bottom'>(null);\n  const containerRef = useRef<SplitPanelContainerHandle>(null);\n\n  useLayoutEffect(() => {\n    if (containerRef.current) {\n      const size = containerRef.current.getSize();\n      if (size === 100) {\n        setExpandedPanel('top');\n      } else if (size === 0) {\n        setExpandedPanel('bottom');\n      }\n    }\n  }, []);\n\n  const isTopExpanded = expandedPanel === 'top';\n  const isBottomExpanded = expandedPanel === 'bottom';\n\n  const expandBottomPanel = () => {\n    containerRef.current?.changeSize(0);\n    setExpandedPanel('bottom');\n  };\n  const expandTopPanel = () => {\n    containerRef.current?.changeSize(100);\n    setExpandedPanel('top');\n  };\n  const resetPanels = () => {\n    containerRef.current?.changeSize(50);\n    setExpandedPanel(null);\n  };\n\n  const gantt = (metadata: IRunMetadataDict) => {\n    if (!run) {\n      return <GanttChartLoadingState runId={runId} />;\n    }\n\n    if (run.executionPlan && runtimeGraph) {\n      return (\n        <ErrorBoundary region=\"gantt chart\">\n          <GanttChart\n            options={{\n              mode: GanttChartMode.WATERFALL_TIMED,\n            }}\n            toolbarActions={\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                <Tooltip content={isTopExpanded ? 'Collapse' : 'Expand'}>\n                  <Button\n                    icon={<Icon name={isTopExpanded ? 'collapse_arrows' : 'expand_arrows'} />}\n                    onClick={isTopExpanded ? resetPanels : expandTopPanel}\n                  />\n                </Tooltip>\n                <RunActionButtons\n                  run={run}\n                  graph={runtimeGraph}\n                  metadata={metadata}\n                  selection={selection}\n                />\n              </Box>\n            }\n            runId={runId}\n            graph={runtimeGraph}\n            metadata={metadata}\n            selection={selection}\n            onClickStep={onClickStep}\n            onSetSelection={onSetSelectionQuery}\n            focusedTime={logsFilter.focusedTime}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    return <NonIdealState icon=\"error\" title=\"Unable to build execution plan\" />;\n  };\n\n  const logContent = () => {\n    if (run?.status === 'QUEUED') {\n      return (\n        <NonIdealState\n          icon=\"arrow_forward\"\n          title=\"Run queued\"\n          description=\"This run is queued for execution and will start soon.\"\n          action={\n            <Link to={runsPathWithFilters([{token: 'status', value: 'QUEUED'}])}>\n              View queued runs\n            </Link>\n          }\n        />\n      );\n    }\n    if (logType === LogType.structured) {\n      return (\n        <LogsScrollingTable\n          logs={logs}\n          filter={logsFilter}\n          filterStepKeys={logsFilterStepKeys}\n          filterKey={`${JSON.stringify(logsFilter)}`}\n          metadata={metadata}\n        />\n      );\n    }\n    if (computeLogFileKey) {\n      return (\n        <CapturedOrExternalLogPanel\n          logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n          logCaptureInfo={logCaptureInfo}\n          visibleIOType={LogType[logType]}\n          onSetDownloadUrl={setComputeLogUrl}\n        />\n      );\n    }\n    return <NoStepSelectionState type={logType} />;\n  };\n\n  return (\n    <>\n      <SplitPanelContainer\n        ref={containerRef}\n        axis=\"vertical\"\n        identifier=\"run-gantt\"\n        firstInitialPercent={35}\n        firstMinSize={56}\n        first={gantt(metadata)}\n        secondMinSize={56}\n        second={\n          <ErrorBoundary region=\"logs\">\n            <LogsContainer>\n              <LogsToolbar\n                logType={logType}\n                onSetLogType={setLogType}\n                filter={logsFilter}\n                onSetFilter={onSetLogsFilter}\n                steps={stepKeys}\n                metadata={metadata}\n                computeLogFileKey={computeLogFileKey}\n                onSetComputeLogKey={setComputeLogFileKey}\n                computeLogUrl={computeLogUrl}\n                counts={logs.counts}\n                isSectionExpanded={isBottomExpanded}\n                toggleExpanded={isBottomExpanded ? resetPanels : expandBottomPanel}\n              />\n              {logContent()}\n            </LogsContainer>\n          </ErrorBoundary>\n        }\n      />\n    </>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst NoStepSelectionState = ({type}: {type: LogType}) => {\n  return (\n    <Box\n      flex={{\n        direction: 'row',\n        grow: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      style={{background: Colors.backgroundDefault()}}\n    >\n      <NonIdealState\n        title={`Select a step to view ${type}`}\n        icon=\"warning\"\n        description=\"Select a step on the Gantt chart or from the dropdown above to view logs.\"\n      />\n    </Box>\n  );\n};\n\nfunction removeStepFromSelection(selectionQuery: string, stepKey: string) {\n  return `(${selectionQuery}) and not name:\"${stepKey}\"`;\n}\n\nfunction addStepToSelection(selectionQuery: string, stepKey: string) {\n  return `(${selectionQuery}) or name:\"${stepKey}\"`;\n}\n","import {AssetCheckTagCollection} from './AssetTagCollections';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunAssetChecksQuery, RunAssetChecksQueryVariables} from './types/RunAssetCheckTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetCheckTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetChecksQuery, RunAssetChecksQueryVariables>(\n    RUN_ASSETS_CHECKS_QUERY,\n    {\n      variables: {runId: run.id},\n      skip,\n    },\n  );\n  const {data, loading} = queryResult;\n\n  if (loading || !data || data.pipelineRunOrError.__typename !== 'Run') {\n    return null;\n  }\n\n  const assetChecks = skip ? run.assetCheckSelection : data.pipelineRunOrError.assetChecks;\n\n  return <AssetCheckTagCollection assetChecks={assetChecks} />;\n};\n\nconst RUN_ASSETS_CHECKS_QUERY = gql`\n  query RunAssetChecksQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assetChecks {\n          name\n          assetKey {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","import {useMemo} from 'react';\n\nimport {AssetKeyTagCollection} from './AssetTagCollections';\nimport {assetKeysForRun} from './RunUtils';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunAssetsQuery, RunAssetsQueryVariables} from './types/RunAssetTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetsQuery, RunAssetsQueryVariables>(RUN_ASSETS_QUERY, {\n    variables: {runId: run.id},\n    skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const assetKeys = useMemo(() => {\n    const {data} = queryResult;\n    let keys = null;\n    if (data?.pipelineRunOrError.__typename === 'Run') {\n      keys = data.pipelineRunOrError.assets.map((a) => a.key);\n    }\n\n    return skip ? assetKeysForRun(run) : keys;\n  }, [queryResult, run, skip]);\n\n  return <AssetKeyTagCollection useTags assetKeys={assetKeys} />;\n};\n\nconst RUN_ASSETS_QUERY = gql`\n  query RunAssetsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assets {\n          id\n          key {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","export const RunAlertNotifications = (_props: {runId: string}) => null;\n","import {Box, Button, Dialog, DialogFooter} from '@dagster-io/ui-components';\n\nimport {PoolTag} from '../instance/PoolTag';\n\nexport const RunPoolsDialog = ({\n  isOpen,\n  onClose,\n  pools,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  pools: string[];\n}) => {\n  return (\n    <Dialog isOpen={isOpen} onClose={onClose} canOutsideClickClose canEscapeKeyClose title=\"Pools\">\n      <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12}}>\n        {pools.map((pool) => (\n          <PoolTag key={pool} pool={pool} />\n        ))}\n      </Box>\n      <DialogFooter topBorder>\n        <Button onClick={onClose} intent=\"primary\">\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Group, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {RunAlertNotifications} from 'shared/runs/RunAlertNotifications.oss';\nimport {RunMetricsDialog} from 'shared/runs/RunMetricsDialog.oss';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {QueuedRunCriteriaDialog} from './QueuedRunCriteriaDialog';\nimport {RunConfigDialog} from './RunConfigDialog';\nimport {RunPoolsDialog} from './RunPoolsDialog';\nimport {doneStatuses} from './RunStatuses';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {useMutation} from '../apollo-client';\nimport {isExternalRun} from './externalRuns';\nimport {RunFragment} from './types/RunFragments.types';\nimport {AppContext} from '../app/AppContext';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {RunStatus} from '../graphql/types';\nimport {FREE_CONCURRENCY_SLOTS_MUTATION} from '../instance/InstanceConcurrencyKeyInfo';\nimport {\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n} from '../instance/types/InstanceConcurrencyKeyInfo.types';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {workspacePipelineLinkForRun, workspacePipelinePath} from '../workspace/workspacePath';\n\ntype VisibleDialog =\n  | 'config'\n  | 'delete'\n  | 'terminate'\n  | 'queue-criteria'\n  | 'free_slots'\n  | 'metrics'\n  | 'pools'\n  | null;\n\nexport const RunHeaderActions = ({run, isJob}: {run: RunFragment; isJob: boolean}) => {\n  const runMetricsEnabled = run.hasRunMetricsEnabled;\n\n  const [visibleDialog, setVisibleDialog] = useState<VisibleDialog>(null);\n\n  const {rootServerURI} = useContext(AppContext);\n  const {refetch} = useContext(RunsQueryRefetchContext);\n\n  const history = useHistory();\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  const freeConcurrencySlots = async () => {\n    const resp = await freeSlots({variables: {runId: run.id}});\n    if (resp.data?.freeConcurrencySlots) {\n      await showSharedToaster({\n        intent: 'success',\n        icon: 'check_circle',\n        message: 'Freed concurrency slots',\n      });\n    }\n  };\n\n  const jobLink = workspacePipelineLinkForRun({\n    repositoryName: run.repositoryOrigin?.repositoryName,\n    repositoryLocationName: run.repositoryOrigin?.repositoryLocationName,\n    run,\n    isJob,\n  });\n\n  return (\n    <div>\n      <Group direction=\"row\" spacing={8}>\n        <RunAlertNotifications runId={run.id} />\n        {jobLink.disabledReason ? (\n          <Tooltip content={jobLink.disabledReason} useDisabledButtonTooltipFix>\n            <Button icon={<Icon name={jobLink.icon} />} disabled>\n              {jobLink.label}\n            </Button>\n          </Tooltip>\n        ) : (\n          <AnchorButton icon={<Icon name={jobLink.icon} />} to={jobLink.to}>\n            {jobLink.label}\n          </AnchorButton>\n        )}\n        <Button icon={<Icon name=\"tag\" />} onClick={() => setVisibleDialog('config')}>\n          View tags and config\n        </Button>\n        {run.allPools && run.allPools.length ? (\n          <Tooltip content=\"View pools\" position=\"top\" targetTagName=\"div\">\n            <Button icon={<Icon name=\"concurrency\" />} onClick={() => setVisibleDialog('pools')} />\n          </Tooltip>\n        ) : null}\n        {!isExternalRun(run) || run.hasDeletePermission ? (\n          <Popover\n            position=\"bottom-right\"\n            content={\n              <Menu>\n                {!isExternalRun(run) ? (\n                  <>\n                    <Tooltip\n                      content=\"Loadable in dagster-webserver-debug\"\n                      position=\"left\"\n                      targetTagName=\"div\"\n                    >\n                      <MenuItem\n                        text=\"Download debug file\"\n                        icon=\"download_for_offline\"\n                        // eslint-disable-next-line no-restricted-properties\n                        onClick={() => window.open(`${rootServerURI}/download_debug/${run.id}`)}\n                      />\n                    </Tooltip>\n                    {run.status === RunStatus.QUEUED ? (\n                      <MenuItem\n                        tagName=\"button\"\n                        icon=\"history_toggle_off\"\n                        text=\"View queue criteria\"\n                        intent=\"none\"\n                        onClick={() => setVisibleDialog('queue-criteria')}\n                      />\n                    ) : null}\n                    {runMetricsEnabled && RunMetricsDialog ? (\n                      <MenuItem\n                        tagName=\"button\"\n                        icon=\"asset_plot\"\n                        text=\"View container metrics\"\n                        intent=\"none\"\n                        onClick={() => setVisibleDialog('metrics')}\n                      />\n                    ) : null}\n                    {run.hasConcurrencyKeySlots && doneStatuses.has(run.status) ? (\n                      <MenuItem\n                        text=\"Free concurrency slots\"\n                        icon=\"lock\"\n                        onClick={freeConcurrencySlots}\n                      />\n                    ) : null}\n                  </>\n                ) : null}\n                {run.hasDeletePermission ? (\n                  <MenuItem\n                    icon=\"delete\"\n                    text=\"Delete\"\n                    intent=\"danger\"\n                    onClick={() => setVisibleDialog('delete')}\n                  />\n                ) : null}\n              </Menu>\n            }\n          >\n            <Button icon={<Icon name=\"expand_more\" />} />\n          </Popover>\n        ) : null}\n      </Group>\n      <RunConfigDialog\n        isOpen={visibleDialog === 'config'}\n        onClose={() => setVisibleDialog(null)}\n        mode={run.mode}\n        runConfigYaml={run.runConfigYaml}\n        tags={run.tags}\n        isJob={isJob}\n      />\n      {run.status === RunStatus.QUEUED ? (\n        <QueuedRunCriteriaDialog\n          run={run}\n          isOpen={visibleDialog === 'queue-criteria'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {runMetricsEnabled && RunMetricsDialog ? (\n        <RunMetricsDialog\n          runId={run.id}\n          isOpen={visibleDialog === 'metrics'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {run.hasDeletePermission ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            if (run.repositoryOrigin) {\n              history.push(\n                workspacePipelinePath({\n                  repoName: run.repositoryOrigin.repositoryName,\n                  repoLocation: run.repositoryOrigin.repositoryLocationName,\n                  pipelineName: run.pipelineName,\n                  isJob,\n                  path: '/runs',\n                }),\n              );\n            } else {\n              setVisibleDialog(null);\n            }\n          }}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.hasTerminatePermission ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            refetch();\n          }}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.allPools && run.allPools.length ? (\n        <RunPoolsDialog\n          isOpen={visibleDialog === 'pools'}\n          pools={run.allPools}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {RunTimingDetails} from './RunTimingDetails';\nimport {RunTimingFragment} from './types/RunTimingDetails.types';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const RunTimingTags = ({loading, run}: {loading: boolean; run: RunTimingFragment}) => {\n  return (\n    <>\n      {run?.startTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"schedule\">\n            <TimestampDisplay\n              timestamp={run.startTime}\n              timeFormat={{showSeconds: true, showTimezone: false}}\n            />\n          </Tag>\n        </Popover>\n      ) : run.updateTime ? (\n        <Tag icon=\"schedule\">\n          <TimestampDisplay\n            timestamp={run.updateTime}\n            timeFormat={{showSeconds: true, showTimezone: false}}\n          />\n        </Tag>\n      ) : undefined}\n      {run?.startTime && run?.endTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"timer\">\n            <span style={{fontVariantNumeric: 'tabular-nums'}}>\n              {run?.startTime\n                ? formatElapsedTimeWithoutMsec(\n                    (run?.endTime * 1000 || Date.now()) - run?.startTime * 1000,\n                  )\n                : '–'}\n            </span>\n          </Tag>\n        </Popover>\n      ) : null}\n    </>\n  );\n};\n","import {Box, MiddleTruncate, Tag} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {DagsterTag} from './RunTag';\nimport {InstigationSelector} from '../graphql/types';\nimport {TickDetailsDialog} from '../instigation/TickDetailsDialog';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TagActionsPopover} from '../ui/TagActions';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  instigationSelector: InstigationSelector;\n  instigationType: DagsterTag.SensorName | DagsterTag.ScheduleName;\n  tickId: string;\n}\n\nexport const TickTagForRun = ({instigationSelector, instigationType, tickId}: Props) => {\n  const [showDetails, setShowDetails] = useState(false);\n  const [showLogs, setShowLogs] = useState(false);\n  const icon = instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensors';\n  const {name, repositoryName, repositoryLocationName} = instigationSelector;\n  const repoAddress = buildRepoAddress(repositoryName, repositoryLocationName);\n\n  const actions = [\n    {\n      label: `View ${instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensor'}`,\n      to: workspacePathFromAddress(\n        repoAddress,\n        `${instigationType === DagsterTag.ScheduleName ? '/schedules' : '/sensors'}/${name}`,\n      ),\n    },\n    {\n      label: 'View tick details',\n      onClick: () => setShowDetails(true),\n    },\n    {\n      label: 'View tick logs',\n      onClick: () => setShowLogs(true),\n    },\n  ];\n\n  return (\n    <>\n      <TagActionsPopover actions={actions} data={{key: 'Launched by', value: name}}>\n        <Tag icon={icon}>\n          <Box flex={{direction: 'row'}}>\n            <span>Launched by&nbsp;</span>\n            <div style={{maxWidth: '140px'}}>\n              <MiddleTruncate text={name} />\n            </div>\n          </Box>\n        </Tag>\n      </TagActionsPopover>\n      <TickDetailsDialog\n        isOpen={showDetails}\n        tickResultType=\"runs\"\n        onClose={() => setShowDetails(false)}\n        instigationSelector={instigationSelector}\n        tickId={tickId}\n      />\n      <TickLogDialog\n        isOpen={showLogs}\n        onClose={() => setShowLogs(false)}\n        instigationSelector={instigationSelector}\n        tickId={tickId}\n      />\n    </>\n  );\n};\n","import {Box, ButtonLink, Icon, MiddleTruncate, Popover, Tag} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {EvaluationDetailDialog} from './AutoMaterializePolicyPage/EvaluationDetailDialog';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n\ntype OpenEvaluation = {\n  assetKeyPath: string[];\n  evaluationId: string;\n};\n\ninterface Props {\n  assetKeys: AssetKey[];\n  evaluationId: string;\n}\n\nexport const AutomaterializeTagWithEvaluation = ({assetKeys, evaluationId}: Props) => {\n  const [openEvaluation, setOpenEvaluation] = useState<OpenEvaluation | null>(null);\n\n  const sortedKeys = useMemo(() => {\n    return [...assetKeys].sort((a, b) => COLLATOR.compare(a.path.join('/'), b.path.join('/')));\n  }, [assetKeys]);\n\n  return (\n    <>\n      <Popover\n        placement=\"bottom\"\n        content={\n          <div style={{width: '400px'}}>\n            <Box padding={{vertical: 8, horizontal: 12}} border=\"bottom\" style={{fontWeight: 600}}>\n              Automation condition\n            </Box>\n            <Box\n              flex={{direction: 'column', gap: 16}}\n              padding={{vertical: 12}}\n              style={{maxHeight: '220px', overflowY: 'auto'}}\n            >\n              {sortedKeys.map((assetKey) => {\n                const url = assetDetailsPathForKey(assetKey, {\n                  view: 'automation',\n                  evaluation: evaluationId,\n                });\n                return (\n                  <Box\n                    key={url}\n                    padding={{vertical: 8, left: 12, right: 16}}\n                    flex={{\n                      direction: 'row',\n                      justifyContent: 'space-between',\n                      alignItems: 'center',\n                      gap: 16,\n                    }}\n                    style={{overflow: 'hidden'}}\n                  >\n                    <Box\n                      flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                      style={{overflow: 'hidden'}}\n                    >\n                      <Icon name=\"asset\" />\n                      <MiddleTruncate text={assetKey.path.join('/')} />\n                    </Box>\n                    <ButtonLink\n                      onClick={() => setOpenEvaluation({assetKeyPath: assetKey.path, evaluationId})}\n                      style={{whiteSpace: 'nowrap'}}\n                    >\n                      View evaluation\n                    </ButtonLink>\n                  </Box>\n                );\n              })}\n            </Box>\n          </div>\n        }\n        interactionKind=\"hover\"\n      >\n        <Tag icon=\"automation_condition\">Automation condition</Tag>\n      </Popover>\n      <EvaluationDetailDialog\n        assetKeyPath={openEvaluation?.assetKeyPath ?? []}\n        isOpen={!!openEvaluation}\n        onClose={() => setOpenEvaluation(null)}\n        evaluationID={openEvaluation?.evaluationId ?? ''}\n      />\n    </>\n  );\n};\n","import {\n  Box,\n  Colors,\n  FontFamily,\n  Icon,\n  NonIdealState,\n  PageHeader,\n  Subtitle1,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link, useParams} from 'react-router-dom';\n\nimport {Run} from './Run';\nimport {RunAssetCheckTags} from './RunAssetCheckTags';\nimport {RunAssetTags} from './RunAssetTags';\nimport {RUN_PAGE_FRAGMENT} from './RunFragments';\nimport {RunHeaderActions} from './RunHeaderActions';\nimport {RunStatusTag} from './RunStatusTag';\nimport {DagsterTag, RunTag} from './RunTag';\nimport {RunTimingTags} from './RunTimingTags';\nimport {getBackfillPath} from './RunsFeedUtils';\nimport {TickTagForRun} from './TickTagForRun';\nimport {getExternalRunUrl, isExternalRun} from './externalRuns';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunPageFragment} from './types/RunFragments.types';\nimport {RunRootQuery, RunRootQueryVariables} from './types/RunRoot.types';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AutomaterializeTagWithEvaluation} from '../assets/AutomaterializeTagWithEvaluation';\nimport {InstigationSelector} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nexport const RunRoot = () => {\n  useTrackPageView();\n\n  const {runId} = useParams<{runId: string}>();\n  useDocumentTitle(runId ? `Run ${runId.slice(0, 8)}` : 'Run');\n\n  const queryResult = useQuery<RunRootQuery, RunRootQueryVariables>(RUN_ROOT_QUERY, {\n    variables: {runId},\n  });\n  const {data, loading} = queryResult;\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data.pipelineRunOrError : null;\n  const snapshotID = run?.pipelineSnapshotId;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const repoAddress = repoMatch?.match\n    ? buildRepoAddress(repoMatch.match.repository.name, repoMatch.match.repositoryLocation.name)\n    : null;\n\n  const isJob = useMemo(\n    () => !!(run && repoMatch && isThisThingAJob(repoMatch.match, run.pipelineName)),\n    [run, repoMatch],\n  );\n\n  const automaterializeTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.AssetEvaluationID) || null,\n    [run],\n  );\n\n  const tickDetails = useMemo(() => {\n    if (repoAddress) {\n      const tags = run?.tags || [];\n      const tickTag = tags.find((tag) => tag.key === DagsterTag.TickId);\n\n      if (tickTag) {\n        const scheduleOrSensor = tags.find(\n          (tag) => tag.key === DagsterTag.ScheduleName || tag.key === DagsterTag.SensorName,\n        );\n        if (scheduleOrSensor) {\n          const instigationSelector: InstigationSelector = {\n            name: scheduleOrSensor.value,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          };\n          return {\n            tickId: tickTag.value,\n            instigationType: scheduleOrSensor.key as\n              | DagsterTag.ScheduleName\n              | DagsterTag.SensorName,\n            instigationSelector,\n          };\n        }\n      }\n    }\n\n    return null;\n  }, [run, repoAddress]);\n\n  const partitionTag = run?.tags.find((tag) => tag.key === DagsterTag.Partition);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        flex={{direction: 'row', alignItems: 'flex-start'}}\n        style={{\n          position: 'relative',\n          zIndex: 1,\n        }}\n      >\n        <PageHeader\n          title={<RunHeaderTitle run={run} runId={runId} />}\n          tags={\n            run ? (\n              <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n                <RunStatusTag status={run.status} />\n                {!isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <Tag icon=\"run\">\n                    Run of{' '}\n                    <PipelineReference\n                      pipelineName={run?.pipelineName}\n                      pipelineHrefContext={repoAddress || 'repo-unknown'}\n                      snapshotId={snapshotID}\n                      size=\"small\"\n                      isJob={isJob}\n                    />\n                  </Tag>\n                ) : null}\n                {tickDetails ? (\n                  <TickTagForRun\n                    instigationSelector={tickDetails.instigationSelector}\n                    instigationType={tickDetails.instigationType}\n                    tickId={tickDetails.tickId}\n                  />\n                ) : null}\n                {partitionTag && <RunTag tag={partitionTag} />}\n                <RunAssetTags run={run} />\n                <RunAssetCheckTags run={run} />\n                <RunTimingTags run={run} loading={loading} />\n                {automaterializeTag && run.assetSelection?.length ? (\n                  <AutomaterializeTagWithEvaluation\n                    assetKeys={run.assetSelection}\n                    evaluationId={automaterializeTag.value}\n                  />\n                ) : null}\n              </Box>\n            ) : null\n          }\n          right={run ? <RunHeaderActions run={run} isJob={isJob} /> : null}\n        />\n      </Box>\n      <RunById data={data} runId={runId} />\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunRoot;\n\nconst RunById = (props: {data: RunRootQuery | undefined; runId: string}) => {\n  const {data, runId} = props;\n\n  if (!data || !data.pipelineRunOrError) {\n    return null;\n  }\n\n  if (data.pipelineRunOrError.__typename !== 'Run') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No run found\"\n          description=\"The run with this ID does not exist or has been cleaned up.\"\n        />\n      </Box>\n    );\n  }\n\n  if (isExternalRun(data.pipelineRunOrError)) {\n    const externalUrl = getExternalRunUrl(data.pipelineRunOrError);\n    if (externalUrl) {\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"job\"\n            title=\"This run was remotely executed\"\n            description={\n              <Box flex={{direction: 'row', alignItems: 'center'}}>\n                <a href={externalUrl} target=\"_blank\" rel=\"noreferrer\">\n                  View the execution logs\n                </a>\n                <Icon name=\"open_in_new\" size={16} style={{marginLeft: 8}} />\n              </Box>\n            }\n          />\n        </Box>\n      );\n    } else {\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"job\"\n            title=\"No external URL found\"\n            description=\"This run was executed externally, but does not have an external URL.\"\n          />\n        </Box>\n      );\n    }\n  }\n\n  return <Run run={data.pipelineRunOrError} runId={runId} />;\n};\n\nconst RUN_ROOT_QUERY = gql`\n  query RunRootQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunPageFragment\n      }\n    }\n  }\n\n  ${RUN_PAGE_FRAGMENT}\n`;\n\nconst RunHeaderTitle = ({run, runId}: {run: RunPageFragment | null; runId: string}) => {\n  const backfillTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.Backfill),\n    [run],\n  );\n\n  if (backfillTag) {\n    return (\n      <Subtitle1>\n        <Link to=\"/runs\" style={{color: Colors.textLight()}}>\n          Runs\n        </Link>\n        {' / '}\n        <Link to={getBackfillPath(backfillTag.value, 'runs')} style={{color: Colors.textLight()}}>\n          {backfillTag.value}\n        </Link>\n        {' / '}\n        {runId.slice(0, 8)}\n      </Subtitle1>\n    );\n  }\n\n  return (\n    <Subtitle1 style={{display: 'flex', flexDirection: 'row', gap: 6}}>\n      <Link to=\"/runs\">Runs</Link>\n      <span>/</span>\n      <span style={{fontFamily: FontFamily.monospace}}>{runId.slice(0, 8)}</span>\n    </Subtitle1>\n  );\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\n\nimport {INSTIGATION_EVENT_LOG_FRAGMENT, InstigationEventLogTable} from './InstigationEventLogTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {TickLogEventsQuery, TickLogEventsQueryVariables} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tickId,\n  timestamp,\n  instigationSelector,\n  isOpen,\n  onClose,\n}: {\n  tickId: string | null;\n  timestamp?: number;\n  instigationSelector: InstigationSelector;\n  isOpen: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', maxWidth: '1200px', minWidth: '800px'}}\n      title={\n        <span>\n          {timestamp ? (\n            <span>\n              <span>Logs for {instigationSelector.name}: </span>\n              <TimestampDisplay timestamp={timestamp} timeFormat={{showSeconds: true}} />\n            </span>\n          ) : (\n            <span>Logs for {instigationSelector.name}</span>\n          )}\n        </span>\n      }\n    >\n      {tickId ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tickId={tickId} />\n      ) : null}\n      {/* Use z-index to force the footer to sit above the lines of the logs table */}\n      <Box background={Colors.backgroundDefault()} style={{zIndex: 3, position: 'relative'}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Done</Button>\n        </DialogFooter>\n      </Box>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tickId: string;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tickId}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (loading) {\n    return (\n      <Box style={{height: 500}} flex={{justifyContent: 'center', alignItems: 'center'}}>\n        <SpinnerWithText label=\"Loading logs…\" />\n      </Box>\n    );\n  }\n\n  if (events && events.length) {\n    return (\n      <Box style={{height: 500}} flex={{direction: 'column'}}>\n        <InstigationEventLogTable events={events} />\n      </Box>\n    );\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n        ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n        : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      <NonIdealState\n        icon=\"no-results\"\n        title=\"No logs to display\"\n        description={\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>\n              Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n              visit the documentation for more information.\n            </div>\n            {tickStatus === 'FAILURE' && (\n              <>\n                <div>\n                  For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                  Cloud agent versions 1.5.14 or higher.\n                </div>\n                <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n              </>\n            )}\n          </Box>\n        }\n        action={\n          instigationLoggingDocsUrl && (\n            <ExternalAnchorButton\n              href={instigationLoggingDocsUrl}\n              rightIcon={<Icon name=\"open_in_new\" />}\n            >\n              View documentation\n            </ExternalAnchorButton>\n          )\n        }\n      />\n    </Box>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n"],"names":["CancelRunButton","run","id","runId","canTerminate","showDialog","setShowDialog","useState","closeDialog","useCallback","onComplete","result","errors","error","showSharedToaster","message","icon","intent","Button","Icon","name","disabled","onClick","TerminationDialog","isOpen","onClose","selectedRuns","stepSelectionWithState","selection","metadata","stepStates","keys","map","steps","key","state","IStepState","PREPARING","present","length","failed","includes","FAILED","finished","every","SUCCEEDED","stepState","canRunAllSteps","doneStatuses","has","status","executionPlan","failedStatuses","graph","props","repoMatch","useRepositoryForRunWithParentSnapshot","jobError","useJobAvailabilityErrorForRun","artifactsPersisted","currentRunSelection","stepSelectionFromRunTags","tag","tags","find","t","DagsterTag","StepSelection","filterByQuery","value","all","k","query","currentRunIsFromFailure","some","IsResumeRetry","reexecute","useJobReexecution","reexecuteWithSelection","pipelineSnapshotId","executionParams","getReexecutionParamsForSelection","repositoryLocationName","match","repositoryLocation","repositoryName","repository","full","scope","title","tooltip","ReexecutionStrategy","ALL_STEPS","e","shiftKey","same","div","StepSelectionDescription","selected","fromSelected","console","warn","Promise","resolve","selectionForPythonFiltering","join","selectionForUIFiltering","selectionKeys","filterRunSelectionByQuery","node","fromFailureEnabled","canRunFromFailure","fromFailure","FROM_FAILURE","forEach","option","options","assetSelection","fromAssetFailure","FROM_ASSET_FAILURE","filter","Boolean","preferredRerun","primary","Group","direction","spacing","Box","flex","LaunchButtonDropdown","runCount","undefined","DEFAULT_DISABLED_REASON","hasReExecutePermission","launchpadElement","style","paddingLeft","span","display","step","useFavicon","href","useEffect","el","document","querySelector","previousHref","getAttribute","setAttribute","runStatusFavicon","RunStatus","FAILURE","SUCCESS","STARTING","STARTED","CANCELING","Run","memo","logsFilter","setLogsFilter","useQueryPersistedLogFilter","selectionQuery","setSelectionQuery","useQueryPersistedState","queryKey","defaults","useDocumentTitle","isHiddenAssetGroupJob","pipelineName","slice","onShowStateDetails","stepKey","logs","errorNode","__typename","showCustomAlert","body","PythonErrorInfo","onSetSelectionQuery","logQuery","token","logsDependency","useTraceDependency","RunContext","Provider","LogsProvider","OnLogsLoaded","dependency","RunMetadataProvider","RunWithData","onSetLogsFilter","useLayoutEffect","loading","completeDependency","CompletionType","logTypeFromQuery","queryLogType","LogType","stdout","stderr","structured","setQueryLogType","logType","computeLogUrl","setComputeLogUrl","stepKeysJSON","JSON","stringify","Object","sort","stepKeys","useMemo","parse","runtimeGraph","toGraphQueryItems","selectionStepKeys","n","logCaptureInfo","computeLogFileKey","setComputeLogFileKey","useComputeLogFileKeyForSelection","defaultToFirstStep","logsFilterStepKeys","v","reduce","accum","push","onClickStep","evt","index","indexOf","nextSelectionQuery","removeStepFromSelection","matchingLogKey","matchingComputeLogKeyFromStepKey","logCaptureSteps","expandedPanel","setExpandedPanel","containerRef","useRef","current","size","getSize","isTopExpanded","isBottomExpanded","expandTopPanel","changeSize","resetPanels","SplitPanelContainer","ref","axis","identifier","firstInitialPercent","firstMinSize","first","gantt","ErrorBoundary","region","GanttChart","mode","GanttChartMode","WATERFALL_TIMED","toolbarActions","alignItems","gap","Tooltip","content","RunActionButtons","onSetSelection","focusedTime","NonIdealState","GanttChartLoadingState","secondMinSize","second","LogsContainer","LogsToolbar","onSetLogType","lt","setLogType","onSetFilter","onSetComputeLogKey","counts","isSectionExpanded","toggleExpanded","expandBottomPanel","description","action","Link","to","runsPathWithFilters","LogsScrollingTable","filterStepKeys","filterKey","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","NoStepSelectionState","type","styled","grow","justifyContent","background","Colors","RunAssetCheckTags","skip","data","useQuery","queryResult","RUN_ASSETS_CHECKS_QUERY","variables","pipelineRunOrError","assetChecks","assetCheckSelection","AssetCheckTagCollection","gql","RunAssetTags","RUN_ASSETS_QUERY","fetchPolicy","assetKeys","assets","a","assetKeysForRun","AssetKeyTagCollection","useTags","RunAlertNotifications","RunPoolsDialog","pools","Dialog","canOutsideClickClose","canEscapeKeyClose","margin","horizontal","vertical","PoolTag","pool","DialogFooter","topBorder","RunHeaderActions","isJob","runMetricsEnabled","hasRunMetricsEnabled","visibleDialog","setVisibleDialog","rootServerURI","useContext","AppContext","refetch","RunsQueryRefetchContext","history","useHistory","freeSlots","useMutation","FREE_CONCURRENCY_SLOTS_MUTATION","freeConcurrencySlots","resp","jobLink","workspacePipelineLinkForRun","repositoryOrigin","disabledReason","useDisabledButtonTooltipFix","label","AnchorButton","allPools","position","targetTagName","isExternalRun","hasDeletePermission","Popover","Menu","MenuItem","text","window","open","QUEUED","tagName","RunMetricsDialog","hasConcurrencyKeySlots","RunConfigDialog","runConfigYaml","QueuedRunCriteriaDialog","DeletionDialog","workspacePipelinePath","repoName","repoLocation","path","onTerminateInstead","hasTerminatePermission","RunTimingTags","startTime","interactionKind","placement","padding","RunTimingDetails","Tag","TimestampDisplay","timestamp","timeFormat","showSeconds","showTimezone","updateTime","endTime","fontVariantNumeric","formatElapsedTimeWithoutMsec","Date","now","TickTagForRun","instigationSelector","instigationType","tickId","showDetails","setShowDetails","showLogs","setShowLogs","ScheduleName","repoAddress","buildRepoAddress","actions","workspacePathFromAddress","TagActionsPopover","maxWidth","MiddleTruncate","TickDetailsDialog","tickResultType","TickLogDialog","COLLATOR","Intl","Collator","navigator","language","sensitivity","AutomaterializeTagWithEvaluation","openEvaluation","evaluationId","setOpenEvaluation","sortedKeys","b","compare","width","border","fontWeight","maxHeight","overflowY","url","assetDetailsPathForKey","assetKey","view","evaluation","left","right","overflow","ButtonLink","assetKeyPath","whiteSpace","EvaluationDetailDialog","evaluationID","RunRoot","useTrackPageView","useParams","RUN_ROOT_QUERY","snapshotID","isThisThingAJob","automaterializeTag","AssetEvaluationID","tickDetails","tickTag","TickId","scheduleOrSensor","SensorName","location","partitionTag","Partition","flexDirection","minWidth","height","zIndex","PageHeader","RunHeaderTitle","wrap","RunStatusTag","PipelineReference","pipelineHrefContext","snapshotId","RunTag","RunById","externalUrl","getExternalRunUrl","target","rel","marginLeft","RUN_PAGE_FRAGMENT","backfillTag","Backfill","Subtitle1","color","getBackfillPath","fontFamily","FontFamily","monospace","QueryfulTickLogsTable","TICK_LOG_EVENTS_QUERY","notifyOnNetworkStatusChange","events","instigationStateOrError","tick","logEvents","SpinnerWithText","InstigationEventLogTable","tickStatus","instigationLoggingDocsUrl","ExternalAnchorButton","rightIcon","INSTIGATION_EVENT_LOG_FRAGMENT"],"sourceRoot":"","ignoreList":[]}